<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><meta name="Microsoft.Help.SelfBranded" content="true" /><meta name="Language" content="en-US" /><meta name="Microsoft.Help.Locale" content="en-US" /><meta name="Microsoft.Help.TopicLocale" content="en-US" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"></script><title>UndefinedLogicalNodeClass Properties</title><meta name="Title" content="UndefinedLogicalNodeClass propertyen" /><meta name="Microsoft.Help.Id" content="Properties.T:LogicalTaskTree.UndefinedLogicalNodeClass" /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="System.Keywords" content="UndefinedLogicalNodeClass class, propertyen" /><meta name="container" content="LogicalTaskTree" /><meta name="file" content="Properties_T_LogicalTaskTree_UndefinedLogicalNodeClass" /><meta name="guid" content="Properties_T_LogicalTaskTree_UndefinedLogicalNodeClass" /><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-3.5.1.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="SetDefaultLanguage('cs');"><input type="hidden" id="userDataCache" class="userDataStyle" /><div id="PageHeader" class="pageHeader">Vishnu - logical monitoring job controller</div><div class="pageBody"><div id="TopicContent" class="topicContent"><table class="titleTable"><tr><td class="logoColumn"><img src="../icons/Vishnu_64.png" /></td><td class="titleColumn"><h1>Undefined<wbr />Logical<wbr />Node<wbr />Class properties</h1></td></tr></table><p>The <a href="T_LogicalTaskTree_UndefinedLogicalNodeClass.htm">UndefinedLogicalNodeClass</a> Type exposes the following members.</p><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDADA')" onkeypress="SectionExpandCollapse_CheckKey('IDADA', event)" tabindex="0"><img id="IDADAToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Properties</span></div><div id="IDADASection" class="collapsibleSection"><table id="PropertyList" class="members"><tr><th class="iconColumn">Â </th><th>Name</th><th>Description of the</th></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_BreakWithResult.htm">BreakWithResult</a></td><td>
            A subtree may already have a clear logical result,
            before all the children have finished their processing.
            If BreakWithResult=True, these are then cancelled if the
            no triggers are active on the branch in question.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_CanTreeStart.htm">CanTreeStart</a></td><td>
            Indicates whether a (partial) tree can be started, i.e. that a
            node with children all its children can be started (recursively)
            or in the case of an end node (checker) without children this can be started itself.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_NetEti_Globals_GenericTree_1_Children.htm">Children</a></td><td>
            List of the children of a node.
            <br />(Inherited from <a href="T_NetEti_Globals_GenericTree_1.htm">GenericTree<span id="LSTF81375FF_0" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTF81375FF_1" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_DebugMode.htm">DebugMode</a></td><td>
            Additional test outputs can be made for True.
            Default: False.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_Id.htm">Id</a></td><td>
            The unique identifier of the node.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_IdInfo.htm">IdInfo</a></td><td>
            The unique identifier of the node (identical to the property Id).
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_IdPath.htm">IdPath</a></td><td>
            Path to the node reduced to a chain of Ids separated by '/'.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_InitNodes.htm">InitNodes</a></td><td>
            If True, all nodes in the tree are reset when this node is started.
            Can be used for loops in controlled jobs.
            Default: false.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_IsActive.htm">IsActive</a></td><td>
            If true, the subtree/node is in an active (started) state.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_IsGlobal.htm">IsGlobal</a></td><td>
            If true, this node is created as a reference node if anywhere in the tree
            (not only in the current job) the name of the node has already been found.
            If false, the system only searches for nodes with the same name in the current job.
            Default: false.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_IsInSleepTime.htm">IsInSleepTime</a></td><td>
            Returns true if a rest period defined by the user is currently in progress.
            for Vishnu actors (checkers) is running.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_IsInSnapshot.htm">IsInSnapshot</a></td><td>
            With True, this LogicalNode is located within a snapshot.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_IsSnapshotDummy.htm">IsSnapshotDummy</a></td><td>
            With True, this node is only used for display and does not allow any other functions.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_LastExecutingTreeEvent.htm">LastExecutingTreeEvent</a></td><td>
            The last triggering TreeEvent (for TreeEvent-triggered nodes)
            or zero.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_LastLogical.htm">LastLogical</a></td><td>
            The last logical state of a node.
            For accessing the states of child nodes without
            re-initiate the determination of the statuses.
            Reduces the processor load.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_LastLogicalState.htm">LastLogicalState</a></td><td>
            The last result state of a node.
            For accessing the states of child nodes without
            re-initiate the determination of the statuses.
            Reduces the processor load.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_LastNotNullLogical.htm">LastNotNullLogical</a></td><td>
            Flag field for the last state of Logical that was not zero;
            is required so that workers are only started when
            the state of Logical has changed significantly and not every time,
            when the checker is working (Logical = zero).
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_UndefinedLogicalNodeClass_LastResult.htm">LastResult</a></td><td>
            Result for this node.
            Throws a NotImplementedException here.
            <br />(Overwrites <a href="P_LogicalTaskTree_LogicalNode_LastResult.htm">LogicalNode<span id="LSTF81375FF_2" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>LastResult</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_LastRun.htm">LastRun</a></td><td>
            Time of the last start of the node.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_LastState.htm">LastState</a></td><td>
            The last processing state of a node.
            For accessing the states of child nodes without
            re-initiate the determination of the statuses.
            Reduces the processor load.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_Level.htm">Level</a></td><td>
            The hierarchy level of the node.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_LevelInfo.htm">LevelInfo</a></td><td>
            The hierarchy level of the node (identical to the property level).
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_LockName.htm">LockName</a></td><td>
            Optional name used for global locking.
            Is used if ThreadLocked is set.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_Logger.htm">Logger</a></td><td>
            An optional logger that is activated for certain events
            is called or null.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_UndefinedLogicalNodeClass_Logical.htm">Logical</a></td><td>
            The logical state of a node; this is ultimately what the
            entire processing.
            Throws a NotImplementedException here.
            <br />(Overwrites <a href="P_LogicalTaskTree_LogicalNode_Logical.htm">LogicalNode<span id="LSTF81375FF_3" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>Logical</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_LogicalState.htm">LogicalState</a></td><td>
            The result state of the node:
            None, Start, Done, Fault, Timeout, UserAbort.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_Name.htm">Name</a></td><td>
            "Human-friendly" representation of the node.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_NameId.htm">NameId</a></td><td>
            Combination of name and Id of the node.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_NameInfo.htm">NameInfo</a></td><td>
            "Human-friendly" representation of the node.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_NextRun.htm">NextRun</a></td><td>
            Time of the next start of the node (if known) or DateTime.MinValue.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_NextRunInfo.htm">NextRunInfo</a></td><td>
            Info text about the next start of the node (if known) or null.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_NodeType.htm">NodeType</a></td><td>
            The node type:
              None, NodeConnector, ValueModifier, JobConnector, Constant, Checker, NodeList, JobList, Snapshot.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_ParentView.htm">ParentView</a></td><td>
            The parent control in which this node is displayed.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_Path.htm">Path</a></td><td>
            The path to the node consisting of a chain of NameIds separated by '/':
            NameId is Name + "(" + Id + ")" for nodes with Name != null,
                   only Id with name = null.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_PathInfo.htm">PathInfo</a></td><td>
            The path to the node (identical to the Path property).
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_ReferencedNodeId.htm">ReferencedNodeId</a></td><td>
            Id of an originally referenced node or null.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_ReferencedNodeName.htm">ReferencedNodeName</a></td><td>
            Name of an originally referenced node or null.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_ReferencedNodePath.htm">ReferencedNodePath</a></td><td>
            Path of an originally referenced node or null.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_UndefinedLogicalNodeClass_SingleNodes.htm">SingleNodes</a></td><td>
            Number of SingleNodes (ultimately checkers) at the end of a (sub)tree.
            Throws a NotImplementedException here.
            <br />(Overwrites <a href="P_LogicalTaskTree_LogicalNode_SingleNodes.htm">LogicalNode<span id="LSTF81375FF_4" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>SingleNodes</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_UndefinedLogicalNodeClass_SingleNodesFinished.htm">SingleNodesFinished</a></td><td>
            Percentage value for the proportion of terminated SingleNodes
            (ultimately checker) at the end of a (partial) tree.
            Throws a NotImplementedException here.
            <br />(Overwrites <a href="P_LogicalTaskTree_LogicalNode_SingleNodesFinished.htm">LogicalNode<span id="LSTF81375FF_5" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>SingleNodesFinished</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_SleepTimeFrom.htm">SleepTimeFrom</a></td><td>
            The start of a possible rest period.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_SleepTimeTo.htm">SleepTimeTo</a></td><td>
            The end of a possible rest period.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_StartCollapsed.htm">StartCollapsed</a></td><td>
            With True, the job is displayed collapsed at startup if the UI supports this.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_UndefinedLogicalNodeClass_State.htm">State</a></td><td>
            The processing status of a node:
            None, Waiting, Working, Finished, Triggered, Ready (= Finished | Triggered), CanStart (= None|Ready), Busy (= Waiting | Working).
            Throws a NotImplementedException here.
            <br />(Overwrites <a href="P_LogicalTaskTree_LogicalNode_State.htm">LogicalNode<span id="LSTF81375FF_6" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>State</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_ThreadLocked.htm">ThreadLocked</a></td><td>
            If True, each thread is locked via the class so that
            non-thread-safe checkers are serialized;
            Default: False;
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_TreeParams.htm">TreeParams</a></td><td>
            Additional parameters, some that apply to the entire tree
            validity and some node-specific parameters
            or zero.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_Trigger.htm">Trigger</a></td><td>
            An optional trigger that calls the job repeatedly
            or null (internally overrides BreakWithResult).
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_TriggeredRunDelay.htm">TriggeredRunDelay</a></td><td>
            Delays the start of a node (and InitNodes).
            Can be used for loops in controlled jobs.
            Default: 0 (milliseconds).
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_TypeInfo.htm">TypeInfo</a></td><td>
            The node type:
              None, NodeConnector, ValueModifier, Constant, Checker.
            <a href="T_Vishnu_Interchange_NodeTypes.htm">NodeTypes</a><br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_UndefinedLogicalNodeClass_UserControlPath.htm">UserControlPath</a></td><td>
            The path to the UserControl currently to be loaded dynamically.
            Throws a NotImplementedException here.
            <br />(Overwrites <a href="P_LogicalTaskTree_LogicalNode_UserControlPath.htm">LogicalNode<span id="LSTF81375FF_7" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>UserControlPath</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_WorkersState.htm">WorkersState</a></td><td>
            A collective status for all assigned workers.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr></table><a href="#PageHeader">Back to the top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('seeAlso')" onkeypress="SectionExpandCollapse_CheckKey('seeAlso', event)" tabindex="0"><img id="seeAlsoToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See also</span></div><div id="seeAlsoSection" class="collapsibleSection"><h4>Reference</h4><div><a href="T_LogicalTaskTree_UndefinedLogicalNodeClass.htm">UndefinedLogicalNodeClass Class</a></div><div><a href="N_LogicalTaskTree.htm">LogicalTaskTree namespace</a></div></div></div></div><div id="PageFooter" class="pageFooter">Naturally, many findings and developments are based on information freely available on the Internet. Any missing references to original authors are unintentional and will be updated as soon as they are reported.<p>Copyright Â© 2012-2025 Erik Nagel</p><div class="feedbackLink">Send comments about this feature to
        <a id="HT_MailLink" href="mailto:Vishnu%40reallyhuman.net?Subject=Vishnu%20-%20der%20logische%20Prozess-Monitor">Vishnu@reallyhuman.net</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback will be used to improve the documentation and the product. Your email address will not be used for any other purpose and will be deleted after the reported issue has been resolved. While working on the problem, you may be contacted by email for further details or clarification of your feedback. After the problem has been isolated, you may receive an email to resolve the issue.");
        </script></div></body></html>