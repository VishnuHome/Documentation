<!DOCTYPE html>
<html>
<head>
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta http-equiv="Content-Type" content=
  "text/html; charset=utf-8">
  <meta name="Microsoft.Help.SelfBranded" content="true">
  <meta name="Language" content="en-US">
  <meta name="Microsoft.Help.Locale" content="en-US">
  <meta name="Microsoft.Help.TopicLocale" content="en-US">
  <link rel="shortcut icon" href="../icons/favicon.ico">
  <link rel="stylesheet" type="text/css" href=
  "../styles/branding.css">
  <link rel="stylesheet" type="text/css" href=
  "../styles/branding-en-US.css">
  <script type="text/javascript" src=
  "../scripts/branding.js"></script>
  <title>Vishnu Logic</title>
  <meta name="Microsoft.Help.Id" content=
  "0e4f7c52-ffb4-4ea3-9ab6-40f24b47373d">
  <meta name="Microsoft.Help.ContentType" content="Concepts">
  <meta name="Microsoft.Help.Category" content="XML">
  <meta name="Description" content=
  "Vishnu converts your logical expression (LogicalExpression, see also ) internally into a corresponding tree structure (Tree), which is processed logically and which you will ultimately find in the normal display (&quot;Logical Task Tree&quot;).">
  <link type="text/css" rel="stylesheet" href=
  "../styles/highlight.css">
  <script type="text/javascript" src=
  "../scripts/highlight.js"></script>
  <link rel="stylesheet" type="text/css" href=
  "../styles/branding-Website.css">
  <script type="text/javascript" src=
  "../scripts/jquery-3.5.1.min.js"></script>
  <script type="text/javascript" src=
  "../scripts/branding-Website.js"></script>
  <script type="text/javascript" src=
  "../scripts/clipboard.min.js"></script>
</head>
<body onload="SetDefaultLanguage('cs');">
  <input type="hidden" id="userDataCache" class="userDataStyle">
  <div id="PageHeader" class="pageHeader">Vishnu - logical monitoring job controller</div><div class="pageBody">
    <div id="TopicContent" class="topicContent">
      <table class="titleTable">
        <tr>
          <td class="logoColumn"><img src=
          "../icons/Vishnu_64.png"></td>
          <td class="titleColumn">
            <h1>Vishnu Logic</h1>
          </td>
        </tr>
      </table>
      <div>
        <p><strong>Vishnu</strong> sets your logical expression
        (<span class="keyword">LogicalExpression</span>, see also
        <a href=
        "E6ECB24A-CA5C-4785-9514-992F359D394A.htm">Configuration
        and parameters</a>) internally into a corresponding tree
        structure (Tree), which is processed logically and which
        you will ultimately find again in the normal representation
        ("Logical Task Tree"). What this looks like in detail and
        which logical expressions <strong>Vishnu</strong>
        understands can be read in this chapter.</p>
      </div>
      <div class="collapsibleAreaRegion" id="LogicalTaskTree">
        <span class="collapsibleRegionTitle" onclick=
        "SectionExpandCollapse('IDDAB')" onkeypress=
        "SectionExpandCollapse_CheckKey('IDDAB', event)" tabindex=
        "0"><img id="IDDABToggle" class="collapseToggle" src=
        "../icons/SectionExpanded.png">Logical Task Tree</span>
      </div>
      <div id="IDDABSection" class="collapsibleSection">
        <p>During processing, the logical result of a node is
        derived from the results of its sub-nodes. Let's take
        another look at the demo job <a href=
        "62ca75a8-ba50-4115-93df-b1e76bf6e5f7.htm">A simple
        Example</a> for clarification.</p>
        <div class="mediaNear"><img alt="Demo Job 01" src=
        "../media/DemoJob_01.en.PNG"></div>
        <p>The "CheckDiskSpace" node is displayed in red because
        the <span class="keyword">Checker</span> of the sub-node
        "Check_D" returned "false" ("Free" with 143636 MB was
        smaller than "Minimum" with 200000 MB). Since
        "CheckDiskSpace" connects its sub-nodes with a logical
        <span class="keyword">AND</span>, "Check_DiskSpace"
        consequently goes also to "false" (red). This is then
        propagated upwards in the tree and "Check All" also goes to
        "false" (red).</p>
        <p>We need to take a closer look at the "CheckServers"
        node. This node is green (true), although one of its
        "grandchild" nodes "Local_Backup" is red, i.e. has reported
        "false". As you can see from the following excerpt from the
        <span class="keyword">JobDescription.xml</span>, the
        problematic node "Local_Backup" is connected to the node
        "Local" via an <span class="keyword">OR</span> and this
        connection is bracketed as a whole.</p>
        <div id="IDFBDAB" class="codeSnippetContainer">
          <div class="codeSnippetContainerTabs">
            <div id="IDFBDAB_tab1" class=
            "codeSnippetContainerTabSingle">
              JobDescription.xml
            </div>
          </div>
          <div class="codeSnippetContainerCodeContainer">
            <div class="codeSnippetToolBar">
              <div class="codeSnippetToolBarText">
                <a id="IDFBDAB_copyCode" href="#" class=
                "copyCodeSnippet" onclick=
                "CopyToClipboard('IDFBDAB');return false;" title=
                "Copy">Copy</a>
              </div>
            </div>
            <div id="IDFBDAB_code_Div1" class=
            "codeSnippetContainerCode" style="display: block">
              <pre xml:space="preserve">...
  <span class="highlight-xml-bracket">&lt;</span><span class=
"highlight-xml-tag">LogicalName</span><span class=
"highlight-xml-bracket">&gt;</span>CheckServers<span class=
"highlight-xml-bracket">&lt;/</span><span class=
"highlight-xml-tag">LogicalName</span><span class=
"highlight-xml-bracket">&gt;</span>
  <span class="highlight-xml-bracket">&lt;</span><span class=
"highlight-xml-tag">LogicalExpression</span><span class=
"highlight-xml-bracket">&gt;</span>(Google AND Heise) AND (Local OR Local_Backup)<span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">LogicalExpression</span><span class="highlight-xml-bracket">&gt;</span>
...</pre>
            </div>
          </div>
        </div>
        <p>Since it is sufficient for a logical <span class=
        "keyword">OR</span> if one of the two partners is "true"
        (green), the anonymous intermediate node inserted by
        <strong>Vishnu</strong> instead of the brackets becomes
        "true" (green). The other anonymous intermediate node,
        which connects "Google" and "Heise" via <span class=
        "keyword">AND</span>, is green anyway, which means that
        "CheckServers" ultimately also becomes green.
        <strong>Vishnu</strong> always creates intermediate nodes
        when a logical expression contains several operators (AND,
        OR, etc.) with different binding strengths (e.g. AND binds
        more tightly than OR) or when you have placed brackets.</p>
        <div class="alert">
          <table>
            <tr>
              <th><img src="../icons/AlertNote.png" alt=
              "Hinweis">&nbsp;&nbsp;Note</th>
            </tr>
            <tr>
              <td>
                <p>You can also use parentheses when they are not
                necessary from a purely logical point of view to
                make <strong>Vishnu</strong> create anonymous
                intermediate nodes and thus make the screen display
                more compact.</p>
              </td>
            </tr>
          </table>
        </div>
      </div>
      <div class="collapsibleAreaRegion" id="Syntax">
        <span class="collapsibleRegionTitle" onclick=
        "SectionExpandCollapse('IDEAB')" onkeypress=
        "SectionExpandCollapse_CheckKey('IDEAB', event)" tabindex=
        "0"><img id="IDEABToggle" class="collapseToggle" src=
        "../icons/SectionExpanded.png">Logic elements and
        syntax</span>
      </div>
      <div id="IDEABSection" class="collapsibleSection">
        <p><span class="keyword">LogicalExpressions</span> can be
        formulated in two slightly different ways (shown in our
        example above):</p>
        <ol>
          <li>
            <p>&lt;LogicalExpression&gt;(Google AND Heise) AND
            (Local OR Local_Backup)&lt;/LogicalExpression&gt;</p>
          </li>
          <li>
            <p>&lt;LogicalExpression&gt;&lt;![CDATA[(Google AND
            Heise) AND (Local OR
            Local_Backup)]]&gt;&lt;/LogicalExpression&gt;</p>
          </li>
        </ol>
        <p>The second form, in which the logical expression is
        additionally enclosed in "&lt;![CDATA[" und "]]&gt;", has
        the advantage that special characters may also appear in
        the logical expression. This makes it possible, to write
        <span class="keyword">Operators</span> in their short form
        (see operator table below).</p>
        <div class="caption">
          Valid Vishnu operators
        </div>
        <table>
          <tr>
            <th>
              <p>Operator</p>
            </th>
            <th>
              <p>Syntax</p>
            </th>
            <th>
              <p>Short forms</p>
            </th>
          </tr>
          <tr>
            <td>
              <p>Is equal (identity)</p>
            </td>
            <td>
              <p>'IS'</p>
            </td>
            <td>
              <p>':'</p>
            </td>
          </tr>
          <tr>
            <td>
              <p>Is not (negation)</p>
            </td>
            <td>
              <p>'NOT'</p>
            </td>
            <td>
              <p>'!'</p>
            </td>
          </tr>
          <tr>
            <td>
              <p>Logical AND</p>
            </td>
            <td>
              <p>'AND'</p>
            </td>
            <td>
              <p>'&amp;'</p>
            </td>
          </tr>
          <tr>
            <td>
              <p>Logical OR</p>
            </td>
            <td>
              <p>'OR'</p>
            </td>
            <td>
              <p>'|'</p>
            </td>
          </tr>
          <tr>
            <td>
              <p>Exclusive-OR (either or)</p>
            </td>
            <td>
              <p>'XOR'</p>
            </td>
            <td>
              <p>'&gt;&lt;'</p>
            </td>
          </tr>
          <tr>
            <td>
              <p>Implication (it follows)</p>
            </td>
            <td>
              <p>'IMP'</p>
            </td>
            <td>
              <p>'=&gt;'</p>
            </td>
          </tr>
          <tr>
            <td>
              <p>not AND</p>
            </td>
            <td>
              <p>'NAND'</p>
            </td>
            <td>
              <p>'!&amp;'</p>
            </td>
          </tr>
          <tr>
            <td>
              <p>not OR</p>
            </td>
            <td>
              <p>'NOR'</p>
            </td>
            <td>
              <p>'!|'</p>
            </td>
          </tr>
          <tr>
            <td>
              <p>not exclusive-OR</p>
            </td>
            <td>
              <p>'XNOR'</p>
            </td>
            <td>
              <p>'!&gt;&lt;'</p>
            </td>
          </tr>
          <tr>
            <td>
              <p>Opening Bracket</p>
            </td>
            <td>
              <p>'GROUP'</p>
            </td>
            <td>
              <p>'(', '[', '{'</p>
            </td>
          </tr>
          <tr>
            <td>
              <p>Closing Bracket</p>
            </td>
            <td>
              <p>UNGROUP'</p>
            </td>
            <td>
              <p>')', ']', '}'</p>
            </td>
          </tr>
          <tr>
            <td>
              <p>Is equal</p>
            </td>
            <td>
              <p>'EQ'</p>
            </td>
            <td>
              <p>'==', '='</p>
            </td>
          </tr>
          <tr>
            <td>
              <p>Is not equal</p>
            </td>
            <td>
              <p>'NE'</p>
            </td>
            <td>
              <p>'&lt;&gt;'</p>
            </td>
          </tr>
          <tr>
            <td>
              <p>Is less than</p>
            </td>
            <td>
              <p>'LT'</p>
            </td>
            <td>
              <p>'&lt;'</p>
            </td>
          </tr>
          <tr>
            <td>
              <p>Is less than or equal to</p>
            </td>
            <td>
              <p>'LE'</p>
            </td>
            <td>
              <p>'&lt;='</p>
            </td>
          </tr>
          <tr>
            <td>
              <p>Is greater than</p>
            </td>
            <td>
              <p>GT'</p>
            </td>
            <td>
              <p>'&gt;'</p>
            </td>
          </tr>
          <tr>
            <td>
              <p>Is greater than or equal to</p>
            </td>
            <td>
              <p>'GE'</p>
            </td>
            <td>
              <p>'&gt;='</p>
            </td>
          </tr>
          <tr>
            <td>
              <p>Threshold value 10%, 20%, ... , 80%, 90%</p>
            </td>
            <td>
              <p>'TR10', 'TR20', ... , 'TR80', 'TR90'</p>
            </td>
            <td>
              <p>---</p>
            </td>
          </tr>
        </table>
        <div class="alert">
          <table>
            <tr>
              <th><img src="../icons/AlertCaution.png" alt=
              "Important">&nbsp;&nbsp;Important</th>
            </tr>
            <tr>
              <td>
                <p>A variable in a <span class=
                "keyword">LogicalExpression</span> such as "Google"
                or "Heise" can occur several times in more complex
                logical constructs. <strong>Vishnu</strong> then
                displays it multiple times in the tree, but
                internally ensures that an associated <span class=
                "keyword">Checker</span> is only executed once.</p>
              </td>
            </tr>
          </table>
        </div>
        <p><strong>Further information</strong></p>
        <p>The <span class="keyword">Threshold</span> logic checks
        whether a certain percentage of the job's subordinate nodes
        have returned the result <span class="keyword"><span id=
        "LSTFFDA894F_0" data-languagespecifictext=
        "vb=True|nu=true"></span></span>. If the percentage
        (threshold) set by the selected operator is reached or
        exceeded, the entire job goes to <span class=
        "keyword"><span id="LSTFFDA894F_0"
        data-languagespecifictext="vb=True|nu=true"></span></span>
        (green display).<br>
        In the example below with a total of 10 checkers, the
        threshold value of 50% was passed via the
        <strong>TR50</strong> operator. As can be seen, from the
        5th green checker onwards, the job also goes to green
        (true).</p>
        <div class="mediaNear"><img alt="Check Treshold 50 10" src=
        "../media/Check_Treshold_50_10.jpg"></div>
        <p><span class="keyword">Operators</span> can usually be
        used in a chain with a total of more than two arguments.
        This means that, for example, more than just two
        <span class="keyword">Checkers</span> can be related using
        the <strong>XOR</strong> operator (see image below). The
        same applies, for example, to comparison operators.</p>
        <div class="mediaNear"><img alt="Check Dependent Node" src=
        "../media/CheckDependentNode.JPG"></div>
      </div>
    </div>
  </div>
  <div id="PageFooter" class="pageFooter">
    Naturally, many findings and developments are based on
    information freely available on the Internet. Any missing
    references to original authors are unintentional and will be
    updated as soon as they are reported.
    <p>Copyright © 2012-2025 Erik Nagel</p>
    <div class="feedbackLink">
      Send comments about this feature to <a id="HT_MailLink" href=
      "mailto:Vishnu%40reallyhuman.net?Subject=Vishnu%20-%20der%20logische%20Prozess-Monitor">
      Vishnu@reallyhuman.net</a>
    </div>
    <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback will be used to improve the documentation and the product. Your email address will not be used for any other purpose and will be deleted after the reported issue has been resolved. While working on the problem, you may be contacted by email for further details or clarification of your feedback. After the problem has been isolated, you may receive an email to resolve the issue.");
    </script>
  </div>
</body>
</html>
