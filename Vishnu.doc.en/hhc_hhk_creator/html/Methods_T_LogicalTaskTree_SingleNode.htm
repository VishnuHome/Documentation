<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><meta name="Microsoft.Help.SelfBranded" content="true" /><meta name="Language" content="en-US" /><meta name="Microsoft.Help.Locale" content="en-US" /><meta name="Microsoft.Help.TopicLocale" content="en-US" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"></script><title>SingleNode methods</title><meta name="Title" content="SingleNode methods" /><meta name="Microsoft.Help.Id" content="Methods.T:LogicalTaskTree.SingleNode" /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="System.Keywords" content="SingleNode class, methods" /><meta name="container" content="LogicalTaskTree" /><meta name="file" content="Methods_T_LogicalTaskTree_SingleNode" /><meta name="guid" content="Methods_T_LogicalTaskTree_SingleNode" /><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-3.5.1.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="SetDefaultLanguage('cs');"><input type="hidden" id="userDataCache" class="userDataStyle" /><div id="PageHeader" class="pageHeader">Vishnu - logical monitoring job controller</div><div class="pageBody"><div id="TopicContent" class="topicContent"><table class="titleTable"><tr><td class="logoColumn"><img src="../icons/Vishnu_64.png" /></td><td class="titleColumn"><h1>Single<wbr />Node methods</h1></td></tr></table><p>The <a href="T_LogicalTaskTree_SingleNode.htm">SingleNode</a> Type exposes the following members.</p><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDADA')" onkeypress="SectionExpandCollapse_CheckKey('IDADA', event)" tabindex="0"><img id="IDADAToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Methods</span></div><div id="IDADASection" class="collapsibleSection"><table id="MethodList" class="members"><tr><th class="iconColumn">Â </th><th>Name</th><th>Description of the</th></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_Break.htm">Break</a></td><td>
            If necessary, log out of the trigger,
            Cancel the task via CancellationToken, set status.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_CanControlledTreeStart.htm">CanControlledTreeStart</a></td><td>
            Specifies whether a (sub)tree can be started in a JobController, i.e. that
            the node and all its parents can be started (recursively).
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_NetEti_Globals_GenericTree_1_Climb2Top.htm">Climb2Top</a></td><td>
            Shimmies up through the tree (up to the root)
            and calls up the action for each node.
            <br />(Inherited from <a href="T_NetEti_Globals_GenericTree_1.htm">GenericTree<span id="LSTB5D61494_0" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTB5D61494_1" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_SingleNode_DoRun.htm">DoRun</a></td><td>
            The checker thread is started here.
            This routine runs asynchronously.
            <br />(Overwrites <a href="M_LogicalTaskTree_LogicalNode_DoRun.htm">LogicalNode<span id="LSTB5D61494_2" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>DoRun(TreeEvent)</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_SingleNode_Equals.htm">Equals</a></td><td>
            Compares the content of this SingleNode according to logical aspects
            with the content of a transferred SingleNode.
            <br />(Overwrites <a href="M_LogicalTaskTree_LogicalNode_Equals.htm">LogicalNode<span id="LSTB5D61494_3" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>Equals(Object)</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_FindEventTriggers.htm">FindEventTriggers</a></td><td>
            Searches for relevant triggers for an event.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_FindNodeById.htm">FindNodeById</a></td><td>
            A derivative of LogicalNode can use this to create its own thread
            cause it to be cancelled.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_GetEnvironment.htm">GetEnvironment</a></td><td>
            Returns the ConcurrentDictionary Environment as simple Dictionary Results.
            Use the internal routine GetResultsFromResultList().
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_SingleNode_GetHashCode.htm">GetHashCode</a></td><td>
            Generates a hash code for this SingleNode.
            <br />(Overwrites <a href="M_LogicalTaskTree_LogicalNode_GetHashCode.htm">LogicalNode<span id="LSTB5D61494_4" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>GetHashCode<span id="LSTB5D61494_5" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_GetlastEventSourceIfIsTreeEventTriggered.htm">GetlastEventSourceIfIsTreeEventTriggered</a></td><td>
            Updates the values for TreeEvent-triggered nodes
            of the node before continuing to work with them.
            Is important in situations in which either the knot is the
            triggering TreeEvent has missed (at program start)
            or another TreeEvent was faster and led to a
            reaction, which leads to the current values of the node
            is required (JobSnapshotTrigger).
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_GetResults.htm">GetResults</a></td><td>
            Returns the ConcurrentDictionary ResultList as a simple Dictionary Results.
            Use the internal routine GetResultsFromResultList().
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_GetTopRootJobList.htm">GetTopRootJobList</a></td><td>
            Returns the topmost Root-JobList valid for the node.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_InitFromNode.htm">InitFromNode</a></td><td>
            Sets certain properties to the values of the transferred LogicalNode "source". 
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_InitNode.htm">InitNode</a></td><td>
            Resets the node to the start settings.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_Invalidate.htm">Invalidate</a></td><td>
            Deletes internal caches so that everything is re-evaluated.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_MarkThreadAsInvalidIfActive.htm">MarkThreadAsInvalidIfActive</a></td><td>
            Adds thread to the list of invalid threads,
            if the thread is still active.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_OnLastNotNullLogicalChanged.htm">OnLastNotNullLogicalChanged</a></td><td>
            Triggers the NodeLastNotNullLogicalChanged event.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_OnNodeBreaked.htm">OnNodeBreaked</a></td><td>
            Triggers the NodeBreaked event.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_OnNodeProgressChanged.htm">OnNodeProgressChanged</a></td><td>
            Triggers the NodeProgressChanged event.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_SingleNode_OnNodeProgressFinished.htm">OnNodeProgressFinished</a></td><td>
            Triggers the NodeProgressFinished event.
            <br />(Overwrites <a href="M_LogicalTaskTree_LogicalNode_OnNodeProgressFinished.htm">LogicalNode<span id="LSTB5D61494_6" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>OnNodeProgressFinished(String, Int64, Int64)</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_OnNodeProgressStarted.htm">OnNodeProgressStarted</a></td><td>
            Triggers the NodeStarted event.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_OnNodeWorkersStateChanged.htm">OnNodeWorkersStateChanged</a></td><td>
            Triggers the NodeWorkersStateChanged event.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_ProcessTreeEvent.htm">ProcessTreeEvent</a></td><td>
            Triggers further processing for the current TreeEvent (trigger, logger).
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_RaiseNodeLastNotNullLogicalChangedWithTreeEvent.htm">RaiseNodeLastNotNullLogicalChangedWithTreeEvent</a></td><td>
            Triggers the TreeEvent "AnyLastNotNullLogicalHasChanged" and calls "OnNodeLastNotNullLogicalChanged".
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_SingleNode_RaiseNodeLastResultChangedWithTreeEvent.htm">RaiseNodeLastResultChangedWithTreeEvent</a></td><td>
            Triggers the TreeEvent "AnyResultHasChanged" and calls "OnNodeResultChanged".
            </td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_RaiseNodeLogicalChanged.htm">RaiseNodeLogicalChanged</a></td><td>
            Encapsulates the call of the non-inheritable NodeLogicalChanged event for
            for the derived classes NodeList and JobList.
            This routine ultimately forwards the event to the UI via NodeLogicalChanged.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_Refresh.htm">Refresh</a></td><td>
            Ensures immediate re-evaluation of all cashed statuses.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_RegisterTriggeredNodes.htm">RegisterTriggeredNodes</a></td><td>
            Registers all triggered nodes of a subtree with their triggers.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_Reload.htm">Reload</a></td><td>
            Is called up when the subtree is to be reloaded.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_ResetAllTreeEventTriggeringNodes.htm">ResetAllTreeEventTriggeringNodes</a></td><td>
            Resets all nodes in the subtree on which others depend via TreeEvent.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_ResetAllTreeNodes.htm">ResetAllTreeNodes</a></td><td>
            Resets all nodes in the entire tree.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_ResetPartTreeNodes.htm">ResetPartTreeNodes</a></td><td>
            Resets all nodes in the subtree from branch.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_Run.htm">Run</a></td><td>
            Checks whether a node can be started and then starts the node, its trigger,
            or both (via StartNodeOrTrigger).
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_SingleNode_SetReturnObject.htm">SetReturnObject</a></td><td>
            Sets the ReturnObject to an object (for snapshots).
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_SetTreeCollapsed.htm">SetTreeCollapsed</a></td><td>
            Sets the StartCollapsed property for an entire (sub)tree.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_SetWorkersState.htm">SetWorkersState</a></td><td>
            Sets a common (combined) NodeWorkerState 'WorkersState'
            for all NodeWorkers.
            Returns NodeWorkersState.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_ThreadUpdateLastLogical.htm">ThreadUpdateLastLogical</a></td><td>
            Sets threadsafe LastLogical.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_ThreadUpdateLastLogicalState.htm">ThreadUpdateLastLogicalState</a></td><td>
            Sets threadsafe LastLogicalState.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_ThreadUpdateLastState.htm">ThreadUpdateLastState</a></td><td>
            Sets threadsafe LastState.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_SingleNode_ToString.htm">ToString</a></td><td>
            Overridden ToString() method.
            <br />(Overwrites <a href="M_LogicalTaskTree_LogicalNode_ToString.htm">LogicalNode<span id="LSTB5D61494_7" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>ToString<span id="LSTB5D61494_8" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_NetEti_Globals_GenericTree_1_Traverse.htm">Traverse(Action<span id="LSTB5D61494_9" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, T<span id="LSTB5D61494_10" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Goes recursively through the tree and calls the action for each node.
            <br />(Inherited from <a href="T_NetEti_Globals_GenericTree_1.htm">GenericTree<span id="LSTB5D61494_11" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTB5D61494_12" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_NetEti_Globals_GenericTree_1_Traverse_1.htm">Traverse(Func<span id="LSTB5D61494_13" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, T, Object, Object<span id="LSTB5D61494_14" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Goes recursively through the tree and calls the action for each node.
            <br />(Inherited from <a href="T_NetEti_Globals_GenericTree_1.htm">GenericTree<span id="LSTB5D61494_15" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTB5D61494_16" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_NetEti_Globals_GenericTree_1_Traverse_2.htm">Traverse(Int32, Action<span id="LSTB5D61494_17" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, T<span id="LSTB5D61494_18" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Recursive auxiliary routine for the public routine 'Traverse'.
            <br />(Inherited from <a href="T_NetEti_Globals_GenericTree_1.htm">GenericTree<span id="LSTB5D61494_19" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTB5D61494_20" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_NetEti_Globals_GenericTree_1_Traverse_3.htm">Traverse(Int32, Func<span id="LSTB5D61494_21" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, T, Object, Object<span id="LSTB5D61494_22" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Object)</a></td><td>
            Recursive auxiliary routine for the public routine 'Traverse'.
            <br />(Inherited from <a href="T_NetEti_Globals_GenericTree_1.htm">GenericTree<span id="LSTB5D61494_23" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTB5D61494_24" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_UnMarkThreadAsInvalid.htm">UnMarkThreadAsInvalid</a></td><td>
            Removes thread from the list of invalid threads.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_UnregisterTriggeredNode.htm">UnregisterTriggeredNode</a></td><td>
            Sets the subtree to non-startable.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_UserBreak.htm">UserBreak</a></td><td>
            Is called up if the subtree has been deliberately stopped by the user.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_UserRun.htm">UserRun</a></td><td>
            Starts the processing of this node after a start
            by the user. Gives the information that the start
            by the user in the TreeEvent to Run.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr></table><a href="#PageHeader">Back to the top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('seeAlso')" onkeypress="SectionExpandCollapse_CheckKey('seeAlso', event)" tabindex="0"><img id="seeAlsoToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See also</span></div><div id="seeAlsoSection" class="collapsibleSection"><h4>Reference</h4><div><a href="T_LogicalTaskTree_SingleNode.htm">SingleNode class</a></div><div><a href="N_LogicalTaskTree.htm">LogicalTaskTree namespace</a></div></div></div></div><div id="PageFooter" class="pageFooter">Naturally, many findings and developments are based on information freely available on the Internet. Any missing references to original authors are unintentional and will be updated as soon as they are reported.<p>Copyright Â© 2012-2025 Erik Nagel</p><div class="feedbackLink">Send comments about this feature to
        <a id="HT_MailLink" href="mailto:Vishnu%40reallyhuman.net?Subject=Vishnu%20-%20der%20logische%20Prozess-Monitor">Vishnu@reallyhuman.net</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback will be used to improve the documentation and the product. Your email address will not be used for any other purpose and will be deleted after the reported issue has been resolved. While working on the problem, you may be contacted by email for further details or clarification of your feedback. After the problem has been isolated, you may receive an email to resolve the issue.");
        </script></div></body></html>