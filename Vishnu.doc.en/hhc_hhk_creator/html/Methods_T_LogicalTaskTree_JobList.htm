<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><meta name="Microsoft.Help.SelfBranded" content="true" /><meta name="Language" content="en-US" /><meta name="Microsoft.Help.Locale" content="en-US" /><meta name="Microsoft.Help.TopicLocale" content="en-US" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"></script><title>JobList methods</title><meta name="Title" content="JobList methods" /><meta name="Microsoft.Help.Id" content="Methods.T:LogicalTaskTree.JobList" /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="System.Keywords" content="JobList class, methods" /><meta name="container" content="LogicalTaskTree" /><meta name="file" content="Methods_T_LogicalTaskTree_JobList" /><meta name="guid" content="Methods_T_LogicalTaskTree_JobList" /><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-3.5.1.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="SetDefaultLanguage('cs');"><input type="hidden" id="userDataCache" class="userDataStyle" /><div id="PageHeader" class="pageHeader">Vishnu - logical monitoring job controller</div><div class="pageBody"><div id="TopicContent" class="topicContent"><table class="titleTable"><tr><td class="logoColumn"><img src="../icons/Vishnu_64.png" /></td><td class="titleColumn"><h1>Job<wbr />List methods</h1></td></tr></table><p>The <a href="T_LogicalTaskTree_JobList.htm">JobList</a> Type exposes the following members.</p><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDADA')" onkeypress="SectionExpandCollapse_CheckKey('IDADA', event)" tabindex="0"><img id="IDADAToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Methods</span></div><div id="IDADASection" class="collapsibleSection"><table id="MethodList" class="members"><tr><th class="iconColumn">Â </th><th>Name</th><th>Description of the</th></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_JobList_Break.htm">Break</a></td><td>
            Is called up if the subtree has been deliberately stopped by the user.
            <br />(Overwrites <a href="M_LogicalTaskTree_NodeList_Break.htm">NodeList<span id="LST7F702383_0" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>Break(Boolean)</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_JobList_BreakTreeExternals.htm">BreakTreeExternals</a></td><td>
            Stops all TreeExternals for this JobList and all sub-JobLists.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_CanControlledTreeStart.htm">CanControlledTreeStart</a></td><td>
            Specifies whether a (sub)tree can be started in a JobController, i.e. that
            the node and all its parents can be started (recursively).
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_NetEti_Globals_GenericTree_1_Climb2Top.htm">Climb2Top</a></td><td>
            Shimmies up through the tree (up to the root)
            and calls up the action for each node.
            <br />(Inherited from <a href="T_NetEti_Globals_GenericTree_1.htm">GenericTree<span id="LST7F702383_1" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST7F702383_2" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_JobList_DoRun.htm">DoRun</a></td><td>
            Overwritten RUN logic.
            For JobList this means: Starting any TreeExternals
            and forwarding the call to NodeList (there to the children).
            This routine is executed asynchronously.
            <br />(Overwrites <a href="M_LogicalTaskTree_NodeList_DoRun.htm">NodeList<span id="LST7F702383_3" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>DoRun(TreeEvent)</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_JobList_Equals.htm">Equals</a></td><td>
            Compares the contents of this JobList according to logical aspects
            with the content of a transferred JobList.
            <br />(Overwrites <a href="M_LogicalTaskTree_LogicalNode_Equals.htm">LogicalNode<span id="LST7F702383_4" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>Equals(Object)</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_JobList_FindEventTriggers.htm">FindEventTriggers</a></td><td>
            Searches for relevant triggers for an event.
            <br />(Overwrites <a href="M_LogicalTaskTree_LogicalNode_FindEventTriggers.htm">LogicalNode<span id="LST7F702383_5" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>FindEventTriggers(String, String, String)</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_JobList_FindNodeById.htm">FindNodeById</a></td><td>
            Searches in the current JobList and all parent JobLists
            after the node with the transferred 'nodeId'.
            The first hit wins.
            <br />(Overwrites <a href="M_LogicalTaskTree_LogicalNode_FindNodeById.htm">LogicalNode<span id="LST7F702383_6" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>FindNodeById(String)</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_NodeParent_FreeChildAt.htm">FreeChildAt</a></td><td>
            Releases the event links with the child node at the index index and
            then calls Dispose for the child node if necessary.
            <br />(Inherited from <a href="T_LogicalTaskTree_NodeParent.htm">NodeParent</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_JobList_GetAllTreeInfos.htm">GetAllTreeInfos</a></td><td>
            Provides a summary of the current tree
            with the current states of its nodes as a string list.
            Can be used for debugging purposes.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_GetEnvironment.htm">GetEnvironment</a></td><td>
            Returns the ConcurrentDictionary Environment as simple Dictionary Results.
            Use the internal routine GetResultsFromResultList().
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_JobList_GetHashCode.htm">GetHashCode</a></td><td>
            Generates a hash code for this JobList.
            <br />(Overwrites <a href="M_LogicalTaskTree_LogicalNode_GetHashCode.htm">LogicalNode<span id="LST7F702383_7" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>GetHashCode<span id="LST7F702383_8" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_GetlastEventSourceIfIsTreeEventTriggered.htm">GetlastEventSourceIfIsTreeEventTriggered</a></td><td>
            Updates the values for TreeEvent-triggered nodes
            of the node before continuing to work with them.
            Is important in situations in which either the knot is the
            triggering TreeEvent has missed (at program start)
            or another TreeEvent was faster and led to a
            reaction, which leads to the current values of the node
            is required (JobSnapshotTrigger).
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_GetResults.htm">GetResults</a></td><td>
            Returns the ConcurrentDictionary ResultList as a simple Dictionary Results.
            Use the internal routine GetResultsFromResultList().
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_JobList_GetTopRootJobList.htm">GetTopRootJobList</a></td><td>
            Returns the topmost Root-JobList valid for the node.
            <br />(Overwrites <a href="M_LogicalTaskTree_LogicalNode_GetTopRootJobList.htm">LogicalNode<span id="LST7F702383_9" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>GetTopRootJobList<span id="LST7F702383_10" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_NodeList_InitFromNode.htm">InitFromNode</a></td><td>
            Sets certain properties to the values of the transferred LogicalNode "source". 
            <br />(Inherited from <a href="T_LogicalTaskTree_NodeList.htm">NodeList</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_InitNode.htm">InitNode</a></td><td>
            Resets the node to the start settings.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_Invalidate.htm">Invalidate</a></td><td>
            Deletes internal caches so that everything is re-evaluated.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_MarkThreadAsInvalidIfActive.htm">MarkThreadAsInvalidIfActive</a></td><td>
            Adds thread to the list of invalid threads,
            if the thread is still active.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_OnLastNotNullLogicalChanged.htm">OnLastNotNullLogicalChanged</a></td><td>
            Triggers the NodeLastNotNullLogicalChanged event.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_OnNodeBreaked.htm">OnNodeBreaked</a></td><td>
            Triggers the NodeBreaked event.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_OnNodeProgressChanged.htm">OnNodeProgressChanged</a></td><td>
            Triggers the NodeProgressChanged event.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_OnNodeProgressFinished.htm">OnNodeProgressFinished</a></td><td>
            Triggers the NodeProgressFinished event.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_OnNodeProgressStarted.htm">OnNodeProgressStarted</a></td><td>
            Triggers the NodeStarted event.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_OnNodeWorkersStateChanged.htm">OnNodeWorkersStateChanged</a></td><td>
            Triggers the NodeWorkersStateChanged event.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_ProcessTreeEvent.htm">ProcessTreeEvent</a></td><td>
            Triggers further processing for the current TreeEvent (trigger, logger).
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_JobList_PublishAllTreeInfos.htm">PublishAllTreeInfos</a></td><td>
            Outputs the current tree with the current states of its nodes via InfoController.
            Can be used for debugging purposes.
            </td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_RaiseNodeLastNotNullLogicalChangedWithTreeEvent.htm">RaiseNodeLastNotNullLogicalChangedWithTreeEvent</a></td><td>
            Triggers the TreeEvent "AnyLastNotNullLogicalHasChanged" and calls "OnNodeLastNotNullLogicalChanged".
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_RaiseNodeLogicalChanged.htm">RaiseNodeLogicalChanged</a></td><td>
            Encapsulates the call of the non-inheritable NodeLogicalChanged event for
            for the derived classes NodeList and JobList.
            This routine ultimately forwards the event to the UI via NodeLogicalChanged.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_NodeList_Refresh.htm">Refresh</a></td><td>
            Ensures immediate re-evaluation of all cashed statuses.
            <br />(Inherited from <a href="T_LogicalTaskTree_NodeList.htm">NodeList</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_JobList_RegisterTriggeredNodes.htm">RegisterTriggeredNodes</a></td><td>
            Registers all triggered nodes of a subtree with their triggers.
            <br />(Overwrites <a href="M_LogicalTaskTree_LogicalNode_RegisterTriggeredNodes.htm">LogicalNode<span id="LST7F702383_11" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>RegisterTriggeredNodes<span id="LST7F702383_12" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_NodeParent_ReleaseChildAt.htm">ReleaseChildAt</a></td><td>
            Releases the event links with the child node at the index index.
            <br />(Inherited from <a href="T_LogicalTaskTree_NodeParent.htm">NodeParent</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_Reload.htm">Reload</a></td><td>
            Is called up when the subtree is to be reloaded.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_ResetAllTreeEventTriggeringNodes.htm">ResetAllTreeEventTriggeringNodes</a></td><td>
            Resets all nodes in the subtree on which others depend via TreeEvent.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_ResetAllTreeNodes.htm">ResetAllTreeNodes</a></td><td>
            Resets all nodes in the entire tree.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_JobList_ResetPartTreeNodes.htm">ResetPartTreeNodes</a></td><td>
            Resets all nodes in the subtree.
            Also resets all TreeExternals.
            <br />(Overwrites <a href="M_LogicalTaskTree_LogicalNode_ResetPartTreeNodes.htm">LogicalNode<span id="LST7F702383_13" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>ResetPartTreeNodes(LogicalNode)</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_JobList_Run.htm">Run</a></td><td>
            Overwrites the run logic from LogicalNode, if necessary.
            an existing SnapshotTrigger and, if necessary
            to start TreeExternals.
            <br />(Overwrites <a href="M_LogicalTaskTree_LogicalNode_Run.htm">LogicalNode<span id="LST7F702383_14" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>Run(TreeEvent)</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_JobList_RunTreeExternals.htm">RunTreeExternals</a></td><td>
            Starts all TreeExternals for this JobList and all sub-JobLists.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_NodeParent_SetChildAt.htm">SetChildAt</a></td><td>
            Saves the child node at the transferred index and attaches itself to the events of the child node.
            <br />(Inherited from <a href="T_LogicalTaskTree_NodeParent.htm">NodeParent</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_SetTreeCollapsed.htm">SetTreeCollapsed</a></td><td>
            Sets the StartCollapsed property for an entire (sub)tree.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_SetWorkersState.htm">SetWorkersState</a></td><td>
            Sets a common (combined) NodeWorkerState 'WorkersState'
            for all NodeWorkers.
            Returns NodeWorkersState.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_JobList_Show.htm">Show</a></td><td>
            Outputs the (sub)tree to a StringList.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_JobList_ShowFlatSyntaxTree.htm">ShowFlatSyntaxTree</a></td><td>
            Returns the processed Boolean expression based on the Boolean tree
            again as a single-line logical expression.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_JobList_ShowSyntaxTree.htm">ShowSyntaxTree</a></td><td>
            Outputs the associated Boolean tree in a StringList.
            </td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_NodeParent_SubNodeExceptionCleared.htm">SubNodeExceptionCleared</a></td><td>
            Is triggered if an exception has been deleted in a child.
            Cascades the resolution of a previous exception up to the root node.
            Parent nodes with multiple children (NodeList) in turn generate an ExceptionCleared event
            only if no child node is still holding an exception.
            <br />(Inherited from <a href="T_LogicalTaskTree_NodeParent.htm">NodeParent</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_NodeParent_SubNodeExceptionRaised.htm">SubNodeExceptionRaised</a></td><td>
            Is triggered if an exception has occurred in a child.
            Cascades the exception up to the root node without cancelling processing.
            <br />(Inherited from <a href="T_LogicalTaskTree_NodeParent.htm">NodeParent</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_NodeList_SubNodeLastNotNullLogicalChanged.htm">SubNodeLastNotNullLogicalChanged</a></td><td>
            Is triggered if the logical state "LastNotNullLogical" of a child has changed.
            This event is decisive for a possible change in the logical state of the parent node.
            Can be triggered by SingleNodes and ParentNodes through to the root node.
            The original trigger is always a SingleNode.
            May cascade upwards in the tree to the root node.
            <br />(Inherited from <a href="T_LogicalTaskTree_NodeList.htm">NodeList</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_NodeParent_SubNodeLogicalChanged.htm">SubNodeLogicalChanged</a></td><td>
            Is triggered if the current logical result of the child node has changed.
            Is triggered by a SingleNode.
            Continues in the tree only up to the direct parent node.
            <br />(Inherited from <a href="T_LogicalTaskTree_NodeParent.htm">NodeParent</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_NodeParent_SubNodeProgressChanged.htm">SubNodeProgressChanged</a></td><td>
            Is activated when the processing progress changes.
            of the referenced original node has changed.
            Continues in the tree only up to the direct parent node.
            <br />(Inherited from <a href="T_LogicalTaskTree_NodeParent.htm">NodeParent</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_NodeParent_SubNodeProgressFinished.htm">SubNodeProgressFinished</a></td><td>
            Is triggered when processing of the child node is complete.
            May cascade in the tree up to the root node.
            Parent nodes with multiple children (NodeList) in turn generate a NodeProgressFinished event
            only when the processing of all child nodes has been completed.
            <br />(Inherited from <a href="T_LogicalTaskTree_NodeParent.htm">NodeParent</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_NodeParent_SubNodeProgressStarted.htm">SubNodeProgressStarted</a></td><td>
            Is triggered when processing of the child node has been started.
            May cascade upwards in the tree to the root node.
            Parent nodes with multiple children (NodeList) in turn generate a NodeProgressStarted event
            only if this is the first (and so far only) child whose processing has been started.
            <br />(Inherited from <a href="T_LogicalTaskTree_NodeParent.htm">NodeParent</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_NodeList_SubNodeResultChanged.htm">SubNodeResultChanged</a></td><td>
            Is called up when the result of a node has changed.
            This is used to start the calculation of the logical state of this NodeList
            restart; important for &lt;=&gt; comparisons.
            <br />(Inherited from <a href="T_LogicalTaskTree_NodeList.htm">NodeList</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_NodeParent_SubNodeStateChanged.htm">SubNodeStateChanged</a></td><td>
            Is activated when the processing status of a child has changed.
            Is triggered by a SingleNode.
            Continues in the tree only up to the direct parent node.
            <br />(Inherited from <a href="T_LogicalTaskTree_NodeParent.htm">NodeParent</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_NodeList_ThreadUpdateLastCountPositiveResults.htm">ThreadUpdateLastCountPositiveResults</a></td><td>
            Sets threadsafe LastCountPositiveResults.
            <br />(Inherited from <a href="T_LogicalTaskTree_NodeList.htm">NodeList</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_NodeList_ThreadUpdateLastCountResults.htm">ThreadUpdateLastCountResults</a></td><td>
            Sets threadsafe LastCountResults.
            <br />(Inherited from <a href="T_LogicalTaskTree_NodeList.htm">NodeList</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_NodeList_ThreadUpdateLastCountTerminatedElements.htm">ThreadUpdateLastCountTerminatedElements</a></td><td>
            Sets threadsafe LastCountTerminatedElements.
            <br />(Inherited from <a href="T_LogicalTaskTree_NodeList.htm">NodeList</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_ThreadUpdateLastLogical.htm">ThreadUpdateLastLogical</a></td><td>
            Sets threadsafe LastLogical.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_NodeParent_ThreadUpdateLastLogicalState.htm">ThreadUpdateLastLogicalState</a></td><td>
            Sets threadsafe LastLogicalState.
            <br />(Inherited from <a href="T_LogicalTaskTree_NodeParent.htm">NodeParent</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_NodeList_ThreadUpdateLastReturnedLogical.htm">ThreadUpdateLastReturnedLogical</a></td><td>
            Sets threadsafe LastReturnedLogical.
            <br />(Inherited from <a href="T_LogicalTaskTree_NodeList.htm">NodeList</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_NodeList_ThreadUpdateLastSingleNodes.htm">ThreadUpdateLastSingleNodes</a></td><td>
            Sets threadsafe LastSingleNodes.
            <br />(Inherited from <a href="T_LogicalTaskTree_NodeList.htm">NodeList</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_NodeParent_ThreadUpdateLastSingleNodesFinished.htm">ThreadUpdateLastSingleNodesFinished</a></td><td>
            Sets threadsafe LastSingleNodesFinished.
            <br />(Inherited from <a href="T_LogicalTaskTree_NodeParent.htm">NodeParent</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_ThreadUpdateLastState.htm">ThreadUpdateLastState</a></td><td>
            Sets threadsafe LastState.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_NodeList_ThreadUpdateListLogicalState.htm">ThreadUpdateListLogicalState</a></td><td>
            Sets threadsafe ListLogicalState.
            <br />(Inherited from <a href="T_LogicalTaskTree_NodeList.htm">NodeList</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_JobList_ToString.htm">ToString</a></td><td>
            Overridden ToString() method.
            <br />(Overwrites <a href="M_LogicalTaskTree_LogicalNode_ToString.htm">LogicalNode<span id="LST7F702383_15" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>ToString<span id="LST7F702383_16" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_NetEti_Globals_GenericTree_1_Traverse.htm">Traverse(Action<span id="LST7F702383_17" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, T<span id="LST7F702383_18" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Goes recursively through the tree and calls the action for each node.
            <br />(Inherited from <a href="T_NetEti_Globals_GenericTree_1.htm">GenericTree<span id="LST7F702383_19" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST7F702383_20" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_NetEti_Globals_GenericTree_1_Traverse_1.htm">Traverse(Func<span id="LST7F702383_21" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, T, Object, Object<span id="LST7F702383_22" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Goes recursively through the tree and calls the action for each node.
            <br />(Inherited from <a href="T_NetEti_Globals_GenericTree_1.htm">GenericTree<span id="LST7F702383_23" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST7F702383_24" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_NetEti_Globals_GenericTree_1_Traverse_2.htm">Traverse(Int32, Action<span id="LST7F702383_25" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, T<span id="LST7F702383_26" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Recursive auxiliary routine for the public routine 'Traverse'.
            <br />(Inherited from <a href="T_NetEti_Globals_GenericTree_1.htm">GenericTree<span id="LST7F702383_27" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST7F702383_28" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_NetEti_Globals_GenericTree_1_Traverse_3.htm">Traverse(Int32, Func<span id="LST7F702383_29" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, T, Object, Object<span id="LST7F702383_30" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Object)</a></td><td>
            Recursive auxiliary routine for the public routine 'Traverse'.
            <br />(Inherited from <a href="T_NetEti_Globals_GenericTree_1.htm">GenericTree<span id="LST7F702383_31" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST7F702383_32" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_UnMarkThreadAsInvalid.htm">UnMarkThreadAsInvalid</a></td><td>
            Removes thread from the list of invalid threads.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_UnregisterTriggeredNode.htm">UnregisterTriggeredNode</a></td><td>
            Sets the subtree to non-startable.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_UserBreak.htm">UserBreak</a></td><td>
            Is called up if the subtree has been deliberately stopped by the user.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_UserRun.htm">UserRun</a></td><td>
            Starts the processing of this node after a start
            by the user. Gives the information that the start
            by the user in the TreeEvent to Run.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr></table><a href="#PageHeader">Back to the top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('seeAlso')" onkeypress="SectionExpandCollapse_CheckKey('seeAlso', event)" tabindex="0"><img id="seeAlsoToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See also</span></div><div id="seeAlsoSection" class="collapsibleSection"><h4>Reference</h4><div><a href="T_LogicalTaskTree_JobList.htm">JobList class</a></div><div><a href="N_LogicalTaskTree.htm">LogicalTaskTree namespace</a></div></div></div></div><div id="PageFooter" class="pageFooter">Naturally, many findings and developments are based on information freely available on the Internet. Any missing references to original authors are unintentional and will be updated as soon as they are reported.<p>Copyright Â© 2012-2025 Erik Nagel</p><div class="feedbackLink">Send comments about this feature to
        <a id="HT_MailLink" href="mailto:Vishnu%40reallyhuman.net?Subject=Vishnu%20-%20der%20logische%20Prozess-Monitor">Vishnu@reallyhuman.net</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback will be used to improve the documentation and the product. Your email address will not be used for any other purpose and will be deleted after the reported issue has been resolved. While working on the problem, you may be contacted by email for further details or clarification of your feedback. After the problem has been isolated, you may receive an email to resolve the issue.");
        </script></div></body></html>