<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><meta name="Microsoft.Help.SelfBranded" content="true" /><meta name="Language" content="en-US" /><meta name="Microsoft.Help.Locale" content="en-US" /><meta name="Microsoft.Help.TopicLocale" content="en-US" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"></script><title>LogicalNode methods</title><meta name="Title" content="LogicalNode Methoden" /><meta name="Microsoft.Help.Id" content="Methods.T:LogicalTaskTree.LogicalNode" /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="System.Keywords" content="LogicalNode Klasse, Methoden" /><meta name="container" content="LogicalTaskTree" /><meta name="file" content="Methods_T_LogicalTaskTree_LogicalNode" /><meta name="guid" content="Methods_T_LogicalTaskTree_LogicalNode" /><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-3.5.1.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="SetDefaultLanguage('cs');"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/ad9ee8b6-c68c-47ec-9584-d85046eb3137.htm" title="Vishnu - the logical process monitor" tocid="roottoc">Vishnu - the logical process monitor</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/R_Project_Vishnu_doc_de.htm" title="Vishnu - technische Dokumentation" tocid="R_Project_Vishnu_doc_de">Vishnu - technical Documentation</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/N_LogicalTaskTree.htm" title="LogicalTaskTree" tocid="N_LogicalTaskTree">LogicalTaskTree</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/T_LogicalTaskTree_LogicalNode.htm" title="LogicalNode Klasse" tocid="T_LogicalTaskTree_LogicalNode">LogicalNode class</a></div><div class="toclevel1 current" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Methods_T_LogicalTaskTree_LogicalNode.htm" title="LogicalNode Methoden" tocid="Methods_T_LogicalTaskTree_LogicalNode">LogicalNode methods</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_AllowSnapshots.htm" title="AllowSnapshots Methode" tocid="M_LogicalTaskTree_LogicalNode_AllowSnapshots">AllowSnapshots method</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_Break.htm" title="Break Methode" tocid="M_LogicalTaskTree_LogicalNode_Break">Break method</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_CanControlledTreeStart.htm" title="CanControlledTreeStart Methode" tocid="M_LogicalTaskTree_LogicalNode_CanControlledTreeStart">CanControlledTreeStart method</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_DoRun.htm" title="DoRun Methode" tocid="M_LogicalTaskTree_LogicalNode_DoRun">DoRun method</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_Equals.htm" title="Equals Methode" tocid="M_LogicalTaskTree_LogicalNode_Equals">Equals method</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_FindEventTriggers.htm" title="FindEventTriggers Methode" tocid="M_LogicalTaskTree_LogicalNode_FindEventTriggers">FindEventTriggers method</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_FindNodeById.htm" title="FindNodeById Methode" tocid="M_LogicalTaskTree_LogicalNode_FindNodeById">FindNodeById method</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_GetEnvironment.htm" title="GetEnvironment Methode" tocid="M_LogicalTaskTree_LogicalNode_GetEnvironment">GetEnvironment method</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_GetHashCode.htm" title="GetHashCode Methode" tocid="M_LogicalTaskTree_LogicalNode_GetHashCode">GetHashCode method</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_GetlastEventSourceIfIsTreeEventTriggered.htm" title="GetlastEventSourceIfIsTreeEventTriggered Methode" tocid="M_LogicalTaskTree_LogicalNode_GetlastEventSourceIfIsTreeEventTriggered">GetlastEventSourceIfIsTreeEventTriggered method</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_GetResults.htm" title="GetResults Methode" tocid="M_LogicalTaskTree_LogicalNode_GetResults">GetResults method</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_GetTopRootJobList.htm" title="GetTopRootJobList Methode" tocid="M_LogicalTaskTree_LogicalNode_GetTopRootJobList">GetTopRootJobList method</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_InitFromNode.htm" title="InitFromNode Methode" tocid="M_LogicalTaskTree_LogicalNode_InitFromNode">InitFromNode method</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_InitNode.htm" title="InitNode Methode" tocid="M_LogicalTaskTree_LogicalNode_InitNode">InitNode method</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_Invalidate.htm" title="Invalidate Methode" tocid="M_LogicalTaskTree_LogicalNode_Invalidate">Invalidate method</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_LogWithDistinctTime.htm" title="LogWithDistinctTime Methode" tocid="M_LogicalTaskTree_LogicalNode_LogWithDistinctTime">LogWithDistinctTime method</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_MarkThreadAsInvalidIfActive.htm" title="MarkThreadAsInvalidIfActive Methode" tocid="M_LogicalTaskTree_LogicalNode_MarkThreadAsInvalidIfActive">MarkThreadAsInvalidIfActive method</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_OnLastNotNullLogicalChanged.htm" title="OnLastNotNullLogicalChanged Methode" tocid="M_LogicalTaskTree_LogicalNode_OnLastNotNullLogicalChanged">OnLastNotNullLogicalChanged method</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_OnNodeBreaked.htm" title="OnNodeBreaked Methode" tocid="M_LogicalTaskTree_LogicalNode_OnNodeBreaked">OnNodeBreaked method</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_OnNodeProgressChanged.htm" title="OnNodeProgressChanged Methode" tocid="M_LogicalTaskTree_LogicalNode_OnNodeProgressChanged">OnNodeProgressChanged method</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_OnNodeProgressFinished.htm" title="OnNodeProgressFinished Methode" tocid="M_LogicalTaskTree_LogicalNode_OnNodeProgressFinished">OnNodeProgressFinished method</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_OnNodeProgressStarted.htm" title="OnNodeProgressStarted Methode" tocid="M_LogicalTaskTree_LogicalNode_OnNodeProgressStarted">OnNodeProgressStarted method</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_OnNodeWorkersStateChanged.htm" title="OnNodeWorkersStateChanged Methode" tocid="M_LogicalTaskTree_LogicalNode_OnNodeWorkersStateChanged">OnNodeWorkersStateChanged method</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_PauseTree.htm" title="PauseTree Methode" tocid="M_LogicalTaskTree_LogicalNode_PauseTree">PauseTree method</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_ProcessTreeEvent.htm" title="ProcessTreeEvent Methode" tocid="M_LogicalTaskTree_LogicalNode_ProcessTreeEvent">ProcessTreeEvent method</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_ProhibitSnapshots.htm" title="ProhibitSnapshots Methode" tocid="M_LogicalTaskTree_LogicalNode_ProhibitSnapshots">ProhibitSnapshots method</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_RaiseNodeLastNotNullLogicalChangedWithTreeEvent.htm" title="RaiseNodeLastNotNullLogicalChangedWithTreeEvent Methode" tocid="M_LogicalTaskTree_LogicalNode_RaiseNodeLastNotNullLogicalChangedWithTreeEvent">RaiseNodeLastNotNullLogicalChangedWithTreeEvent method</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_RaiseNodeLogicalChanged.htm" title="RaiseNodeLogicalChanged Methode" tocid="M_LogicalTaskTree_LogicalNode_RaiseNodeLogicalChanged">RaiseNodeLogicalChanged method</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_Refresh.htm" title="Refresh Methode" tocid="M_LogicalTaskTree_LogicalNode_Refresh">Refresh method</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_RegisterTriggeredNodes.htm" title="RegisterTriggeredNodes Methode" tocid="M_LogicalTaskTree_LogicalNode_RegisterTriggeredNodes">RegisterTriggeredNodes method</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_Reload.htm" title="Reload Methode" tocid="M_LogicalTaskTree_LogicalNode_Reload">Reload method</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_ResetAllTreeEventTriggeringNodes.htm" title="ResetAllTreeEventTriggeringNodes Methode" tocid="M_LogicalTaskTree_LogicalNode_ResetAllTreeEventTriggeringNodes">ResetAllTreeEventTriggeringNodes method</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_ResetAllTreeNodes.htm" title="ResetAllTreeNodes Methode" tocid="M_LogicalTaskTree_LogicalNode_ResetAllTreeNodes">ResetAllTreeNodes method</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_ResetPartTreeNodes.htm" title="ResetPartTreeNodes Methode" tocid="M_LogicalTaskTree_LogicalNode_ResetPartTreeNodes">ResetPartTreeNodes method</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_ResumeTree.htm" title="ResumeTree Methode" tocid="M_LogicalTaskTree_LogicalNode_ResumeTree">ResumeTree method</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_Run.htm" title="Run Methode" tocid="M_LogicalTaskTree_LogicalNode_Run">Run method</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_SetTreeCollapsed.htm" title="SetTreeCollapsed Methode" tocid="M_LogicalTaskTree_LogicalNode_SetTreeCollapsed">SetTreeCollapsed method</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_SetWorkersState.htm" title="SetWorkersState Methode" tocid="M_LogicalTaskTree_LogicalNode_SetWorkersState">SetWorkersState method</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_SleepIfNecessary.htm" title="SleepIfNecessary Methode" tocid="M_LogicalTaskTree_LogicalNode_SleepIfNecessary">SleepIfNecessary method</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_ThreadUpdateLastLogical.htm" title="ThreadUpdateLastLogical Methode" tocid="M_LogicalTaskTree_LogicalNode_ThreadUpdateLastLogical">ThreadUpdateLastLogical method</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_ThreadUpdateLastLogicalState.htm" title="ThreadUpdateLastLogicalState Methode" tocid="M_LogicalTaskTree_LogicalNode_ThreadUpdateLastLogicalState">ThreadUpdateLastLogicalState method</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_ThreadUpdateLastState.htm" title="ThreadUpdateLastState Methode" tocid="M_LogicalTaskTree_LogicalNode_ThreadUpdateLastState">ThreadUpdateLastState method</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_ToString.htm" title="ToString Methode" tocid="M_LogicalTaskTree_LogicalNode_ToString">ToString method</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_UnMarkThreadAsInvalid.htm" title="UnMarkThreadAsInvalid Methode" tocid="M_LogicalTaskTree_LogicalNode_UnMarkThreadAsInvalid">UnMarkThreadAsInvalid method</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_UnregisterTriggeredNode.htm" title="UnregisterTriggeredNode Methode" tocid="M_LogicalTaskTree_LogicalNode_UnregisterTriggeredNode">UnregisterTriggeredNode method</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_UserBreak.htm" title="UserBreak Methode" tocid="M_LogicalTaskTree_LogicalNode_UserBreak">UserBreak method</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_UserRun.htm" title="UserRun Methode" tocid="M_LogicalTaskTree_LogicalNode_UserRun">UserRun method</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div id="TopicContent" class="topicContent"><table class="titleTable"><tr><td class="logoColumn"><img src="../icons/Vishnu_64.png" /></td><td class="titleColumn"><h1>Logical<wbr />Node methods</h1></td></tr></table><p>The <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a> Type exposes the following members.</p><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDADA')" onkeypress="SectionExpandCollapse_CheckKey('IDADA', event)" tabindex="0"><img id="IDADAToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Methods</span></div><div id="IDADASection" class="collapsibleSection"><table id="MethodList" class="members"><tr><th class="iconColumn"> </th><th>Name</th><th>Description of the</th></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /><img src="../icons/Static.gif" alt="Static Member" title="Static Member" /></td><td><a href="M_LogicalTaskTree_LogicalNode_AllowSnapshots.htm">AllowSnapshots</a></td><td>
            Allows snapshots.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_Break.htm">Break</a></td><td>
            If necessary, log out of the trigger,
            Cancel the task via CancellationToken, set status.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_CanControlledTreeStart.htm">CanControlledTreeStart</a></td><td>
            Specifies whether a (sub)tree can be started in a JobController, i.e. that
            the node and all its parents can be started (recursively).
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_NetEti_Globals_GenericTree_1_Climb2Top.htm">Climb2Top</a></td><td>
            Shimmies up through the tree (up to the root)
            and calls up the action for each node.
            <br />(Inherited from <a href="T_NetEti_Globals_GenericTree_1.htm">GenericTree<span id="LST92AE5BA6_0" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST92AE5BA6_1" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_DoRun.htm">DoRun</a></td><td>
            The actual, node type-specific processing;
            must be overwritten.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_Equals.htm">Equals</a></td><td>
            Compares the content of this LogicalNode according to logical aspects
            with the content of a transferred LogicalNode.
            <br />(Overwrites <a href="https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)" target="_blank" rel="noopener noreferrer">Object<span id="LST92AE5BA6_2" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>Equals(Object)</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_FindEventTriggers.htm">FindEventTriggers</a></td><td>
            Searches for relevant triggers for an event.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_FindNodeById.htm">FindNodeById</a></td><td>
            A derivative of LogicalNode can use this to create its own thread
            cause it to be cancelled.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_GetEnvironment.htm">GetEnvironment</a></td><td>
            Returns the ConcurrentDictionary Environment as simple Dictionary Results.
            Use the internal routine GetResultsFromResultList().
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_GetHashCode.htm">GetHashCode</a></td><td>
            Generates a hash code for this LogicalNode.
            <br />(Overwrites <a href="https://learn.microsoft.com/dotnet/api/system.object.gethashcode" target="_blank" rel="noopener noreferrer">Object<span id="LST92AE5BA6_3" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>GetHashCode<span id="LST92AE5BA6_4" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_GetlastEventSourceIfIsTreeEventTriggered.htm">GetlastEventSourceIfIsTreeEventTriggered</a></td><td>
            Updates the values for TreeEvent-triggered nodes
            of the node before continuing to work with them.
            Is important in situations in which either the knot is the
            triggering TreeEvent has missed (at program start)
            or another TreeEvent was faster and led to a
            reaction, which leads to the current values of the node
            is required (JobSnapshotTrigger).
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_GetResults.htm">GetResults</a></td><td>
            Returns the ConcurrentDictionary ResultList as a simple Dictionary Results.
            Use the internal routine GetResultsFromResultList().
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_GetTopRootJobList.htm">GetTopRootJobList</a></td><td>
            Returns the topmost Root-JobList valid for the node.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_InitFromNode.htm">InitFromNode</a></td><td>
            Sets certain properties to the values of the transferred LogicalNode "source". 
            </td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_InitNode.htm">InitNode</a></td><td>
            Resets the node to the start settings.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_Invalidate.htm">Invalidate</a></td><td>
            Deletes internal caches so that everything is re-evaluated.
            </td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /><img src="../icons/Static.gif" alt="Static Member" title="Static Member" /></td><td><a href="M_LogicalTaskTree_LogicalNode_LogWithDistinctTime.htm">LogWithDistinctTime</a></td><td>
            Write a message with a short sleeptime before and after to ensure prompt
            processes can be visualised later in the log in chronological order.
            </td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_MarkThreadAsInvalidIfActive.htm">MarkThreadAsInvalidIfActive</a></td><td>
            Adds thread to the list of invalid threads,
            if the thread is still active.
            </td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_OnLastNotNullLogicalChanged.htm">OnLastNotNullLogicalChanged</a></td><td>
            Triggers the NodeLastNotNullLogicalChanged event.
            </td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_OnNodeBreaked.htm">OnNodeBreaked</a></td><td>
            Triggers the NodeBreaked event.
            </td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_OnNodeProgressChanged.htm">OnNodeProgressChanged</a></td><td>
            Triggers the NodeProgressChanged event.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_OnNodeProgressFinished.htm">OnNodeProgressFinished</a></td><td>
            Triggers the NodeProgressFinished event.
            </td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_OnNodeProgressStarted.htm">OnNodeProgressStarted</a></td><td>
            Triggers the NodeStarted event.
            </td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_OnNodeWorkersStateChanged.htm">OnNodeWorkersStateChanged</a></td><td>
            Triggers the NodeWorkersStateChanged event.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /><img src="../icons/Static.gif" alt="Static Member" title="Static Member" /></td><td><a href="M_LogicalTaskTree_LogicalNode_PauseTree.htm">PauseTree</a></td><td>
            Stops processing in the tree.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_ProcessTreeEvent.htm">ProcessTreeEvent</a></td><td>
            Triggers further processing for the current TreeEvent (trigger, logger).
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /><img src="../icons/Static.gif" alt="Static Member" title="Static Member" /></td><td><a href="M_LogicalTaskTree_LogicalNode_ProhibitSnapshots.htm">ProhibitSnapshots</a></td><td>
            Prevents snapshots.
            </td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_RaiseNodeLastNotNullLogicalChangedWithTreeEvent.htm">RaiseNodeLastNotNullLogicalChangedWithTreeEvent</a></td><td>
            Triggers the TreeEvent "AnyLastNotNullLogicalHasChanged" and calls "OnNodeLastNotNullLogicalChanged".
            </td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_RaiseNodeLogicalChanged.htm">RaiseNodeLogicalChanged</a></td><td>
            Encapsulates the call of the non-inheritable NodeLogicalChanged event for
            for the derived classes NodeList and JobList.
            This routine ultimately forwards the event to the UI via NodeLogicalChanged.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_Refresh.htm">Refresh</a></td><td>
            Ensures immediate re-evaluation of all cashed statuses.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_RegisterTriggeredNodes.htm">RegisterTriggeredNodes</a></td><td>
            Registers all triggered nodes of a subtree with their triggers.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_Reload.htm">Reload</a></td><td>
            Is called up when the subtree is to be reloaded.
            </td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_ResetAllTreeEventTriggeringNodes.htm">ResetAllTreeEventTriggeringNodes</a></td><td>
            Resets all nodes in the subtree on which others depend via TreeEvent.
            </td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_ResetAllTreeNodes.htm">ResetAllTreeNodes</a></td><td>
            Resets all nodes in the entire tree.
            </td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_ResetPartTreeNodes.htm">ResetPartTreeNodes</a></td><td>
            Resets all nodes in the subtree from branch.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /><img src="../icons/Static.gif" alt="Static Member" title="Static Member" /></td><td><a href="M_LogicalTaskTree_LogicalNode_ResumeTree.htm">ResumeTree</a></td><td>
            Allows a paused tree to continue running.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_Run.htm">Run</a></td><td>
            Checks whether a node can be started and then starts the node, its trigger,
            or both (via StartNodeOrTrigger).
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_SetTreeCollapsed.htm">SetTreeCollapsed</a></td><td>
            Sets the StartCollapsed property for an entire (sub)tree.
            </td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_SetWorkersState.htm">SetWorkersState</a></td><td>
            Sets a common (combined) NodeWorkerState 'WorkersState'
            for all NodeWorkers.
            Returns NodeWorkersState.
            </td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /><img src="../icons/Static.gif" alt="Static Member" title="Static Member" /></td><td><a href="M_LogicalTaskTree_LogicalNode_SleepIfNecessary.htm">SleepIfNecessary</a></td><td>
            Inserts System.Sleeps to relieve the system.
            Is more finely adjustable than fixed sleeps in nested inner loops.
            </td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_ThreadUpdateLastLogical.htm">ThreadUpdateLastLogical</a></td><td>
            Sets threadsafe LastLogical.
            </td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_ThreadUpdateLastLogicalState.htm">ThreadUpdateLastLogicalState</a></td><td>
            Sets threadsafe LastLogicalState.
            </td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_ThreadUpdateLastState.htm">ThreadUpdateLastState</a></td><td>
            Sets threadsafe LastState.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_ToString.htm">ToString</a></td><td>
            Overridden ToString() method.
            <br />(Overwrites <a href="https://learn.microsoft.com/dotnet/api/system.object.tostring" target="_blank" rel="noopener noreferrer">Object<span id="LST92AE5BA6_5" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>ToString<span id="LST92AE5BA6_6" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_NetEti_Globals_GenericTree_1_Traverse.htm">Traverse(Action<span id="LST92AE5BA6_7" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, T<span id="LST92AE5BA6_8" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Goes recursively through the tree and calls the action for each node.
            <br />(Inherited from <a href="T_NetEti_Globals_GenericTree_1.htm">GenericTree<span id="LST92AE5BA6_9" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST92AE5BA6_10" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_NetEti_Globals_GenericTree_1_Traverse_1.htm">Traverse(Func<span id="LST92AE5BA6_11" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, T, Object, Object<span id="LST92AE5BA6_12" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Goes recursively through the tree and calls the action for each node.
            <br />(Inherited from <a href="T_NetEti_Globals_GenericTree_1.htm">GenericTree<span id="LST92AE5BA6_13" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST92AE5BA6_14" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_NetEti_Globals_GenericTree_1_Traverse_2.htm">Traverse(Int32, Action<span id="LST92AE5BA6_15" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, T<span id="LST92AE5BA6_16" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Recursive auxiliary routine for the public routine 'Traverse'.
            <br />(Inherited from <a href="T_NetEti_Globals_GenericTree_1.htm">GenericTree<span id="LST92AE5BA6_17" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST92AE5BA6_18" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_NetEti_Globals_GenericTree_1_Traverse_3.htm">Traverse(Int32, Func<span id="LST92AE5BA6_19" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, T, Object, Object<span id="LST92AE5BA6_20" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Object)</a></td><td>
            Recursive auxiliary routine for the public routine 'Traverse'.
            <br />(Inherited from <a href="T_NetEti_Globals_GenericTree_1.htm">GenericTree<span id="LST92AE5BA6_21" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST92AE5BA6_22" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_UnMarkThreadAsInvalid.htm">UnMarkThreadAsInvalid</a></td><td>
            Removes thread from the list of invalid threads.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_UnregisterTriggeredNode.htm">UnregisterTriggeredNode</a></td><td>
            Sets the subtree to non-startable.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_UserBreak.htm">UserBreak</a></td><td>
            Is called up if the subtree has been deliberately stopped by the user.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_UserRun.htm">UserRun</a></td><td>
            Starts the processing of this node after a start
            by the user. Gives the information that the start
            by the user in the TreeEvent to Run.
            </td></tr></table><a href="#PageHeader">Back to the top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('seeAlso')" onkeypress="SectionExpandCollapse_CheckKey('seeAlso', event)" tabindex="0"><img id="seeAlsoToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See also</span></div><div id="seeAlsoSection" class="collapsibleSection"><h4>Reference</h4><div><a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode class</a></div><div><a href="N_LogicalTaskTree.htm">LogicalTaskTree namespace</a></div></div></div></div><div id="PageFooter" class="pageFooter">Naturally, many findings and developments are based on information freely available on the Internet. Any missing references to original authors are unintentional and will be updated as soon as they are reported.<p>Copyright © 2012-2024 Erik Nagel</p><div class="feedbackLink">Send comments about this feature to
        <a id="HT_MailLink" href="mailto:Vishnu%40reallyhuman.net?Subject=Vishnu%20-%20der%20logische%20Prozess-Monitor">Vishnu@reallyhuman.net</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback will be used to improve the documentation and the product. Your email address will not be used for any other purpose and will be deleted after the reported issue has been resolved. While working on the problem, you may be contacted by email for further details or clarification of your feedback. After the problem has been isolated, you may receive an email to resolve the issue.");
        </script></div></body></html>