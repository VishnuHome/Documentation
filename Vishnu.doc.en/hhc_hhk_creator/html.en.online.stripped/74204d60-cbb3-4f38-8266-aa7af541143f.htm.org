<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><meta name="Microsoft.Help.SelfBranded" content="true" /><meta name="Language" content="en-US" /><meta name="Microsoft.Help.Locale" content="en-US" /><meta name="Microsoft.Help.TopicLocale" content="en-US" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"></script><title>Custom Views</title><meta name="Microsoft.Help.Id" content="74204d60-cbb3-4f38-8266-aa7af541143f" /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="Microsoft.Help.Category" content="CSharp" /><meta name="Microsoft.Help.Category" content="XML" /><meta name="Description" content="This chapter deals with special, self-created view dlls. You can use your own Views to extend and change the display of checkers and their check results in Vishnu in almost any way you like." /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-3.5.1.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="SetDefaultLanguage('cs');"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/ad9ee8b6-c68c-47ec-9584-d85046eb3137.htm" title="Vishnu - the logical process monitor" tocid="roottoc">Vishnu - the logical process monitor</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/1ccf9fe4-94f8-49ff-9234-506c5ad9daa7.htm" title="fortgeschrittene Themen" tocid="1ccf9fe4-94f8-49ff-9234-506c5ad9daa7">Advanced Topics</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/ac884694-516c-4c98-a2af-d79cc504d0f6.htm" title="benannte Trigger und Logger" tocid="ac884694-516c-4c98-a2af-d79cc504d0f6">Named Triggers and Loggers</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/628bbc96-dcd7-4563-a515-5a2edf9ebc10.htm" title="Snapshots" tocid="628bbc96-dcd7-4563-a515-5a2edf9ebc10">Snapshots</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/0af46309-8c47-467f-a231-36615b7488d4.htm" title="Anforderungen an Anwender-Module" tocid="0af46309-8c47-467f-a231-36615b7488d4">Requirements for user modules</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/a3f9771a-ac24-46c0-97df-d2bde6a990e8.htm" title="Custom Checkers" tocid="a3f9771a-ac24-46c0-97df-d2bde6a990e8">Custom Checkers</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="../html/74204d60-cbb3-4f38-8266-aa7af541143f.htm" title="Custom Views" tocid="74204d60-cbb3-4f38-8266-aa7af541143f">Custom Views</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/f724b721-c805-4dbe-8db4-1529c0c68f3d.htm" title="Custom Parameter-Reader" tocid="f724b721-c805-4dbe-8db4-1529c0c68f3d">Custom Parameter Reader</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/b2bd8510-a131-4466-9fac-66f2033d92a0.htm" title="Custom ValueModifiers" tocid="b2bd8510-a131-4466-9fac-66f2033d92a0">Custom ValueModifiers</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/c2c472b6-b252-4bd6-bf6a-0b15bc404ea4.htm" title="Custom Triggers" tocid="c2c472b6-b252-4bd6-bf6a-0b15bc404ea4">Custom Triggers</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/3ccc247e-ea3a-47fc-9ed6-4713baf96986.htm" title="Custom Loggers" tocid="3ccc247e-ea3a-47fc-9ed6-4713baf96986">Custom Loggers</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/f14917bd-1d50-41f0-85ff-14462a770915.htm" title="Checker-Historie loggen" tocid="f14917bd-1d50-41f0-85ff-14462a770915">Log Checker History</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div id="TopicContent" class="topicContent"><table class="titleTable"><tr><td class="logoColumn"><img src="../icons/Vishnu_64.png" /></td><td class="titleColumn"><h1>Custom Views</h1></td></tr></table><div><p>

         This chapter deals with special, self-created <strong>View DLLs</strong>. Using your own <span class="keyword">Views</span>,
         you can expand and change the display of <span class="keyword">Checker-Results</span> in <strong>Vishnu</strong>
         almost as much as you like. Vishnu covers all the essential functions with its standard Standard Views.
         However, as you have already seen in <a href="62ca75a8-ba50-4115-93df-b1e76bf6e5f7.htm">A simple Example</a> of the
         <span class="keyword">CheckDiskSpace</span> job, information can be visually prepared in a much more expressive way using your
         own Views. However, to create your own DLLs, basic knowledge
         of a <span class="keyword">DotNet</span>-language, e.g. <span class="keyword">C#</span>, is required.
			 </p><div class="alert"><table><tr><th><img src="../icons/AlertCaution.png" alt="Important" />Important</th></tr><tr><td><p>
         Nevertheless, you can get started with <span class="keyword">C#</span> using a <strong>Vishnu</strong>-<strong>Visual Studio Extension</strong>
         even without any programming knowledge. A working test project with your own new View is generated
         at the push of a button.
				</p></td></tr></table></div></div><div class="collapsibleAreaRegion" id="UserViewDemoJob"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDDAB')" onkeypress="SectionExpandCollapse_CheckKey('IDDAB', event)" tabindex="0"><img id="IDDABToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />the demo job</span></div><div id="IDDABSection" class="collapsibleSection"><p>
										This is the <span class="keyword">JobDescription.xml</span> for the demo job for custom <span class="keyword">Views</span>:
				</p><div id="IDBBDAB" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDBBDAB_tab1" class="codeSnippetContainerTabSingle">JobDescription.xml</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDBBDAB_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDBBDAB');return false;" title="Copy">Copy</a></div></div><div id="IDBBDAB_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-xml-bracket">&lt;?</span><span class="highlight-xml-tag">xml</span> <span class="highlight-xml-attribute-name">version</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"1.0"</span> <span class="highlight-xml-attribute-name">encoding</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"utf-8"</span><span class="highlight-xml-bracket">?&gt;</span>
<span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">JobDescription</span><span class="highlight-xml-bracket">&gt;</span>
  <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">LogicalName</span><span class="highlight-xml-bracket">&gt;</span>UserViewDemo<span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">LogicalName</span><span class="highlight-xml-bracket">&gt;</span>
  <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">LogicalExpression</span><span class="highlight-xml-bracket">&gt;</span>Predecessor AND UserChecker<span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">LogicalExpression</span><span class="highlight-xml-bracket">&gt;</span>
  <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">Checkers</span> <span class="highlight-xml-attribute-name">type</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"array"</span><span class="highlight-xml-bracket">&gt;</span>
    <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">Checker</span><span class="highlight-xml-bracket">&gt;</span>
      <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">LogicalName</span><span class="highlight-xml-bracket">&gt;</span>Predecessor<span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">LogicalName</span><span class="highlight-xml-bracket">&gt;</span>
      <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">PhysicalPath</span><span class="highlight-xml-bracket">&gt;</span>TrueFalseExceptionChecker.dll<span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">PhysicalPath</span><span class="highlight-xml-bracket">&gt;</span>
      <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">Parameters</span><span class="highlight-xml-bracket">&gt;</span>False:True:Exception|10|Predecessor: Hello World<span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">Parameters</span><span class="highlight-xml-bracket">&gt;</span>
      <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">Trigger</span><span class="highlight-xml-bracket">&gt;</span>
        <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">PhysicalPath</span><span class="highlight-xml-bracket">&gt;</span>TimerTrigger.dll<span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">PhysicalPath</span><span class="highlight-xml-bracket">&gt;</span>
        <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">Parameters</span><span class="highlight-xml-bracket">&gt;</span>P:3|P:15<span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">Parameters</span><span class="highlight-xml-bracket">&gt;</span>
      <span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">Trigger</span><span class="highlight-xml-bracket">&gt;</span>
    <span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">Checker</span><span class="highlight-xml-bracket">&gt;</span>
    <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">Checker</span><span class="highlight-xml-bracket">&gt;</span>
      <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">LogicalName</span><span class="highlight-xml-bracket">&gt;</span>UserChecker<span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">LogicalName</span><span class="highlight-xml-bracket">&gt;</span>
      <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">PhysicalPath</span><span class="highlight-xml-bracket">&gt;</span>Plugin\UserChecker.dll<span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">PhysicalPath</span><span class="highlight-xml-bracket">&gt;</span>
      <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">UserControlPath</span><span class="highlight-xml-bracket">&gt;</span>Plugin\UserView.dll<span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">UserControlPath</span><span class="highlight-xml-bracket">&gt;</span>
      <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">Trigger</span><span class="highlight-xml-bracket">&gt;</span>
        <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">Reference</span><span class="highlight-xml-bracket">&gt;</span>True<span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">Reference</span><span class="highlight-xml-bracket">&gt;</span>
        <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">Parameters</span><span class="highlight-xml-bracket">&gt;</span>Predecessor<span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">Parameters</span><span class="highlight-xml-bracket">&gt;</span>
      <span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">Trigger</span><span class="highlight-xml-bracket">&gt;</span>
    <span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">Checker</span><span class="highlight-xml-bracket">&gt;</span>
  <span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">Checkers</span><span class="highlight-xml-bracket">&gt;</span>
<span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">JobDescription</span><span class="highlight-xml-bracket">&gt;</span></pre></div></div></div><p>
          The main difference to the demo job for your own checkers (see <a href="a3f9771a-ac24-46c0-97df-d2bde6a990e8.htm">Custom Checkers</a>)
          is the additional instruction <span class="keyword">&lt;UserControlPath&gt;Plugin\UserView.dll&lt;&#47;UserControlPath&gt;</span>.
          This tells <strong>Vishnu</strong> that there is a separate DLL <strong>UserView.dll</strong>
          in the <strong>Plugin</strong> directory, which <strong>Vishnu</strong> should use instead of the standard View.
				</p></div><div class="collapsibleAreaRegion" id="UserViewDemoProjektErzeugung"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDEAB')" onkeypress="SectionExpandCollapse_CheckKey('IDEAB', event)" tabindex="0"><img id="IDEABToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />the demo project - created quickly</span></div><div id="IDEABSection" class="collapsibleSection"><p>
										Using the Visual Studio extension <strong>Vishnu_UserView_VSIX.vsix</strong>
										(install by double-clicking) you can add a C# project template for your own Views to Visual Studio:
				</p><div class="alert"><table><tr><th><img src="../icons/AlertNote.png" alt="Hinweis" />Note</th></tr><tr><td><p><a href="https://neteti.de/extensions/free/64/Vishnu_UserView_VSIX.vsix" target="_blank" alt="Vishnu_UserView_VSIX.vsix">
																Vishnu_UserView_VSIX.vsix download link							
							</a></p></td></tr></table></div><div class="mediaNear"><img alt="Vishnu User View VSIX" src="../media/Vishnu_UserView_VSIX.png" /></div><p>
											This project template can then be used later for a new project:		
				</p><div class="alert"><table><tr><th><img src="../icons/AlertCaution.png" alt="Achtung" />Attention</th></tr><tr><td><p>
													Two error messages are displayed during the generation of the projects, saying that
							not all required packages could be added to the project.
							However, these are not true and can be ignored.
					</p></td></tr></table></div><div class="mediaNear"><img alt="Vishnu User View VSIX select" src="../media/Vishnu_UserView_VSIX_select.png" /></div><p>
											A project folder with a view project and a test project is generated.
				</p><div class="mediaNear"><img alt="User View Solution" src="../media/UserViewSolution.png" /></div><div class="alert"><table><tr><th><img src="../icons/AlertNote.png" alt="Hinweis" />  Note</th></tr><tr><td><p>
						The UserView and the test project are immediately executable and the <span class="keyword">UserView</span> can be used as a
						<strong>Vishnu</strong>-view with the implemented demo functionality.
					</p><p>
												Here is the output of the test project in the debugger:
					</p></td></tr></table></div><div class="mediaNear"><img alt="User View Demo Run" src="../media/UserViewDemoRun.png" /></div></div><div class="collapsibleAreaRegion" id="UserViewDemoProjektDetails"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDFAB')" onkeypress="SectionExpandCollapse_CheckKey('IDFAB', event)" tabindex="0"><img id="IDFABToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />the demo project - Details</span></div><div id="IDFABSection" class="collapsibleSection">
						<p>
							The class <strong>UserChecker_ReturnObject</strong> in the project generated by the project template (see above) should
							normally be identical to the ReturnObject class of the corresponding checker from the appropriate
							<strong>UserChecker</strong> project.
				</p><div class="alert"><table><tr><th><img src="../icons/AlertNote.png" alt="Hinweis" />Note</th></tr><tr><td><p>
					  If you want to avoid defining the <span class="keyword">ReturnObject</span> twice in your own projects later,
					  you can work with a reference to the appropriate <span class="keyword">Checker.dll</span> instead. To keep the demo project
					  simple, the <span class="keyword">UserChecker_ReturnObject.cs</span> was copied from the UserCheckerDemo project.
					</p></td></tr></table></div><p>
            In the <strong>ResultViewModel</strong> class, the <span class="keyword">Properties</span> of the
            <span class="keyword">ReturnObject</span> to be displayed must be inserted in two places:
				</p><div id="IDDBFAB" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDDBFAB_tab1" class="codeSnippetContainerTabSingle">Extract from the ResultViewModel class</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDDBFAB_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDDBFAB');return false;" title="Copy">Copy</a></div></div><div id="IDDBFAB_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">    ...
<span class="highlight-comment">// TODO: The properties to be displayed from UserChecker_ReturnObject must be added here:</span>
<span class="highlight-comment">/// &lt;summary&gt;</span>
<span class="highlight-comment">/// Demo-Property.</span>
<span class="highlight-comment">/// In principle, the UserChecker_ReturnObject can have any public properties.</span>
<span class="highlight-comment">/// In this ViewModel, only properties are taken into account that are defined in the serialisation</span>
<span class="highlight-comment">/// deserialisation routines of the UserChecker have been taken into account accordingly.</span>
<span class="highlight-comment">/// &lt;/summary&gt;</span>
<span class="highlight-keyword">public</span> <span class="highlight-keyword">string</span> DefaultResultProperty
{
    <span class="highlight-keyword">get</span>
    {
        <span class="highlight-keyword">string</span> prop = <span class="highlight-keyword">this</span>.GetResultProperty&lt;<span class="highlight-keyword">string</span>&gt;(<span class="highlight-keyword">typeof</span>(UserChecker_ReturnObject), <span class="highlight-literal">"DefaultResultProperty"</span>);
        <span class="highlight-keyword">return</span> prop;
    }
}

    ...

<span class="highlight-comment">/// &lt;summary&gt;</span>
<span class="highlight-comment">/// Is executed when the Result property of the ViewModel</span>
<span class="highlight-comment">/// of the corresponding Vishnu node has changed.</span>
<span class="highlight-comment">/// &lt;/summary&gt;</span>
<span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> HandleResultPropertyChanged()
{
            ...
    <span class="highlight-comment">// TODO: The properties to be displayed from UserChecker_ReturnObject must be added here:</span>
    <span class="highlight-keyword">this</span>RaisePropertyChanged(<span class="highlight-literal">"DefaultResultProperty"</span>);

    <span class="highlight-comment">// TODO: Any additional buttons would have to be forced to update here,</span>
    <span class="highlight-comment">// since the processing runs in a different thread, e.g:</span>
    <span class="highlight-comment">// this._btnXYZ...RelayCommand.UpdateCanExecuteState(this.Dispatcher);</span>
}

    ...</pre></div></div></div><div class="alert"><table><tr><th><img src="../icons/AlertNote.png" alt="Hinweis" />  Note</th></tr><tr><td><p>
												The code excerpt only shows the absolutely necessary changes. Extensions for custom buttons, for example
							are indicated in the original source.
					
					</p></td></tr></table></div></div><div class="collapsibleAreaRegion" id="Serialisierung"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDGAB')" onkeypress="SectionExpandCollapse_CheckKey('IDGAB', event)" tabindex="0"><img id="IDGABToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Serialisation/de-serialisation</span></div><div id="IDGABSection" class="collapsibleSection"><p>
            So far, a topic that is essential for the correct representation of <span class="keyword">Results</span> from your own
            <span class="keyword">Checkers</span> in your own <span class="keyword">Views</span> has not been covered:
            the <span class="keyword">Serialization</span> and <span class="keyword">De-Serialization</span> of the <span class="keyword">UserChecker_ReturnObject</span>.
            <strong>Vishnu</strong> simply treats UserChecker_ReturnObjects as character strings when displaying them in
            standard <span class="keyword">Views</span>. However, this is insufficient for the preparation of structured content
            (<span class="keyword">Properties</span>). For this, the properties must be accessible individually.
            The <strong>UserChecker_ReturnObject</strong> class contains the following routines for this purpose (overview):
				</p><ul><li><p><strong>Deserialisation constructor</strong></p></li>
				<li><p><strong>Serialisation help routine</strong></p></li>
				<li><p><strong>Overwritten ToString() method</strong></p></li>
				<li><p>Overwritten comparison method</p></li>
				<li><p>Overwritten hash code generation routine</p></li></ul><p>
            All five routines must be present and the <span class="keyword">Properties</span> of <strong>UserChecker_ReturnObject</strong>
            must be handled in the three routines printed in bold above. Details can be seen in the following code snippet of the
            <strong>UserChecker_ReturnObject</strong> class:
				</p><div id="IDEBGAB" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDEBGAB_tab1" class="codeSnippetContainerTabSingle">Extract from the UserChecker_ReturnObject class</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDEBGAB_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDEBGAB');return false;" title="Copy">Copy</a></div></div><div id="IDEBGAB_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">    ...
<span class="highlight-comment">/// &lt;summary&gt;</span>
<span class="highlight-comment">/// Deserialisation constructor.</span>
<span class="highlight-comment">/// &lt;/summary&gt;</span>
<span class="highlight-comment">/// &lt;param name="info"&gt;Property-Container.&lt;/param&gt;</span>
<span class="highlight-comment">/// &lt;param name="context"&gt;Transfer context.&lt;/param&gt;</span>
<span class="highlight-keyword">protected</span> UserChecker_ReturnObject(SerialisationInfo info, StreamingContext context)
{
    <span class="highlight-keyword">this</span>.DefaultResultProperty = info.GetString(<span class="highlight-literal">"DefaultResultProperty"</span>);
}

<span class="highlight-comment">/// &lt;summary&gt;</span>
<span class="highlight-comment">/// Serialisation helper routine: fetches the object properties into the property container.</span>
<span class="highlight-comment">/// &lt;/summary&gt;</span>
<span class="highlight-comment">/// &lt;param name="info"&gt;Property-Container.&lt;/param&gt;</span>
<span class="highlight-comment">/// &lt;param name="context"&gt;Serialisation context.&lt;/param&gt;</span>
<span class="highlight-keyword">public</span> <span class="highlight-keyword">virtual</span> <span class="highlight-keyword">void</span> GetObjectData(SerialisationInfo info, StreamingContext context)
{
    info.AddValue(<span class="highlight-literal">"DefaultResultProperty"</span>, <span class="highlight-keyword">this</span>.DefaultResultProperty);
}

<span class="highlight-comment">/// &lt;summary&gt;</span>
<span class="highlight-comment">/// Overridden ToString() method - provides all public properties</span>
<span class="highlight-comment">/// as a formatted string.</span>
<span class="highlight-comment">/// &lt;/summary&gt;</span>
<span class="highlight-comment">/// &lt;returns&gt;All public properties formatted as a string.&lt;/returns&gt;</span>
<span class="highlight-keyword">public</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">string</span> ToString()
{
    StringBuilder str = <span class="highlight-keyword">new</span> StringBuilder(<span class="highlight-keyword">this</span>.DefaultResultProperty);
    <span class="highlight-comment">// str.Append(...);</span>
    <span class="highlight-keyword">return</span> str.ToString();
}

<span class="highlight-comment">/// &lt;summary&gt;</span>
<span class="highlight-comment">/// Overwritten comparison method - compares this result with</span>
<span class="highlight-comment">/// a passed result by content.</span>
<span class="highlight-comment">/// &lt;/summary&gt;</span>
<span class="highlight-comment">/// &lt;param name="obj"&gt;The result to be compared.&lt;/param&gt;</span>
<span class="highlight-comment">/// &lt;returns&gt;True if the content of the passed result is the same as this result.&lt;/returns&gt;</span>
<span class="highlight-keyword">public</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">bool</span> Equals(<span class="highlight-keyword">object</span> obj)
{
    <span class="highlight-keyword">if</span> (obj == <span class="highlight-keyword">zero</span> || <span class="highlight-keyword">this</span>.GetType() != obj.GetType())
    {
        <span class="highlight-keyword">return</span> <span class="highlight-keyword">false</span>;
    }
    <span class="highlight-keyword">if</span> (Object.ReferenceEquals(<span class="highlight-keyword">this</span>, obj))
    {
        <span class="highlight-keyword">return</span> <span class="highlight-keyword">true</span>;
    }
    <span class="highlight-keyword">if</span> (<span class="highlight-keyword">this</span>.ToString() != obj.ToString())
    {
        <span class="highlight-keyword">return</span> <span class="highlight-keyword">false</span>;
    }
    <span class="highlight-keyword">return</span> <span class="highlight-keyword">true</span>;
}

<span class="highlight-comment">/// &lt;summary&gt;</span>
<span class="highlight-comment">/// Overwritten hash code generation routine - Generates a</span>
<span class="highlight-comment">/// unique hash code for this result.</span>
<span class="highlight-comment">/// &lt;/summary&gt;</span>
<span class="highlight-comment">/// &lt;returns&gt;Hashcode (int).&lt;/returns&gt;</span>
<span class="highlight-keyword">public</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">int</span> GetHashCode()
{
    <span class="highlight-keyword">return</span> (<span class="highlight-keyword">this</span>.ToString()).GetHashCode();
}
    ...</pre></div></div></div><div class="alert"><table><tr><th><img src="../icons/AlertNote.png" alt="Hinweis" />  Note</th></tr><tr><td><p>
												The routines for serialisation and de-serialisation also play an important role in displaying of
						
						<a href="628bbc96-dcd7-4563-a515-5a2edf9ebc10.htm">Snapshots</a>.
					
					</p></td></tr></table></div></div><div class="collapsibleAreaRegion" id="SieheAuch"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDHAB')" onkeypress="SectionExpandCollapse_CheckKey('IDHAB', event)" tabindex="0"><img id="IDHABToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See also</span></div><div id="IDHABSection" class="collapsibleSection"><p><a href="a3f9771a-ac24-46c0-97df-d2bde6a990e8.htm">Custom Checkers</a></p></div></div></div><div id="PageFooter" class="pageFooter">Naturally, many findings and developments are based on information freely available on the Internet. Any missing references to original authors are unintentional and will be updated as soon as they are reported.<p>Copyright © 2012-2024 Erik Nagel</p><div class="feedbackLink">Send comments about this feature to
        <a id="HT_MailLink" href="mailto:Vishnu%40reallyhuman.net?Subject=Vishnu%20-%20der%20logische%20Prozess-Monitor">Vishnu@reallyhuman.net</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback will be used to improve the documentation and the product. Your email address will not be used for any other purpose and will be deleted after the reported issue has been resolved. While working on the problem, you may be contacted by email for further details or clarification of your feedback. After the problem has been isolated, you may receive an email to resolve the issue.");
        </script></div></body></html>