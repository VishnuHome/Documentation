<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><meta name="Microsoft.Help.SelfBranded" content="true" /><meta name="Language" content="en-US" /><meta name="Microsoft.Help.Locale" content="en-US" /><meta name="Microsoft.Help.TopicLocale" content="en-US" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"></script><title>LogicalTaskTree namespace</title><meta name="Title" content="LogicalTaskTree" /><meta name="Microsoft.Help.Id" content="N:LogicalTaskTree" /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="System.Keywords" content="LogicalTaskTree Namensraum" /><meta name="Microsoft.Help.F1" content="LogicalTaskTree" /><meta name="container" content="LogicalTaskTree" /><meta name="file" content="N_LogicalTaskTree" /><meta name="guid" content="N_LogicalTaskTree" /><meta name="Description" content="Main processing logic of Vishnu" /><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-3.5.1.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="SetDefaultLanguage('cs');"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/ad9ee8b6-c68c-47ec-9584-d85046eb3137.htm" title="Vishnu - the logical process monitor" tocid="roottoc">Vishnu - the logical process monitor</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/R_Project_Vishnu_doc_de.htm" title="Vishnu - technische Dokumentation" tocid="R_Project_Vishnu_doc_de">Vishnu - technical Documentation</a></div><div class="toclevel1 current" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/N_LogicalTaskTree.htm" title="LogicalTaskTree" tocid="N_LogicalTaskTree">LogicalTaskTree</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/T_LogicalTaskTree_AllStatesChangedEventHandler.htm" title="AllStatesChangedEventHandler Delegat" tocid="T_LogicalTaskTree_AllStatesChangedEventHandler">AllStatesChangedEventHandler Delegate</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/T_LogicalTaskTree_CheckerShell.htm" title="CheckerShell Klasse" tocid="T_LogicalTaskTree_CheckerShell">CheckerShell class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/T_LogicalTaskTree_ConfigurationManager.htm" title="ConfigurationManager Klasse" tocid="T_LogicalTaskTree_ConfigurationManager">ConfigurationManager class</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/T_LogicalTaskTree_ExceptionRaisedEventHandler.htm" title="ExceptionRaisedEventHandler Delegat" tocid="T_LogicalTaskTree_ExceptionRaisedEventHandler">ExceptionRaisedEventHandler Delegate</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/T_LogicalTaskTree_IJobProvider.htm" title="IJobProvider Schnittstelle" tocid="T_LogicalTaskTree_IJobProvider">IJobProvider interface</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/T_LogicalTaskTree_Job.htm" title="Job Klasse" tocid="T_LogicalTaskTree_Job">Job class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/T_LogicalTaskTree_JobConnector.htm" title="JobConnector Klasse" tocid="T_LogicalTaskTree_JobConnector">JobConnector class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/T_LogicalTaskTree_JobList.htm" title="JobList Klasse" tocid="T_LogicalTaskTree_JobList">JobList class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/T_LogicalTaskTree_JobPackage.htm" title="JobPackage Klasse" tocid="T_LogicalTaskTree_JobPackage">JobPackage class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/T_LogicalTaskTree_JobProviderBase.htm" title="JobProviderBase Klasse" tocid="T_LogicalTaskTree_JobProviderBase">JobProviderBase class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/T_LogicalTaskTree_JobProviderBase_UndefinedJobProvider.htm" title="JobProviderBase.UndefinedJobProvider Klasse" tocid="T_LogicalTaskTree_JobProviderBase_UndefinedJobProvider">JobProviderBase.UndefinedJobProvider class</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/T_LogicalTaskTree_LastNotNullLogicalChangedEventHandler.htm" title="LastNotNullLogicalChangedEventHandler Delegat" tocid="T_LogicalTaskTree_LastNotNullLogicalChangedEventHandler">LastNotNullLogicalChangedEventHandler Delegate</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/T_LogicalTaskTree_LoggerShell.htm" title="LoggerShell Klasse" tocid="T_LogicalTaskTree_LoggerShell">LoggerShell class</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/T_LogicalTaskTree_LogicalChangedEventHandler.htm" title="LogicalChangedEventHandler Delegat" tocid="T_LogicalTaskTree_LogicalChangedEventHandler">LogicalChangedEventHandler Delegate</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/T_LogicalTaskTree_LogicalNode.htm" title="LogicalNode Klasse" tocid="T_LogicalTaskTree_LogicalNode">LogicalNode class</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/T_LogicalTaskTree_LogicalStateChangedEventHandler.htm" title="LogicalStateChangedEventHandler Delegat" tocid="T_LogicalTaskTree_LogicalStateChangedEventHandler">LogicalStateChangedEventHandler Delegate</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/T_LogicalTaskTree_LogicalTaskTree.htm" title="LogicalTaskTree Klasse" tocid="T_LogicalTaskTree_LogicalTaskTree">LogicalTaskTree class</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/T_LogicalTaskTree_NodeChangedEventHandler.htm" title="NodeChangedEventHandler Delegat" tocid="T_LogicalTaskTree_NodeChangedEventHandler">NodeChangedEventHandler Delegate</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/T_LogicalTaskTree_NodeCheckerBase.htm" title="NodeCheckerBase Klasse" tocid="T_LogicalTaskTree_NodeCheckerBase">NodeCheckerBase class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/T_LogicalTaskTree_NodeConnector.htm" title="NodeConnector Klasse" tocid="T_LogicalTaskTree_NodeConnector">NodeConnector class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/T_LogicalTaskTree_NodeList.htm" title="NodeList Klasse" tocid="T_LogicalTaskTree_NodeList">NodeList class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/T_LogicalTaskTree_NodeParent.htm" title="NodeParent Klasse" tocid="T_LogicalTaskTree_NodeParent">NodeParent class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/T_LogicalTaskTree_NodeResultComparer.htm" title="NodeResultComparer Klasse" tocid="T_LogicalTaskTree_NodeResultComparer">NodeResultComparer class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/T_LogicalTaskTree_NodeShellBase.htm" title="NodeShellBase Klasse" tocid="T_LogicalTaskTree_NodeShellBase">NodeShellBase class</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/T_LogicalTaskTree_ResultChangedEventHandler.htm" title="ResultChangedEventHandler Delegat" tocid="T_LogicalTaskTree_ResultChangedEventHandler">ResultChangedEventHandler Delegate</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/T_LogicalTaskTree_SingleNode.htm" title="SingleNode Klasse" tocid="T_LogicalTaskTree_SingleNode">SingleNode class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/T_LogicalTaskTree_Snapshot.htm" title="Snapshot Klasse" tocid="T_LogicalTaskTree_Snapshot">Snapshot class</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/T_LogicalTaskTree_SnapshotRefreshedEventHandler.htm" title="SnapshotRefreshedEventHandler Delegat" tocid="T_LogicalTaskTree_SnapshotRefreshedEventHandler">SnapshotRefreshedEventHandler Delegate</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/T_LogicalTaskTree_StateChangedEventHandler.htm" title="StateChangedEventHandler Delegat" tocid="T_LogicalTaskTree_StateChangedEventHandler">StateChangedEventHandler Delegate</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/T_LogicalTaskTree_ThreadLocker.htm" title="ThreadLocker Klasse" tocid="T_LogicalTaskTree_ThreadLocker">ThreadLocker class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/T_LogicalTaskTree_TreeEventTrigger.htm" title="TreeEventTrigger Klasse" tocid="T_LogicalTaskTree_TreeEventTrigger">TreeEventTrigger class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/T_LogicalTaskTree_TriggerShell.htm" title="TriggerShell Klasse" tocid="T_LogicalTaskTree_TriggerShell">TriggerShell class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/T_LogicalTaskTree_UndefinedJob.htm" title="UndefinedJob Klasse" tocid="T_LogicalTaskTree_UndefinedJob">UndefinedJob class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/T_LogicalTaskTree_UndefinedJobListClass.htm" title="UndefinedJobListClass Klasse" tocid="T_LogicalTaskTree_UndefinedJobListClass">UndefinedJobListClass Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/T_LogicalTaskTree_UndefinedLogicalNodeClass.htm" title="UndefinedLogicalNodeClass Klasse" tocid="T_LogicalTaskTree_UndefinedLogicalNodeClass">UndefinedLogicalNodeClass Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/T_LogicalTaskTree_ValueModifier_1.htm" title="ValueModifier&lt;T&gt; Klasse" tocid="T_LogicalTaskTree_ValueModifier_1">ValueModifier&lt;T&gt; class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/T_LogicalTaskTree_Workers.htm" title="Workers Klasse" tocid="T_LogicalTaskTree_Workers">Workers class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/T_LogicalTaskTree_WorkerShell.htm" title="WorkerShell Klasse" tocid="T_LogicalTaskTree_WorkerShell">WorkerShell class</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div id="TopicContent" class="topicContent"><table class="titleTable"><tr><td class="logoColumn"><img src="../icons/Vishnu_64.png" /></td><td class="titleColumn"><h1>Logical<wbr />Task<wbr />Tree namespace</h1></td></tr></table><div class="summary">Main processing logic of Vishnu</div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDACA')" onkeypress="SectionExpandCollapse_CheckKey('IDACA', event)" tabindex="0"><img id="IDACAToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Classes</span></div><div id="IDACASection" class="collapsibleSection"><table id="classList" class="members"><tr><th class="iconColumn"> </th><th>Class</th><th>Description of the</th></tr><tr><td><img src="../icons/pubClass.gif" alt="Public Class" title="Public Class" /></td><td><a href="T_LogicalTaskTree_CheckerShell.htm">CheckerShell</a></td><td>
             Encapsulates the call of an external work routine,
             which is loaded dynamically as a Dll plug-in.
             </td></tr><tr><td><img src="../icons/pubClass.gif" alt="Public Class" title="Public Class" /></td><td><a href="T_LogicalTaskTree_ConfigurationManager.htm">ConfigurationManager</a></td><td>
             Static class for saving JobList states on user request.
             It is saved for each JobList whether it is displayed in the screen display or not.
             is collapsed or its subnodes are visible.
             </td></tr><tr><td><img src="../icons/pubClass.gif" alt="Public Class" title="Public Class" /></td><td><a href="T_LogicalTaskTree_Job.htm">Job</a></td><td>
             Concrete job for a job list in a LogicalTaskTree.
             </td></tr><tr><td><img src="../icons/pubClass.gif" alt="Public Class" title="Public Class" /></td><td><a href="T_LogicalTaskTree_JobConnector.htm">JobConnector</a></td><td>
             Generated automatically when the name of a job is
             occurs several times within a logical expression. If the
             Group result of the first job with the same name is similar
             as in a single node.
             </td></tr><tr><td><img src="../icons/pubClass.gif" alt="Public Class" title="Public Class" /></td><td><a href="T_LogicalTaskTree_JobList.htm">JobList</a></td><td>
             Root of a (sub)tree of a LogicalTaskTree.
             The logic, conditions and status for a (sub)tree are managed here.
             This class is used from the outside with the logic and details
             (worker, name, Boolean expression, etc.).
             </td></tr><tr><td><img src="../icons/pubClass.gif" alt="Public Class" title="Public Class" /></td><td><a href="T_LogicalTaskTree_JobPackage.htm">JobPackage</a></td><td>
             Container for a job, a logical name for this job
             and an optional file path to the job file.
             </td></tr><tr><td><img src="../icons/pubClass.gif" alt="Public Class" title="Public Class" /></td><td><a href="T_LogicalTaskTree_JobProviderBase.htm">JobProviderBase</a></td><td>
             Base class for all JobProviders; must be derived.
                       implements IJobProvider.
             </td></tr><tr><td><img src="../icons/pubClass.gif" alt="Public Class" title="Public Class" /></td><td><a href="T_LogicalTaskTree_JobProviderBase_UndefinedJobProvider.htm">JobProviderBase<span id="LSTC9213974_0" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>UndefinedJobProvider</a></td><td>
            Class definition for an undefined JobProvider.
            Replaces null to avoid the miserable null warnings when using LogicalNodes and JobLists
            which it is ensured that at the time of use they are not
            are not equal to zero, but are not yet instantiated in the constructor in a meaningful way.
            could be realised.
            For any subsequent null queries, null must be replaced by the static instance
            'UndefinedJobProvider' can be replaced.
            </td></tr><tr><td><img src="../icons/pubClass.gif" alt="Public Class" title="Public Class" /></td><td><a href="T_LogicalTaskTree_LoggerShell.htm">LoggerShell</a></td><td>
             Encapsulates the call of an external logger,
             which is loaded dynamically as a Dll plug-in.
             </td></tr><tr><td><img src="../icons/pubClass.gif" alt="Public Class" title="Public Class" /></td><td><a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a></td><td>
             Abstract base class for a node in the LogicalTaskTree.
             </td></tr><tr><td><img src="../icons/pubClass.gif" alt="Public Class" title="Public Class" /></td><td><a href="T_LogicalTaskTree_LogicalTaskTree.htm">LogicalTaskTree</a></td><td>
             Contains an extended logical expression,
             hierarchically structured tree with sheets in which user-specific
             processing nodes can be inserted dynamically.
             Serves as a framework for process monitoring and control.
             </td></tr><tr><td><img src="../icons/pubClass.gif" alt="Public Class" title="Public Class" /></td><td><a href="T_LogicalTaskTree_NodeCheckerBase.htm">NodeCheckerBase</a></td><td>
             Base class for NodeChecker and ValueModifier;
                       implements INodeChecker; must be derived.
             </td></tr><tr><td><img src="../icons/pubClass.gif" alt="Public Class" title="Public Class" /></td><td><a href="T_LogicalTaskTree_NodeConnector.htm">NodeConnector</a></td><td>
             Is generated automatically if the name of a single node
             occurs several times within a logical expression. Looks like this to the outside world,
             as if the node appeared twice (or more) in the tree, internally refers to
             but only on the first node with this name. This ensures that
             that the processing associated with the original node in Tree is only
             is executed once.
             Filters the ReturnObject of an INodeChecker by type and, if applicable, format string.
             </td></tr><tr><td><img src="../icons/pubClass.gif" alt="Public Class" title="Public Class" /></td><td><a href="T_LogicalTaskTree_NodeList.htm">NodeList</a></td><td>
             Nodes with children in LogicalTaskTree.
             </td></tr><tr><td><img src="../icons/pubClass.gif" alt="Public Class" title="Public Class" /></td><td><a href="T_LogicalTaskTree_NodeParent.htm">NodeParent</a></td><td>
             Function: Base class for nodes with children: NodeList and NodeConnector.
             </td></tr><tr><td><img src="../icons/pubClass.gif" alt="Public Class" title="Public Class" /></td><td><a href="T_LogicalTaskTree_NodeResultComparer.htm">NodeResultComparer</a></td><td>
             Generally compares two or more Result.ReturnObjects as accurately as possible via
             a transferred comparison operator with each other. Supported types are: bool, DateTime,
             int, double and String. Unknown types are compared using the ToString() method.
             </td></tr><tr><td><img src="../icons/pubClass.gif" alt="Public Class" title="Public Class" /></td><td><a href="T_LogicalTaskTree_NodeShellBase.htm">NodeShellBase</a></td><td>
             Base class for CheckerShell, TriggerShell, WorkerShell.
             Provides parameter substitution.
             If a local IParameterReplacer dll or such a
             in the UserAssemblies directory.
             Provides bool CanRun().
             Takes a local ICanRun dll or such a dll into account.
             in the UserAssemblies directory (Note: IParameterReplacer and
             ICanRun can also be implemented by a common dll).
             </td></tr><tr><td><img src="../icons/pubClass.gif" alt="Public Class" title="Public Class" /></td><td><a href="T_LogicalTaskTree_SingleNode.htm">SingleNode</a></td><td>
             End node in a LogicalTaskTree.
             Has a checker that does the work and has a logical
             returns the result, possibly also a return object.
             </td></tr><tr><td><img src="../icons/pubClass.gif" alt="Public Class" title="Public Class" /></td><td><a href="T_LogicalTaskTree_Snapshot.htm">Snapshot</a></td><td>
             node in a LogicalTaskTree, which is used to display
             of a Remote-LogicalTaskTree.
             </td></tr><tr><td><img src="../icons/pubClass.gif" alt="Public Class" title="Public Class" /></td><td><a href="T_LogicalTaskTree_ThreadLocker.htm">ThreadLocker</a></td><td>
             Manages a static dictionary of names and lock objects.
             Locks and unlocks the object assigned to a name globally.
             </td></tr><tr><td><img src="../icons/pubClass.gif" alt="Public Class" title="Public Class" /></td><td><a href="T_LogicalTaskTree_TreeEventTrigger.htm">TreeEventTrigger</a></td><td>
             Trigger for internal events from the tree.
             Makes tree events usable for triggers "from outside" and extends
             This is the range of trigger applications.
             A TreeEventTrigger triggers 1 to n checkers.
             </td></tr><tr><td><img src="../icons/pubClass.gif" alt="Public Class" title="Public Class" /></td><td><a href="T_LogicalTaskTree_TriggerShell.htm">TriggerShell</a></td><td>
             Encapsulates an internal (TreeEvent) or external (Dll) trigger.
             </td></tr><tr><td><img src="../icons/pubClass.gif" alt="Public Class" title="Public Class" /></td><td><a href="T_LogicalTaskTree_UndefinedJob.htm">UndefinedJob</a></td><td>
            Class definition for an undefined job.
            Replaces null to avoid the miserable null warnings when using LogicalNodes and JobLists
            which it is ensured that at the time of use they are not
            are not equal to zero, but are not yet instantiated in the constructor in a meaningful way.
            could be realised.
            For any subsequent null queries, null must be replaced by the static instance
            'UndefinedJob' (see below).
            </td></tr><tr><td><img src="../icons/pubClass.gif" alt="Public Class" title="Public Class" /></td><td><a href="T_LogicalTaskTree_UndefinedJobListClass.htm">UndefinedJobListClass</a></td><td>
            Class definition for an undefined JobList.
            Replaces null to avoid the miserable null warnings when using LogicalNodes and JobLists
            which it is ensured that at the time of use they are not
            are not equal to zero, but are not yet instantiated in the constructor in a meaningful way.
            could be realised.
            For any subsequent null queries, null must be replaced by the static instance
            'UndefinedJobList' can be replaced.
            </td></tr><tr><td><img src="../icons/pubClass.gif" alt="Public Class" title="Public Class" /></td><td><a href="T_LogicalTaskTree_UndefinedLogicalNodeClass.htm">UndefinedLogicalNodeClass</a></td><td>
            Class definition for an undefined LogicalNode.
            Replaces null to avoid the miserable null warnings when using LogicalNodes
            which it is ensured that at the time of use they are not
            are not equal to zero, but are not yet instantiated in the constructor in a meaningful way.
            could be realised.
            For any subsequent null queries, null must be replaced by the static instance
            'UndefinedLogicalNode' must be replaced.
            </td></tr><tr><td><img src="../icons/pubClass.gif" alt="Public Class" title="Public Class" /></td><td><a href="T_LogicalTaskTree_ValueModifier_1.htm">ValueModifier<span id="LSTC9213974_1" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTC9213974_2" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a></td><td>
             Filters the ReturnObject of an INodeChecker by type and, if applicable, format string.
             </td></tr><tr><td><img src="../icons/pubClass.gif" alt="Public Class" title="Public Class" /></td><td><a href="T_LogicalTaskTree_Workers.htm">Workers</a></td><td>
            Dictionary that creates WorkerShell arrays from node id + ":" + TreeEvents
            formed keys.
            </td></tr><tr><td><img src="../icons/pubClass.gif" alt="Public Class" title="Public Class" /></td><td><a href="T_LogicalTaskTree_WorkerShell.htm">WorkerShell</a></td><td>
             Encapsulates the call of an external work routine,
             which are generated in response to a defined change in the tree state
             (TreeEvent) is executed as an external exe (fire and forget)
             TODO: later possibly also realise as lightweight Dll plugin.
             </td></tr></table></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDCCA')" onkeypress="SectionExpandCollapse_CheckKey('IDCCA', event)" tabindex="0"><img id="IDCCAToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Interfaces</span></div><div id="IDCCASection" class="collapsibleSection"><table id="interfaceList" class="members"><tr><th class="iconColumn"> </th><th>Interface</th><th>Description of the</th></tr><tr><td><img src="../icons/pubInterface.gif" alt="Public Interface" title="Public Interface" /></td><td><a href="T_LogicalTaskTree_IJobProvider.htm">IJobProvider</a></td><td>
             Interface for suppliers of jobs for JobList nodes
                       in the LogicalTaskTree.
             </td></tr></table></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDNCA')" onkeypress="SectionExpandCollapse_CheckKey('IDNCA', event)" tabindex="0"><img id="IDNCAToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Delegate</span></div><div id="IDNCASection" class="collapsibleSection"><table id="delegateList" class="members"><tr><th class="iconColumn"> </th><th>Delegate</th><th>Description of the</th></tr><tr><td><img src="../icons/pubDelegate.gif" alt="Public Delegate" title="Public Delegate" /></td><td><a href="T_LogicalTaskTree_AllStatesChangedEventHandler.htm">AllStatesChangedEventHandler</a></td><td>
            Is called up when the processing status of a node has changed.
            </td></tr><tr><td><img src="../icons/pubDelegate.gif" alt="Public Delegate" title="Public Delegate" /></td><td><a href="T_LogicalTaskTree_ExceptionRaisedEventHandler.htm">ExceptionRaisedEventHandler</a></td><td>
            Is called if an exception has occurred.
            </td></tr><tr><td><img src="../icons/pubDelegate.gif" alt="Public Delegate" title="Public Delegate" /></td><td><a href="T_LogicalTaskTree_LastNotNullLogicalChangedEventHandler.htm">LastNotNullLogicalChangedEventHandler</a></td><td>
            Called when the logical result of a node has changed
            and is not equal to zero.
            </td></tr><tr><td><img src="../icons/pubDelegate.gif" alt="Public Delegate" title="Public Delegate" /></td><td><a href="T_LogicalTaskTree_LogicalChangedEventHandler.htm">LogicalChangedEventHandler</a></td><td>
            Is called when the logical result of a node has changed.
            </td></tr><tr><td><img src="../icons/pubDelegate.gif" alt="Public Delegate" title="Public Delegate" /></td><td><a href="T_LogicalTaskTree_LogicalStateChangedEventHandler.htm">LogicalStateChangedEventHandler</a></td><td>
            Is called up when the result status of a node has changed.
            </td></tr><tr><td><img src="../icons/pubDelegate.gif" alt="Public Delegate" title="Public Delegate" /></td><td><a href="T_LogicalTaskTree_NodeChangedEventHandler.htm">NodeChangedEventHandler</a></td><td>
            Is called when an exception is cleared.
            </td></tr><tr><td><img src="../icons/pubDelegate.gif" alt="Public Delegate" title="Public Delegate" /></td><td><a href="T_LogicalTaskTree_ResultChangedEventHandler.htm">ResultChangedEventHandler</a></td><td>
            Is called up when the result of a node has changed.
            Serves to optimise the calculation of the logical state of the superordinate
            restart the node.
            </td></tr><tr><td><img src="../icons/pubDelegate.gif" alt="Public Delegate" title="Public Delegate" /></td><td><a href="T_LogicalTaskTree_SnapshotRefreshedEventHandler.htm">SnapshotRefreshedEventHandler</a></td><td>
            Is called up when the snapshot has been refreshed.
            </td></tr><tr><td><img src="../icons/pubDelegate.gif" alt="Public Delegate" title="Public Delegate" /></td><td><a href="T_LogicalTaskTree_StateChangedEventHandler.htm">StateChangedEventHandler</a></td><td>
            Is called up when the processing status of a node has changed.
            </td></tr></table></div></div></div><div id="PageFooter" class="pageFooter">Naturally, many findings and developments are based on information freely available on the Internet. Any missing references to original authors are unintentional and will be updated as soon as they are reported.<p>Copyright © 2012-2024 Erik Nagel</p><div class="feedbackLink">Send comments about this feature to
        <a id="HT_MailLink" href="mailto:Vishnu%40reallyhuman.net?Subject=Vishnu%20-%20der%20logische%20Prozess-Monitor">Vishnu@reallyhuman.net</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback will be used to improve the documentation and the product. Your email address will not be used for any other purpose and will be deleted after the reported issue has been resolved. While working on the problem, you may be contacted by email for further details or clarification of your feedback. After the problem has been isolated, you may receive an email to resolve the issue.");
        </script></div></body></html>