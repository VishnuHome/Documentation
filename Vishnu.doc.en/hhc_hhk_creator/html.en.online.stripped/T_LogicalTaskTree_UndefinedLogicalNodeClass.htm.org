<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><meta name="Microsoft.Help.SelfBranded" content="true" /><meta name="Language" content="en-US" /><meta name="Microsoft.Help.Locale" content="en-US" /><meta name="Microsoft.Help.TopicLocale" content="en-US" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"></script><title>UndefinedLogicalNodeClass Class</title><meta name="Title" content="UndefinedLogicalNodeClass Klasse" /><meta name="Microsoft.Help.Id" content="T:LogicalTaskTree.UndefinedLogicalNodeClass" /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="System.Keywords" content="LogicalTaskTree.UndefinedLogicalNodeClass Klasse" /><meta name="System.Keywords" content="UndefinedLogicalNodeClass Klasse" /><meta name="Microsoft.Help.F1" content="LogicalTaskTree.UndefinedLogicalNodeClass" /><meta name="Microsoft.Help.F1" content="UndefinedLogicalNodeClass" /><meta name="container" content="LogicalTaskTree" /><meta name="file" content="T_LogicalTaskTree_UndefinedLogicalNodeClass" /><meta name="guid" content="T_LogicalTaskTree_UndefinedLogicalNodeClass" /><meta name="Description" content="Class definition for an undefined LogicalNode." /><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-3.5.1.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="SetDefaultLanguage('cs');"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/ad9ee8b6-c68c-47ec-9584-d85046eb3137.htm" title="Vishnu - the logical process monitor" tocid="roottoc">Vishnu - the logical process monitor</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/R_Project_Vishnu_doc_de.htm" title="Vishnu - technische Dokumentation" tocid="R_Project_Vishnu_doc_de">Vishnu - technical Documentation</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/N_LogicalTaskTree.htm" title="LogicalTaskTree" tocid="N_LogicalTaskTree">LogicalTaskTree</a></div><div class="toclevel1 current" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/T_LogicalTaskTree_UndefinedLogicalNodeClass.htm" title="UndefinedLogicalNodeClass Klasse" tocid="T_LogicalTaskTree_UndefinedLogicalNodeClass">UndefinedLogicalNodeClass Class</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_UndefinedLogicalNodeClass__ctor.htm" title="UndefinedLogicalNodeClass Konstruktor" tocid="M_LogicalTaskTree_UndefinedLogicalNodeClass__ctor">UndefinedLogicalNodeClass constructor</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Properties_T_LogicalTaskTree_UndefinedLogicalNodeClass.htm" title="UndefinedLogicalNodeClass Eigenschaften" tocid="Properties_T_LogicalTaskTree_UndefinedLogicalNodeClass">UndefinedLogicalNodeClass Properties</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Methods_T_LogicalTaskTree_UndefinedLogicalNodeClass.htm" title="UndefinedLogicalNodeClass Methoden" tocid="Methods_T_LogicalTaskTree_UndefinedLogicalNodeClass">UndefinedLogicalNodeClass methods</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/Events_T_LogicalTaskTree_UndefinedLogicalNodeClass.htm" title="UndefinedLogicalNodeClass Ereignisse" tocid="Events_T_LogicalTaskTree_UndefinedLogicalNodeClass">UndefinedLogicalNodeClass events</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Fields_T_LogicalTaskTree_UndefinedLogicalNodeClass.htm" title="UndefinedLogicalNodeClass Felder" tocid="Fields_T_LogicalTaskTree_UndefinedLogicalNodeClass">UndefinedLogicalNodeClass fields</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div id="TopicContent" class="topicContent"><table class="titleTable"><tr><td class="logoColumn"><img src="../icons/Vishnu_64.png" /></td><td class="titleColumn"><h1>Undefined<wbr />Logical<wbr />Node<wbr />Class Class</h1></td></tr></table><div class="summary">
            Class definition for an undefined LogicalNode.
            Replaces null to avoid the miserable null warnings when using LogicalNodes
            which it is ensured that at the time of use they are not
            are not equal to zero, but are not yet instantiated in the constructor in a meaningful way.
            could be realised.
            For any subsequent null queries, null must be replaced by the static instance
            'UndefinedLogicalNode' must be replaced.
            </div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDDA')" onkeypress="SectionExpandCollapse_CheckKey('IDDA', event)" tabindex="0"><img id="IDDAToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Inheritance hierarchy</span></div><div id="IDDASection" class="collapsibleSection"><a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">System<span id="LST7B68A3F8_0" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>Object</a><br />  <a href="T_NetEti_Globals_GenericTree_1.htm">NetEti.Globals<span id="LST7B68A3F8_1" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>GenericTree</a><span id="LST7B68A3F8_2" data-languageSpecificText="cpp=&lt;|cs=&lt;|fs=&lt;|vb=(Of |nu=("></span><a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a><span id="LST7B68A3F8_3" data-languageSpecificText="cpp=&gt;|cs=&gt;|fs=&gt;|vb=)|nu=)"></span><br />    <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalTaskTree<span id="LST7B68A3F8_4" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>LogicalNode</a><br />      <span class="selflink">LogicalTaskTree<span id="LST7B68A3F8_5" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>UndefinedLogicalNodeClass</span><br /></div><br /><strong>Namespace:</strong> <a href="N_LogicalTaskTree.htm">LogicalTaskTree</a><br /><strong>Assembly:</strong> LogicalTaskTree (in LogicalTaskTree.dll) Version: 1.0.0+df0404e911d6c38eaed3bb1bb1acfc482d417643<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDB')" onkeypress="SectionExpandCollapse_CheckKey('IDB', event)" tabindex="0"><img id="IDBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="IDBSection" class="collapsibleSection"><div id="IDAB" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDAB_tab1" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','cs','1','4');return false;">C#</a></div><div id="IDAB_tab2" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','vb','2','4');return false;">VB</a></div><div id="IDAB_tab3" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','cpp','3','4');return false;">C++</a></div><div id="IDAB_tab4" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','fs','4','4');return false;">F#</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDAB_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDAB');return false;" title="Copy">Copy</a></div></div><div id="IDAB_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">UndefinedLogicalNodeClass</span> : <span class="identifier">LogicalNode</span>,
	 
	<span class="identifier">IUndefinedElement</span></pre></div><div id="IDAB_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Class</span> <span class="identifier">UndefinedLogicalNodeClass</span>
	<span class="keyword">Inherits</span> <span class="identifier">LogicalNode</span>
	<span class="keyword">Implements</span> <span class="identifier">IUndefinedElement</span></pre></div><div id="IDAB_code_Div3" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">ref class</span> <span class="identifier">UndefinedLogicalNodeClass</span> : <span class="keyword">public</span> <span class="identifier">LogicalNode</span>,
	 
	<span class="identifier">IUndefinedElement</span></pre></div><div id="IDAB_code_Div4" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">type</span> <span class="identifier">UndefinedLogicalNodeClass</span> = 
    <span class="keyword">class</span>
        <span class="keyword">inherit</span> <span class="identifier">LogicalNode</span>
        <span class="keyword">interface</span> <span class="identifier">IUndefinedElement</span>
    <span class="keyword">end</span></pre></div></div></div></div><p>The <span class="selflink">UndefinedLogicalNodeClass</span> Type exposes the following members.</p><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID0FC0FA')" onkeypress="SectionExpandCollapse_CheckKey('ID0FC0FA', event)" tabindex="0"><img id="ID0FC0FAToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Constructors</span></div><div id="ID0FC0FASection" class="collapsibleSection"><table id="ConstructorList" class="members"><tr><th class="iconColumn"> </th><th>Name</th><th>Description of the</th></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_UndefinedLogicalNodeClass__ctor.htm">UndefinedLogicalNodeClass</a></td><td>
            Standard constructor.
            </td></tr></table><a href="#PageHeader">Back to the top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID0JC0FA')" onkeypress="SectionExpandCollapse_CheckKey('ID0JC0FA', event)" tabindex="0"><img id="ID0JC0FAToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Properties</span></div><div id="ID0JC0FASection" class="collapsibleSection"><table id="PropertyList" class="members"><tr><th class="iconColumn"> </th><th>Name</th><th>Description of the</th></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_BreakWithResult.htm">BreakWithResult</a></td><td>
            A subtree may already have a clear logical result,
            before all the children have finished their processing.
            If BreakWithResult=True, these are then cancelled if the
            no triggers are active on the branch in question.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_CanTreeStart.htm">CanTreeStart</a></td><td>
            Indicates whether a (partial) tree can be started, i.e. that a
            node with children all its children can be started (recursively)
            or in the case of an end node (checker) without children this can be started itself.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_NetEti_Globals_GenericTree_1_Children.htm">Children</a></td><td>
            List of the children of a node.
            <br />(Inherited from <a href="T_NetEti_Globals_GenericTree_1.htm">GenericTree<span id="LST7B68A3F8_6" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST7B68A3F8_7" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_DebugMode.htm">DebugMode</a></td><td>
            Additional test outputs can be made for True.
            Default: False.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_Id.htm">Id</a></td><td>
            The unique identifier of the node.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_IdInfo.htm">IdInfo</a></td><td>
            The unique identifier of the node (identical to the property Id).
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_IdPath.htm">IdPath</a></td><td>
            Path to the node reduced to a chain of Ids separated by '/'.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_InitNodes.htm">InitNodes</a></td><td>
            If True, all nodes in the tree are reset when this node is started.
            Can be used for loops in controlled jobs.
            Default: false.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_IsActive.htm">IsActive</a></td><td>
            If true, the subtree/node is in an active (started) state.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_IsGlobal.htm">IsGlobal</a></td><td>
            If true, this node is created as a reference node if anywhere in the tree
            (not only in the current job) the name of the node has already been found.
            If false, the system only searches for nodes with the same name in the current job.
            Default: false.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_IsInSleepTime.htm">IsInSleepTime</a></td><td>
            Returns true if a rest period defined by the user is currently in progress.
            for Vishnu actors (checkers) is running.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_IsInSnapshot.htm">IsInSnapshot</a></td><td>
            With True, this LogicalNode is located within a snapshot.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_IsSnapshotDummy.htm">IsSnapshotDummy</a></td><td>
            With True, this node is only used for display and does not allow any other functions.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_LastExecutingTreeEvent.htm">LastExecutingTreeEvent</a></td><td>
            The last triggering TreeEvent (for TreeEvent-triggered nodes)
            or zero.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_LastLogical.htm">LastLogical</a></td><td>
            The last logical state of a node.
            For accessing the states of child nodes without
            re-initiate the determination of the statuses.
            Reduces the processor load.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_LastLogicalState.htm">LastLogicalState</a></td><td>
            The last result state of a node.
            For accessing the states of child nodes without
            re-initiate the determination of the statuses.
            Reduces the processor load.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_LastNotNullLogical.htm">LastNotNullLogical</a></td><td>
            Flag field for the last state of Logical that was not zero;
            is required so that workers are only started when
            the state of Logical has changed significantly and not every time,
            when the checker is working (Logical = zero).
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_UndefinedLogicalNodeClass_LastResult.htm">LastResult</a></td><td>
            Result for this node.
            Throws a NotImplementedException here.
            <br />(Overwrites <a href="P_LogicalTaskTree_LogicalNode_LastResult.htm">LogicalNode<span id="LST7B68A3F8_8" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>LastResult</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_LastRun.htm">LastRun</a></td><td>
            Time of the last start of the node.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_LastState.htm">LastState</a></td><td>
            The last processing state of a node.
            For accessing the states of child nodes without
            re-initiate the determination of the statuses.
            Reduces the processor load.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_Level.htm">Level</a></td><td>
            The hierarchy level of the node.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_LevelInfo.htm">LevelInfo</a></td><td>
            The hierarchy level of the node (identical to the property level).
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_LockName.htm">LockName</a></td><td>
            Optional name used for global locking.
            Is used if ThreadLocked is set.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_Logger.htm">Logger</a></td><td>
            An optional logger that is activated for certain events
            is called or null.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_UndefinedLogicalNodeClass_Logical.htm">Logical</a></td><td>
            The logical state of a node; this is ultimately what the
            entire processing.
            Throws a NotImplementedException here.
            <br />(Overwrites <a href="P_LogicalTaskTree_LogicalNode_Logical.htm">LogicalNode<span id="LST7B68A3F8_9" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>Logical</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_LogicalState.htm">LogicalState</a></td><td>
            The result state of the node:
            None, Start, Done, Fault, Timeout, UserAbort.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_Name.htm">Name</a></td><td>
            "Human-friendly" representation of the node.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_NameId.htm">NameId</a></td><td>
            Combination of name and Id of the node.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_NameInfo.htm">NameInfo</a></td><td>
            "Human-friendly" representation of the node.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_NextRun.htm">NextRun</a></td><td>
            Time of the next start of the node (if known) or DateTime.MinValue.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_NextRunInfo.htm">NextRunInfo</a></td><td>
            Info text about the next start of the node (if known) or null.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_NodeType.htm">NodeType</a></td><td>
            The node type:
              None, NodeConnector, ValueModifier, JobConnector, Constant, Checker, NodeList, JobList, Snapshot.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_ParentView.htm">ParentView</a></td><td>
            The parent control in which this node is displayed.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_Path.htm">Path</a></td><td>
            The path to the node consisting of a chain of NameIds separated by '/':
            NameId is Name + "(" + Id + ")" for nodes with Name != null,
                   only Id with name = null.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_PathInfo.htm">PathInfo</a></td><td>
            The path to the node (identical to the Path property).
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_ReferencedNodeId.htm">ReferencedNodeId</a></td><td>
            Id of an originally referenced node or null.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_ReferencedNodeName.htm">ReferencedNodeName</a></td><td>
            Name of an originally referenced node or null.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_ReferencedNodePath.htm">ReferencedNodePath</a></td><td>
            Path of an originally referenced node or null.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_UndefinedLogicalNodeClass_SingleNodes.htm">SingleNodes</a></td><td>
            Number of SingleNodes (ultimately checkers) at the end of a (sub)tree.
            Throws a NotImplementedException here.
            <br />(Overwrites <a href="P_LogicalTaskTree_LogicalNode_SingleNodes.htm">LogicalNode<span id="LST7B68A3F8_10" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>SingleNodes</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_UndefinedLogicalNodeClass_SingleNodesFinished.htm">SingleNodesFinished</a></td><td>
            Percentage value for the proportion of terminated SingleNodes
            (ultimately checker) at the end of a (partial) tree.
            Throws a NotImplementedException here.
            <br />(Overwrites <a href="P_LogicalTaskTree_LogicalNode_SingleNodesFinished.htm">LogicalNode<span id="LST7B68A3F8_11" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>SingleNodesFinished</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_SleepTimeFrom.htm">SleepTimeFrom</a></td><td>
            The start of a possible rest period.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_SleepTimeTo.htm">SleepTimeTo</a></td><td>
            The end of a possible rest period.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_StartCollapsed.htm">StartCollapsed</a></td><td>
            With True, the job is displayed collapsed at startup if the UI supports this.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_UndefinedLogicalNodeClass_State.htm">State</a></td><td>
            The processing status of a node:
            None, Waiting, Working, Finished, Triggered, Ready (= Finished | Triggered), CanStart (= None|Ready), Busy (= Waiting | Working).
            Throws a NotImplementedException here.
            <br />(Overwrites <a href="P_LogicalTaskTree_LogicalNode_State.htm">LogicalNode<span id="LST7B68A3F8_12" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>State</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_ThreadLocked.htm">ThreadLocked</a></td><td>
            If True, each thread is locked via the class so that
            non-thread-safe checkers are serialized;
            Default: False;
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_TreeParams.htm">TreeParams</a></td><td>
            Additional parameters, some that apply to the entire tree
            validity and some node-specific parameters
            or zero.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_Trigger.htm">Trigger</a></td><td>
            An optional trigger that calls the job repeatedly
            or null (internally overrides BreakWithResult).
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_TriggeredRunDelay.htm">TriggeredRunDelay</a></td><td>
            Delays the start of a node (and InitNodes).
            Can be used for loops in controlled jobs.
            Default: 0 (milliseconds).
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_TypeInfo.htm">TypeInfo</a></td><td>
            The node type:
              None, NodeConnector, ValueModifier, Constant, Checker.
            <a href="T_Vishnu_Interchange_NodeTypes.htm">NodeTypes</a><br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_UndefinedLogicalNodeClass_UserControlPath.htm">UserControlPath</a></td><td>
            The path to the UserControl currently to be loaded dynamically.
            Throws a NotImplementedException here.
            <br />(Overwrites <a href="P_LogicalTaskTree_LogicalNode_UserControlPath.htm">LogicalNode<span id="LST7B68A3F8_13" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>UserControlPath</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Property" title="Public Property" /></td><td><a href="P_LogicalTaskTree_LogicalNode_WorkersState.htm">WorkersState</a></td><td>
            A collective status for all assigned workers.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr></table><a href="#PageHeader">Back to the top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4FA')" onkeypress="SectionExpandCollapse_CheckKey('ID4FA', event)" tabindex="0"><img id="ID4FAToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Methods</span></div><div id="ID4FASection" class="collapsibleSection"><table id="MethodList" class="members"><tr><th class="iconColumn"> </th><th>Name</th><th>Description of the</th></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_Break.htm">Break</a></td><td>
            If necessary, log out of the trigger,
            Cancel the task via CancellationToken, set status.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_CanControlledTreeStart.htm">CanControlledTreeStart</a></td><td>
            Specifies whether a (sub)tree can be started in a JobController, i.e. that
            the node and all its parents can be started (recursively).
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_NetEti_Globals_GenericTree_1_Climb2Top.htm">Climb2Top</a></td><td>
            Shimmies up through the tree (up to the root)
            and calls up the action for each node.
            <br />(Inherited from <a href="T_NetEti_Globals_GenericTree_1.htm">GenericTree<span id="LST7B68A3F8_14" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST7B68A3F8_15" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_UndefinedLogicalNodeClass_DoRun.htm">DoRun</a></td><td>
            The actual, node type-specific processing.
            Throws a NotImplementedException here.
            <br />(Overwrites <a href="M_LogicalTaskTree_LogicalNode_DoRun.htm">LogicalNode<span id="LST7B68A3F8_16" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>DoRun(TreeEvent)</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_Equals.htm">Equals</a></td><td>
            Compares the content of this LogicalNode according to logical aspects
            with the content of a transferred LogicalNode.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_FindEventTriggers.htm">FindEventTriggers</a></td><td>
            Searches for relevant triggers for an event.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_FindNodeById.htm">FindNodeById</a></td><td>
            A derivative of LogicalNode can use this to create its own thread
            cause it to be cancelled.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_GetEnvironment.htm">GetEnvironment</a></td><td>
            Returns the ConcurrentDictionary Environment as simple Dictionary Results.
            Use the internal routine GetResultsFromResultList().
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_GetHashCode.htm">GetHashCode</a></td><td>
            Generates a hash code for this LogicalNode.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_GetlastEventSourceIfIsTreeEventTriggered.htm">GetlastEventSourceIfIsTreeEventTriggered</a></td><td>
            Updates the values for TreeEvent-triggered nodes
            of the node before continuing to work with them.
            Is important in situations in which either the knot is the
            triggering TreeEvent has missed (at program start)
            or another TreeEvent was faster and led to a
            reaction, which leads to the current values of the node
            is required (JobSnapshotTrigger).
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_GetResults.htm">GetResults</a></td><td>
            Returns the ConcurrentDictionary ResultList as a simple Dictionary Results.
            Use the internal routine GetResultsFromResultList().
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_GetTopRootJobList.htm">GetTopRootJobList</a></td><td>
            Returns the topmost Root-JobList valid for the node.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_InitFromNode.htm">InitFromNode</a></td><td>
            Sets certain properties to the values of the transferred LogicalNode "source". 
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_InitNode.htm">InitNode</a></td><td>
            Resets the node to the start settings.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_Invalidate.htm">Invalidate</a></td><td>
            Deletes internal caches so that everything is re-evaluated.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_MarkThreadAsInvalidIfActive.htm">MarkThreadAsInvalidIfActive</a></td><td>
            Adds thread to the list of invalid threads,
            if the thread is still active.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_OnLastNotNullLogicalChanged.htm">OnLastNotNullLogicalChanged</a></td><td>
            Triggers the NodeLastNotNullLogicalChanged event.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_OnNodeBreaked.htm">OnNodeBreaked</a></td><td>
            Triggers the NodeBreaked event.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_OnNodeProgressChanged.htm">OnNodeProgressChanged</a></td><td>
            Triggers the NodeProgressChanged event.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_OnNodeProgressFinished.htm">OnNodeProgressFinished</a></td><td>
            Triggers the NodeProgressFinished event.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_OnNodeProgressStarted.htm">OnNodeProgressStarted</a></td><td>
            Triggers the NodeStarted event.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_OnNodeWorkersStateChanged.htm">OnNodeWorkersStateChanged</a></td><td>
            Triggers the NodeWorkersStateChanged event.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_ProcessTreeEvent.htm">ProcessTreeEvent</a></td><td>
            Triggers further processing for the current TreeEvent (trigger, logger).
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_RaiseNodeLastNotNullLogicalChangedWithTreeEvent.htm">RaiseNodeLastNotNullLogicalChangedWithTreeEvent</a></td><td>
            Triggers the TreeEvent "AnyLastNotNullLogicalHasChanged" and calls "OnNodeLastNotNullLogicalChanged".
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_RaiseNodeLogicalChanged.htm">RaiseNodeLogicalChanged</a></td><td>
            Encapsulates the call of the non-inheritable NodeLogicalChanged event for
            for the derived classes NodeList and JobList.
            This routine ultimately forwards the event to the UI via NodeLogicalChanged.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_Refresh.htm">Refresh</a></td><td>
            Ensures immediate re-evaluation of all cashed statuses.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_RegisterTriggeredNodes.htm">RegisterTriggeredNodes</a></td><td>
            Registers all triggered nodes of a subtree with their triggers.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_Reload.htm">Reload</a></td><td>
            Is called up when the subtree is to be reloaded.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_ResetAllTreeEventTriggeringNodes.htm">ResetAllTreeEventTriggeringNodes</a></td><td>
            Resets all nodes in the subtree on which others depend via TreeEvent.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_ResetAllTreeNodes.htm">ResetAllTreeNodes</a></td><td>
            Resets all nodes in the entire tree.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_ResetPartTreeNodes.htm">ResetPartTreeNodes</a></td><td>
            Resets all nodes in the subtree from branch.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_Run.htm">Run</a></td><td>
            Checks whether a node can be started and then starts the node, its trigger,
            or both (via StartNodeOrTrigger).
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_SetTreeCollapsed.htm">SetTreeCollapsed</a></td><td>
            Sets the StartCollapsed property for an entire (sub)tree.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_SetWorkersState.htm">SetWorkersState</a></td><td>
            Sets a common (combined) NodeWorkerState 'WorkersState'
            for all NodeWorkers.
            Returns NodeWorkersState.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_ThreadUpdateLastLogical.htm">ThreadUpdateLastLogical</a></td><td>
            Sets threadsafe LastLogical.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_ThreadUpdateLastLogicalState.htm">ThreadUpdateLastLogicalState</a></td><td>
            Sets threadsafe LastLogicalState.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_ThreadUpdateLastState.htm">ThreadUpdateLastState</a></td><td>
            Sets threadsafe LastState.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_ToString.htm">ToString</a></td><td>
            Overridden ToString() method.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_NetEti_Globals_GenericTree_1_Traverse.htm">Traverse(Action<span id="LST7B68A3F8_17" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, T<span id="LST7B68A3F8_18" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Goes recursively through the tree and calls the action for each node.
            <br />(Inherited from <a href="T_NetEti_Globals_GenericTree_1.htm">GenericTree<span id="LST7B68A3F8_19" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST7B68A3F8_20" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_NetEti_Globals_GenericTree_1_Traverse_1.htm">Traverse(Func<span id="LST7B68A3F8_21" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, T, Object, Object<span id="LST7B68A3F8_22" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Goes recursively through the tree and calls the action for each node.
            <br />(Inherited from <a href="T_NetEti_Globals_GenericTree_1.htm">GenericTree<span id="LST7B68A3F8_23" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST7B68A3F8_24" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_NetEti_Globals_GenericTree_1_Traverse_2.htm">Traverse(Int32, Action<span id="LST7B68A3F8_25" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, T<span id="LST7B68A3F8_26" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Recursive auxiliary routine for the public routine 'Traverse'.
            <br />(Inherited from <a href="T_NetEti_Globals_GenericTree_1.htm">GenericTree<span id="LST7B68A3F8_27" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST7B68A3F8_28" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_NetEti_Globals_GenericTree_1_Traverse_3.htm">Traverse(Int32, Func<span id="LST7B68A3F8_29" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, T, Object, Object<span id="LST7B68A3F8_30" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Object)</a></td><td>
            Recursive auxiliary routine for the public routine 'Traverse'.
            <br />(Inherited from <a href="T_NetEti_Globals_GenericTree_1.htm">GenericTree<span id="LST7B68A3F8_31" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST7B68A3F8_32" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Method" title="Protected Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_UnMarkThreadAsInvalid.htm">UnMarkThreadAsInvalid</a></td><td>
            Removes thread from the list of invalid threads.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_UnregisterTriggeredNode.htm">UnregisterTriggeredNode</a></td><td>
            Sets the subtree to non-startable.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_UserBreak.htm">UserBreak</a></td><td>
            Is called up if the subtree has been deliberately stopped by the user.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Method" title="Public Method" /></td><td><a href="M_LogicalTaskTree_LogicalNode_UserRun.htm">UserRun</a></td><td>
            Starts the processing of this node after a start
            by the user. Gives the information that the start
            by the user in the TreeEvent to Run.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr></table><a href="#PageHeader">Back to the top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDAFA')" onkeypress="SectionExpandCollapse_CheckKey('IDAFA', event)" tabindex="0"><img id="IDAFAToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Events</span></div><div id="IDAFASection" class="collapsibleSection"><table id="EventList" class="members"><tr><th class="iconColumn"> </th><th>Name</th><th>Description of the</th></tr><tr><td><img src="../icons/pubEvent.gif" alt="Public Event" title="Public Event" /></td><td><a href="E_LogicalTaskTree_LogicalNode_ExceptionCleared.htm">ExceptionCleared</a></td><td>
            Is called when an exception is cleared.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubEvent.gif" alt="Public Event" title="Public Event" /></td><td><a href="E_LogicalTaskTree_LogicalNode_ExceptionRaised.htm">ExceptionRaised</a></td><td>
            Is called if an exception has occurred.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubEvent.gif" alt="Public Event" title="Public Event" /></td><td><a href="E_LogicalTaskTree_LogicalNode_NodeLastNotNullLogicalChanged.htm">NodeLastNotNullLogicalChanged</a></td><td>
            Called when the logical result of a node has changed
            and is not equal to zero.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubEvent.gif" alt="Public Event" title="Public Event" /></td><td><a href="E_LogicalTaskTree_LogicalNode_NodeLogicalChanged.htm">NodeLogicalChanged</a></td><td>
            Is called when the logical result of a node has changed.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubEvent.gif" alt="Public Event" title="Public Event" /></td><td><a href="E_LogicalTaskTree_LogicalNode_NodeProgressChanged.htm">NodeProgressChanged</a></td><td>
            Is called up when the processing progress of a node has changed.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubEvent.gif" alt="Public Event" title="Public Event" /></td><td><a href="E_LogicalTaskTree_LogicalNode_NodeProgressFinished.htm">NodeProgressFinished</a></td><td>
            Is called when the processing of a node has been completed (regardless of the result).
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubEvent.gif" alt="Public Event" title="Public Event" /></td><td><a href="E_LogicalTaskTree_LogicalNode_NodeProgressStarted.htm">NodeProgressStarted</a></td><td>
            Is called up when a node has been started.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubEvent.gif" alt="Public Event" title="Public Event" /></td><td><a href="E_LogicalTaskTree_LogicalNode_NodeResultChanged.htm">NodeResultChanged</a></td><td>
            Is called up when the result of a node has changed.
            Serves to optimise the calculation of the logical state of the superordinate
            restart the node.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubEvent.gif" alt="Public Event" title="Public Event" /></td><td><a href="E_LogicalTaskTree_LogicalNode_NodeStateChanged.htm">NodeStateChanged</a></td><td>
            Is called up when the processing status of a node has changed.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubEvent.gif" alt="Public Event" title="Public Event" /></td><td><a href="E_LogicalTaskTree_LogicalNode_NodeWorkersStateChanged.htm">NodeWorkersStateChanged</a></td><td>
            Called when the overall status of the node assigned to the
            assigned worker has changed.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubEvent.gif" alt="Public Event" title="Public Event" /></td><td><a href="E_LogicalTaskTree_LogicalNode_PropertiesChanged.htm">PropertiesChanged</a></td><td>
            This event from IVishnuNode.INotifyPropertiesChanged can be subscribed to by LogicalNodeViewmodel.
            This receives a string list with property names via the transferred PropertiesChangedEventArgs
            and can in turn inform the UI via INotifyProperyChanged.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr></table><a href="#PageHeader">Back to the top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDLFA')" onkeypress="SectionExpandCollapse_CheckKey('IDLFA', event)" tabindex="0"><img id="IDLFAToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Fields</span></div><div id="IDLFASection" class="collapsibleSection"><table id="FieldList" class="members"><tr><th class="iconColumn"> </th><th>Name</th><th>Description of the</th></tr><tr><td><img src="../icons/protField.gif" alt="Protected Field" title="Protected Field" /></td><td><a href="F_LogicalTaskTree_LogicalNode__lastRun.htm">_lastRun</a></td><td>
            Time of the last start of the node (internal field).
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protField.gif" alt="Protected Field" title="Protected Field" /></td><td><a href="F_LogicalTaskTree_LogicalNode__nextRunInfo.htm">_nextRunInfo</a></td><td>
            Info text about the next start of the node (if known) or null (internal field).
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protField.gif" alt="Protected Field" title="Protected Field" /></td><td><a href="F_LogicalTaskTree_LogicalNode__parentViewLocker.htm">_parentViewLocker</a></td><td>
            Used to block thread-safe access to ParentView.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protField.gif" alt="Protected Field" title="Protected Field" /></td><td><a href="F_LogicalTaskTree_LogicalNode_AppSettings.htm">AppSettings</a></td><td>
            Application settings.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protField.gif" alt="Protected Field" title="Protected Field" /></td><td><a href="F_LogicalTaskTree_LogicalNode_CancellationToken.htm">CancellationToken</a></td><td>
            The CancellationTokenSource can be used to set this token to
            cancellation, which in this node leads to the call
            of the cancelNotification routine.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protField.gif" alt="Protected Field" title="Protected Field" /></td><td><a href="F_LogicalTaskTree_LogicalNode_ExceptionLocker.htm">ExceptionLocker</a></td><td>
            Used to temporarily block exceptions.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protField.gif" alt="Protected Field" title="Protected Field" /></td><td><a href="F_LogicalTaskTree_LogicalNode_IsRunRequired.htm">IsRunRequired</a></td><td>
            True: the node should be started.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protField.gif" alt="Protected Field" title="Protected Field" /></td><td><a href="F_LogicalTaskTree_LogicalNode_IsTaskActiveOrScheduled.htm">IsTaskActiveOrScheduled</a></td><td>
            True: the node is currently active or controlled by a timer.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubField.gif" alt="Public Field" title="Public Field" /></td><td><a href="F_LogicalTaskTree_LogicalNode_LastExceptions.htm">LastExceptions</a></td><td>
            Exception that occurred during the last run or null;
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protField.gif" alt="Protected Field" title="Protected Field" /></td><td><a href="F_LogicalTaskTree_LogicalNode_LastLogicalLocker.htm">LastLogicalLocker</a></td><td>
            Used to temporarily block LastLogical.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protField.gif" alt="Protected Field" title="Protected Field" /></td><td><a href="F_LogicalTaskTree_LogicalNode_LastLogicalStateLocker.htm">LastLogicalStateLocker</a></td><td>
            Used to temporarily lock LastLogicalState.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protField.gif" alt="Protected Field" title="Protected Field" /></td><td><a href="F_LogicalTaskTree_LogicalNode_LastStateLocker.htm">LastStateLocker</a></td><td>
            Used to temporarily block LastState.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubField.gif" alt="Public Field" title="Public Field" /></td><td><a href="F_NetEti_Globals_GenericTree_1_Mother.htm">Mother</a></td><td>
            The owner of the node.
            <br />(Inherited from <a href="T_NetEti_Globals_GenericTree_1.htm">GenericTree<span id="LST7B68A3F8_33" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST7B68A3F8_34" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>)</td></tr><tr><td><img src="../icons/protField.gif" alt="Protected Field" title="Protected Field" /></td><td><a href="F_LogicalTaskTree_LogicalNode_ResultLocker.htm">ResultLocker</a></td><td>
            Used to temporarily block results.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubField.gif" alt="Public Field" title="Public Field" /></td><td><a href="F_LogicalTaskTree_LogicalNode_RootJobList.htm">RootJobList</a></td><td>
            Next higher JobList for this node or the node itself,
            if it is a JobList.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protField.gif" alt="Protected Field" title="Protected Field" /></td><td><a href="F_LogicalTaskTree_LogicalNode_SubLastNotNullLogicalLocker.htm">SubLastNotNullLogicalLocker</a></td><td>
            Used to temporarily block LastLogical.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubField.gif" alt="Public Field" title="Public Field" /></td><td><a href="F_LogicalTaskTree_LogicalNode_TreeRootJobList.htm">TreeRootJobList</a></td><td>
            Top JobList.
            <br />(Inherited from <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubField.gif" alt="Public Field" title="Public Field" /><img src="../icons/Static.gif" alt="Static Member" title="Static Member" /></td><td><a href="F_LogicalTaskTree_UndefinedLogicalNodeClass_UndefinedLogicalNode.htm">UndefinedLogicalNode</a></td><td>
            Static instance for an undefined LogicalNode.
            Replaces null to avoid the miserable null warnings when using LogicalNodes
            which it is ensured that at the time of use they are not
            are not equal to zero, but are not yet instantiated in the constructor in a meaningful way.
            could be realised.
            For any subsequent null queries, null must be replaced by this instance.
            It can then be checked for 'is IUndefinedElement' if necessary.
            </td></tr></table><a href="#PageHeader">Back to the top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('seeAlso')" onkeypress="SectionExpandCollapse_CheckKey('seeAlso', event)" tabindex="0"><img id="seeAlsoToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See also</span></div><div id="seeAlsoSection" class="collapsibleSection"><h4>Reference</h4><div><a href="N_LogicalTaskTree.htm">LogicalTaskTree namespace</a></div></div></div></div><div id="PageFooter" class="pageFooter">Naturally, many findings and developments are based on information freely available on the Internet. Any missing references to original authors are unintentional and will be updated as soon as they are reported.<p>Copyright © 2012-2024 Erik Nagel</p><div class="feedbackLink">Send comments about this feature to
        <a id="HT_MailLink" href="mailto:Vishnu%40reallyhuman.net?Subject=Vishnu%20-%20der%20logische%20Prozess-Monitor">Vishnu@reallyhuman.net</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback will be used to improve the documentation and the product. Your email address will not be used for any other purpose and will be deleted after the reported issue has been resolved. While working on the problem, you may be contacted by email for further details or clarification of your feedback. After the problem has been isolated, you may receive an email to resolve the issue.");
        </script></div></body></html>