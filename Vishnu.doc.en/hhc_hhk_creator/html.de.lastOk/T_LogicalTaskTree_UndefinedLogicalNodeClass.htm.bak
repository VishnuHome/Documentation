<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><meta name="Microsoft.Help.SelfBranded" content="true" /><meta name="Language" content="de-de" /><meta name="Microsoft.Help.Locale" content="de-de" /><meta name="Microsoft.Help.TopicLocale" content="de-de" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-de-DE.css" /><script type="text/javascript" src="../scripts/branding.js"></script><title>UndefinedLogicalNodeClass Klasse</title><meta name="Title" content="UndefinedLogicalNodeClass Klasse" /><meta name="Microsoft.Help.Id" content="T:LogicalTaskTree.UndefinedLogicalNodeClass" /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="System.Keywords" content="LogicalTaskTree.UndefinedLogicalNodeClass Klasse" /><meta name="System.Keywords" content="UndefinedLogicalNodeClass Klasse" /><meta name="Microsoft.Help.F1" content="LogicalTaskTree.UndefinedLogicalNodeClass" /><meta name="Microsoft.Help.F1" content="UndefinedLogicalNodeClass" /><meta name="container" content="LogicalTaskTree" /><meta name="file" content="T_LogicalTaskTree_UndefinedLogicalNodeClass" /><meta name="guid" content="T_LogicalTaskTree_UndefinedLogicalNodeClass" /><meta name="Description" content="Klassendefinition für eine undefinierte LogicalNode." /><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-3.5.1.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="SetDefaultLanguage('cs');"><input type="hidden" id="userDataCache" class="userDataStyle" /><div id="PageHeader" class="pageHeader">Vishnu - der logische Prozess-Monitor<form id="SearchForm" method="get" action="#" onsubmit="TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/ad9ee8b6-c68c-47ec-9584-d85046eb3137.htm" title="Vishnu - der logische Prozess-Monitor" tocid="roottoc">Vishnu - der logische Prozess-Monitor</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/R_Project_Vishnu_doc_de.htm" title="Vishnu - technische Dokumentation" tocid="R_Project_Vishnu_doc_de">Vishnu - technische Dokumentation</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/N_LogicalTaskTree.htm" title="LogicalTaskTree" tocid="N_LogicalTaskTree">LogicalTaskTree</a></div><div class="toclevel1 current" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/T_LogicalTaskTree_UndefinedLogicalNodeClass.htm" title="UndefinedLogicalNodeClass Klasse" tocid="T_LogicalTaskTree_UndefinedLogicalNodeClass">UndefinedLogicalNodeClass Klasse</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_UndefinedLogicalNodeClass__ctor.htm" title="UndefinedLogicalNodeClass Konstruktor" tocid="M_LogicalTaskTree_UndefinedLogicalNodeClass__ctor">UndefinedLogicalNodeClass Konstruktor</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Properties_T_LogicalTaskTree_UndefinedLogicalNodeClass.htm" title="UndefinedLogicalNodeClass Eigenschaften" tocid="Properties_T_LogicalTaskTree_UndefinedLogicalNodeClass">UndefinedLogicalNodeClass Eigenschaften</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Methods_T_LogicalTaskTree_UndefinedLogicalNodeClass.htm" title="UndefinedLogicalNodeClass Methoden" tocid="Methods_T_LogicalTaskTree_UndefinedLogicalNodeClass">UndefinedLogicalNodeClass Methoden</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/Events_T_LogicalTaskTree_UndefinedLogicalNodeClass.htm" title="UndefinedLogicalNodeClass Ereignisse" tocid="Events_T_LogicalTaskTree_UndefinedLogicalNodeClass">UndefinedLogicalNodeClass Ereignisse</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Fields_T_LogicalTaskTree_UndefinedLogicalNodeClass.htm" title="UndefinedLogicalNodeClass Felder" tocid="Fields_T_LogicalTaskTree_UndefinedLogicalNodeClass">UndefinedLogicalNodeClass Felder</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div id="TopicContent" class="topicContent"><table class="titleTable"><tr><td class="logoColumn"><img src="../icons/Vishnu_64.png" /></td><td class="titleColumn"><h1>Undefined<wbr />Logical<wbr />Node<wbr />Class Klasse</h1></td></tr></table><div class="summary">
            Klassendefinition für eine undefinierte LogicalNode.
            Ersetzt null, um die elenden null-Warnungen bei der Verwendung von LogicalNodes
            zu umgehen, bei denen sichergestellt ist, dass sie zum Zeitpunkt der Verwendung
            ungleich null sind, die aber im Konstruktor sonst noch nicht sinnvoll instanziiert
            werden könnten.
            Bei eventuellen späteren null-Abfragen muss null durch die statische Instanz
            'UndefinedLogicalNode' ersetzt werden.
            </div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDDA')" onkeypress="SectionExpandCollapse_CheckKey('IDDA', event)" tabindex="0"><img id="IDDAToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Vererbungshierarchie</span></div><div id="IDDASection" class="collapsibleSection"><a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">System<span id="LST7B68A3F8_0" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>Object</a><br />  <a href="T_NetEti_Globals_GenericTree_1.htm">NetEti.Globals<span id="LST7B68A3F8_1" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>GenericTree</a><span id="LST7B68A3F8_2" data-languageSpecificText="cpp=&lt;|cs=&lt;|fs=&lt;|vb=(Of |nu=("></span><a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a><span id="LST7B68A3F8_3" data-languageSpecificText="cpp=&gt;|cs=&gt;|fs=&gt;|vb=)|nu=)"></span><br />    <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalTaskTree<span id="LST7B68A3F8_4" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>LogicalNode</a><br />      <span class="selflink">LogicalTaskTree<span id="LST7B68A3F8_5" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>UndefinedLogicalNodeClass</span><br /></div><br /><strong>Namensraum:</strong> <a href="N_LogicalTaskTree.htm">LogicalTaskTree</a><br /><strong>Assembly:</strong> LogicalTaskTree (in LogicalTaskTree.dll) Version: 1.0.0+d75bac576d44afb64cfff79fd3665c8ca1172cbc<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDB')" onkeypress="SectionExpandCollapse_CheckKey('IDB', event)" tabindex="0"><img id="IDBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="IDBSection" class="collapsibleSection"><div id="IDAB" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDAB_tab1" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','cs','1','4');return false;">C#</a></div><div id="IDAB_tab2" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','vb','2','4');return false;">VB</a></div><div id="IDAB_tab3" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','cpp','3','4');return false;">C++</a></div><div id="IDAB_tab4" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','fs','4','4');return false;">F#</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDAB_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDAB');return false;" title="Copy">Copy</a></div></div><div id="IDAB_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">UndefinedLogicalNodeClass</span> : <span class="identifier">LogicalNode</span>, 
	<span class="identifier">IUndefinedElement</span></pre></div><div id="IDAB_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Class</span> <span class="identifier">UndefinedLogicalNodeClass</span>
	<span class="keyword">Inherits</span> <span class="identifier">LogicalNode</span>
	<span class="keyword">Implements</span> <span class="identifier">IUndefinedElement</span></pre></div><div id="IDAB_code_Div3" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">ref class</span> <span class="identifier">UndefinedLogicalNodeClass</span> : <span class="keyword">public</span> <span class="identifier">LogicalNode</span>, 
	<span class="identifier">IUndefinedElement</span></pre></div><div id="IDAB_code_Div4" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">type</span> <span class="identifier">UndefinedLogicalNodeClass</span> = 
    <span class="keyword">class</span>
        <span class="keyword">inherit</span> <span class="identifier">LogicalNode</span>
        <span class="keyword">interface</span> <span class="identifier">IUndefinedElement</span>
    <span class="keyword">end</span></pre></div></div></div></div><p>Der <span class="selflink">UndefinedLogicalNodeClass</span> Typ exponiert die folgenden Member.</p><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID0FC0FA')" onkeypress="SectionExpandCollapse_CheckKey('ID0FC0FA', event)" tabindex="0"><img id="ID0FC0FAToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Konstruktoren</span></div><div id="ID0FC0FASection" class="collapsibleSection"><table id="ConstructorList" class="members"><tr><th class="iconColumn"> </th><th>Name</th><th>Beschreibung</th></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_UndefinedLogicalNodeClass__ctor.htm">UndefinedLogicalNodeClass</a></td><td>
            Standard-Konstruktor.
            </td></tr></table><a href="#PageHeader">Zurück nach oben</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID0JC0FA')" onkeypress="SectionExpandCollapse_CheckKey('ID0JC0FA', event)" tabindex="0"><img id="ID0JC0FAToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Eigenschaften</span></div><div id="ID0JC0FASection" class="collapsibleSection"><table id="PropertyList" class="members"><tr><th class="iconColumn"> </th><th>Name</th><th>Beschreibung</th></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_BreakWithResult.htm">BreakWithResult</a></td><td>
            Ein Teilbaum kann u.U. schon ein eindeutiges logisches Ergebnis haben,
            bevor alle Kinder ihre Verarbeitung beendet haben.
            Bei BreakWithResult=True werden diese dann abgebochen, wenn in dem
            bereffenden Ast keine Trigger aktiv sind.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_CanTreeStart.htm">CanTreeStart</a></td><td>
            Gibt an, ob ein (Teil-)Baum gestartet werden kann, d.h. dass bei einem
            Knoten mit Kindern alle seine Kinder (rekursiv) gestartet werden können
            oder bei einem Endknoten (Checker) ohne Kinder dieser selbst gestartet werden kann.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_NetEti_Globals_GenericTree_1_Children.htm">Children</a></td><td>
            Liste der Kinder eines Knotens.
            <br />(Vererbt von <a href="T_NetEti_Globals_GenericTree_1.htm">GenericTree<span id="LST7B68A3F8_6" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST7B68A3F8_7" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_DebugMode.htm">DebugMode</a></td><td>
            Bei True können zusätzliche Testausgaben erfolgen.
            Default: False.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_Id.htm">Id</a></td><td>
            Die eindeutige Kennung des Knotens.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_IdInfo.htm">IdInfo</a></td><td>
            Die eindeutige Kennung des Knotens (identisch zur Property Id).
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_IdPath.htm">IdPath</a></td><td>
            Auf eine durch '/' getrennte Kette von Ids reduzierter Pfad zum Knoten.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_InitNodes.htm">InitNodes</a></td><td>
            Bei True werden alle Knoten im Tree resettet, wenn dieser Knoten gestartet wird.
            Kann für Loops in Controlled-Jobs verwendet werden.
            Default: false.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_IsActive.htm">IsActive</a></td><td>
            Bei true befindet sich der Teilbaum/Knoten in aktivem (gestartetem) Zustand.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_IsGlobal.htm">IsGlobal</a></td><td>
            Bei true wird dieser Knoten als Referenzknoten angelegt, wenn irgendwo im Tree
            (nicht nur im aktuellen Job) der Name des Knotens schon gefunden wurde.
            Bei false wird nur im aktuellen Job nach gleichnamigen Knoten gesucht.
            Default: false.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_IsInSleepTime.htm">IsInSleepTime</a></td><td>
            Returns true, wenn gerade eine vom User definierte Ruhezeit
            für Vishnu-Akteure (Checker) läuft.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_IsInSnapshot.htm">IsInSnapshot</a></td><td>
            Bei True befindet sich diese LogicalNode innerhalb eines Snapshots.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_IsSnapshotDummy.htm">IsSnapshotDummy</a></td><td>
            Bei True dient dieser Knoten nur zur Anzeige und lässt keine weiteren Funktionen zu.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_LastExecutingTreeEvent.htm">LastExecutingTreeEvent</a></td><td>
            Das letzte auslösende TreeEvent (bei TreeEvent-getriggerten Knoten)
            oder null.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_LastLogical.htm">LastLogical</a></td><td>
            Der letzte logische Zustand eines Knotens.
            Für den Zugriff auf Zustände von Child-Knoten, ohne dort
            die Ermittlung der Zustände erneut anzustoßen.
            Senkt die Prozessorlast.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_LastLogicalState.htm">LastLogicalState</a></td><td>
            Der letzte Ergebniszustand eines Knotens.
            Für den Zugriff auf Zustände von Child-Knoten, ohne dort
            die Ermittlung der Zustände erneut anzustoßen.
            Senkt die Prozessorlast.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_LastNotNullLogical.htm">LastNotNullLogical</a></td><td>
            Merkfeld für den letzten Zustand von Logical, der nicht null war;
            wird benötigt, damit Worker nur dann gestartet werden, wenn sich
            der Zustand von Logical signifikant geändert hat und nicht jedesmal,
            wenn der Checker arbeitet (Logical = null).
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_UndefinedLogicalNodeClass_LastResult.htm">LastResult</a></td><td>
            Result für diesen Knoten.
            Wirft hier eine NotImplementedException.
            <br />(Überschreibt <a href="P_LogicalTaskTree_LogicalNode_LastResult.htm">LogicalNode<span id="LST7B68A3F8_8" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>LastResult</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_LastRun.htm">LastRun</a></td><td>
            Zeitpunkt des letzten Starts des Knoten.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_LastState.htm">LastState</a></td><td>
            Der letzte Verarbeitungszustand eines Knotens.
            Für den Zugriff auf Zustände von Child-Knoten, ohne dort
            die Ermittlung der Zustände erneut anzustoßen.
            Senkt die Prozessorlast.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_Level.htm">Level</a></td><td>
            Die Hierarchie-Ebene des Knotens.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_LevelInfo.htm">LevelInfo</a></td><td>
            Die Hierarchie-Ebene des Knotens (identisch zur Property Level).
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_LockName.htm">LockName</a></td><td>
            Optionaler zum globalen Sperren verwendeter Name.
            Wird verwendet, wenn ThreadLocked gesetzt ist.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_Logger.htm">Logger</a></td><td>
            Ein optionaler Logger, der bei bestimmten Ereignissen
            aufgerufen wird oder null.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_UndefinedLogicalNodeClass_Logical.htm">Logical</a></td><td>
            Der logische Zustand eines Knotens; hierum geht es letztendlich in der
            gesamten Verarbeitung.
            Wirft hier eine NotImplementedException.
            <br />(Überschreibt <a href="P_LogicalTaskTree_LogicalNode_Logical.htm">LogicalNode<span id="LST7B68A3F8_9" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>Logical</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_LogicalState.htm">LogicalState</a></td><td>
            Der Ergebnis-Zustand des Knotens:
            None, Start, Done, Fault, Timeout, UserAbort.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_Name.htm">Name</a></td><td>
            "Menschenfreundliche" Darstellung des Knotens.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_NameId.htm">NameId</a></td><td>
            Kombination aus Name und Id des Knotens.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_NameInfo.htm">NameInfo</a></td><td>
            "Menschenfreundliche" Darstellung des Knotens.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_NextRun.htm">NextRun</a></td><td>
            Zeitpunkt des nächsten Starts des Knotens (wenn bekannt) oder DateTime.MinValue.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_NextRunInfo.htm">NextRunInfo</a></td><td>
            Info-Text über den nächsten Start des Knotens (wenn bekannt) oder null.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_NodeType.htm">NodeType</a></td><td>
            Der Knotentyp:
              None, NodeConnector, ValueModifier, JobConnector, Constant, Checker, NodeList, JobList, Snapshot.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_ParentView.htm">ParentView</a></td><td>
            Das Parent-Control, in dem dieser Knoten dargestellt wird.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_Path.htm">Path</a></td><td>
            Der Pfad zum Knoten bestehend aus einer durch '/' getrennte Kette von NameIds:
            NameId ist Name + "(" + Id + ")" bei Knoten mit Name != null,
                   nur Id bei Name = null.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_PathInfo.htm">PathInfo</a></td><td>
            Der Pfad zum Knoten (identisch zur Property Path).
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_ReferencedNodeId.htm">ReferencedNodeId</a></td><td>
            Id eines ursprünglich referenzierten Knotens oder null.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_ReferencedNodeName.htm">ReferencedNodeName</a></td><td>
            Name eines ursprünglich referenzierten Knotens oder null.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_ReferencedNodePath.htm">ReferencedNodePath</a></td><td>
            Pfad eines ursprünglich referenzierten Knotens oder null.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_UndefinedLogicalNodeClass_SingleNodes.htm">SingleNodes</a></td><td>
            Anzahl der SingleNodes (letztendlich Checker) am Ende eines (Teil-)Baums.
            Wirft hier eine NotImplementedException.
            <br />(Überschreibt <a href="P_LogicalTaskTree_LogicalNode_SingleNodes.htm">LogicalNode<span id="LST7B68A3F8_10" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>SingleNodes</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_UndefinedLogicalNodeClass_SingleNodesFinished.htm">SingleNodesFinished</a></td><td>
            Prozentwert für den Anteil der beendeten SingleNodes
            (letztendlich Checker) am Ende eines (Teil-)Baums.
            Wirft hier eine NotImplementedException.
            <br />(Überschreibt <a href="P_LogicalTaskTree_LogicalNode_SingleNodesFinished.htm">LogicalNode<span id="LST7B68A3F8_11" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>SingleNodesFinished</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_SleepTimeFrom.htm">SleepTimeFrom</a></td><td>
            Der Beginn einer möglichen Ruhezeit.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_SleepTimeTo.htm">SleepTimeTo</a></td><td>
            Das Ende einer möglichen Ruhezeit.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_StartCollapsed.htm">StartCollapsed</a></td><td>
            Bei True wird der Job beim Start zusammengeklappt angezeigt, wenn die UI dies unterstützt.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_UndefinedLogicalNodeClass_State.htm">State</a></td><td>
            Der Verarbeitungszustand eines Knotens:
            None, Waiting, Working, Finished, Triggered, Ready (= Finished | Triggered), CanStart (= None|Ready), Busy (= Waiting | Working).
            Wirft hier eine NotImplementedException.
            <br />(Überschreibt <a href="P_LogicalTaskTree_LogicalNode_State.htm">LogicalNode<span id="LST7B68A3F8_12" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>State</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_ThreadLocked.htm">ThreadLocked</a></td><td>
            Bei True wird jeder Thread über die Klasse gesperrt, so dass
            nicht Thread-sichere Checker serialisiert werden;
            Default: False;
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_TreeParams.htm">TreeParams</a></td><td>
            Zusätzliche Parameter, einige, die für den gesamten Tree
            Gültigkeit haben und einige knotenspezifische Parameter
            oder null.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_Trigger.htm">Trigger</a></td><td>
            Ein optionaler Trigger, der den Job wiederholt aufruft
            oder null (setzt intern BreakWithResult außer Kraft).
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_TriggeredRunDelay.htm">TriggeredRunDelay</a></td><td>
            Verzögert den Start eines Knotens (und InitNodes).
            Kann für Loops in Controlled-Jobs verwendet werden.
            Default: 0 (Millisekunden).
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_TypeInfo.htm">TypeInfo</a></td><td>
            Der Knotentyp:
              None, NodeConnector, ValueModifier, Constant, Checker.
            <a href="T_Vishnu_Interchange_NodeTypes.htm">NodeTypes</a><br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_UndefinedLogicalNodeClass_UserControlPath.htm">UserControlPath</a></td><td>
            Der Pfad zum aktuell dynamisch zu ladenden UserControl.
            Wirft hier eine NotImplementedException.
            <br />(Überschreibt <a href="P_LogicalTaskTree_LogicalNode_UserControlPath.htm">LogicalNode<span id="LST7B68A3F8_13" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>UserControlPath</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_WorkersState.htm">WorkersState</a></td><td>
            Ein Sammelstatus für alle zugeordneten Worker.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr></table><a href="#PageHeader">Zurück nach oben</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4FA')" onkeypress="SectionExpandCollapse_CheckKey('ID4FA', event)" tabindex="0"><img id="ID4FAToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Methoden</span></div><div id="ID4FASection" class="collapsibleSection"><table id="MethodList" class="members"><tr><th class="iconColumn"> </th><th>Name</th><th>Beschreibung</th></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_Break.htm">Break</a></td><td>
            Wenn erforderlich, beim Trigger abmelden,
            Abbrechen der Task über CancellationToken, Status setzen.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_CanControlledTreeStart.htm">CanControlledTreeStart</a></td><td>
            Gibt an, ob ein (Teil-)Baum in einem JobController gestartet werden kann, d.h. dass
            der Knoten und alle seine Eltern (rekursiv) gestartet werden können.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_NetEti_Globals_GenericTree_1_Climb2Top.htm">Climb2Top</a></td><td>
            Hangelt sich durch den Baum nach oben (bis zur Root)
            und ruft für jeden Knoten die Action auf.
            <br />(Vererbt von <a href="T_NetEti_Globals_GenericTree_1.htm">GenericTree<span id="LST7B68A3F8_14" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST7B68A3F8_15" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_UndefinedLogicalNodeClass_DoRun.htm">DoRun</a></td><td>
            Die eigentliche, Knotentyp-spezifische Verarbeitung.
            Wirft hier eine NotImplementedException.
            <br />(Überschreibt <a href="M_LogicalTaskTree_LogicalNode_DoRun.htm">LogicalNode<span id="LST7B68A3F8_16" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>DoRun(TreeEvent)</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_Equals.htm">Equals</a></td><td>
            Vergleicht den Inhalt dieser LogicalNode nach logischen Gesichtspunkten
            mit dem Inhalt einer übergebenen LogicalNode.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_FindEventTriggers.htm">FindEventTriggers</a></td><td>
            Sucht nach zuständigen Triggern für ein Event.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_FindNodeById.htm">FindNodeById</a></td><td>
            Hierüber kann eine Ableitung von LogicalNode ihren eigenen Thread
            zum Abbruch veranlassen.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_GetEnvironment.htm">GetEnvironment</a></td><td>
            Returniert das ConcurrentDictionary Environment als einfaches Dictionary Results.
            Benutzt dazu die interne Routine GetResultsFromResultList().
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_GetHashCode.htm">GetHashCode</a></td><td>
            Erzeugt einen Hashcode für diese LogicalNode.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_GetlastEventSourceIfIsTreeEventTriggered.htm">GetlastEventSourceIfIsTreeEventTriggered</a></td><td>
            Aktualisiert bei TreeEvent-getriggerten Knoten die Werte
            des Knotens, bevor mit ihnen weitergearbeitet wird.
            Ist bei Situationen wichtig, in dem entweder der Knoten das
            auslösende TreeEvent verpasst hat (beim Programmstart)
            oder ein anderes TreeEvent schneller war und zu einer
            Reaktion führt, die die aktuellen Werte des Knotens
            benötigt (JobSnapshotTrigger).
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_GetResults.htm">GetResults</a></td><td>
            Returniert das ConcurrentDictionary ResultList als einfaches Dictionary Results.
            Benutzt dazu die interne Routine GetResultsFromResultList().
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_GetTopRootJobList.htm">GetTopRootJobList</a></td><td>
            Liefert die für den Knoten gültige, oberste Root-JobList.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_InitFromNode.htm">InitFromNode</a></td><td>
            Setzt bestimmte Eigenschaften auf die Werte der übergebenen LogicalNode "source". 
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_InitNode.htm">InitNode</a></td><td>
            Setzt den Knoten auf die Starteinstellungen zurück.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_Invalidate.htm">Invalidate</a></td><td>
            Löscht interne Caches, so dass alles neu ausgewertet wird.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_MarkThreadAsInvalidIfActive.htm">MarkThreadAsInvalidIfActive</a></td><td>
            Trägt thread in die Liste ungültiger Threads ein,
            falls der Thread noch aktiv ist.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_OnLastNotNullLogicalChanged.htm">OnLastNotNullLogicalChanged</a></td><td>
            Löst das NodeLastNotNullLogicalChanged-Ereignis aus.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_OnNodeBreaked.htm">OnNodeBreaked</a></td><td>
            Löst das NodeBreaked-Ereignis aus.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_OnNodeProgressChanged.htm">OnNodeProgressChanged</a></td><td>
            Löst das NodeProgressChanged-Ereignis aus.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_OnNodeProgressFinished.htm">OnNodeProgressFinished</a></td><td>
            Löst das NodeProgressFinished-Ereignis aus.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_OnNodeProgressStarted.htm">OnNodeProgressStarted</a></td><td>
            Löst das NodeStarted-Ereignis aus.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_OnNodeWorkersStateChanged.htm">OnNodeWorkersStateChanged</a></td><td>
            Löst das NodeWorkersStateChanged-Ereignis aus.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_ProcessTreeEvent.htm">ProcessTreeEvent</a></td><td>
            Stößt weitere Verarbeitungen für das aktuelle TreeEvent an (Trigger, Logger).
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_RaiseNodeLastNotNullLogicalChangedWithTreeEvent.htm">RaiseNodeLastNotNullLogicalChangedWithTreeEvent</a></td><td>
            Triggert das TreeEvent "AnyLastNotNullLogicalHasChanged" und ruft "OnNodeLastNotNullLogicalChanged".
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_RaiseNodeLogicalChanged.htm">RaiseNodeLogicalChanged</a></td><td>
            Kapselt den Aufruf des nicht vererbbaren Events NodeLogicalChanged für
            für die abgeleiteten Klassen NodeList und JobList.
            Diese Routine gibt das Event über NodeLogicalChanged letzten Endes an die UI weiter.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_Refresh.htm">Refresh</a></td><td>
            Sorgt für eine sofortige Neu-Auswertung aller gecashten Zustände.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_RegisterTriggeredNodes.htm">RegisterTriggeredNodes</a></td><td>
            Registriert alle getriggerten Knoten eines Teilbaums bei ihren Triggern.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_Reload.htm">Reload</a></td><td>
            Wird aufgerufen, wenn der Teilbaum neu geladen werden soll.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_ResetAllTreeEventTriggeringNodes.htm">ResetAllTreeEventTriggeringNodes</a></td><td>
            Setzt alle Knoten im Teilbaum zurück, von denen andere per TreeEvent abhängen.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_ResetAllTreeNodes.htm">ResetAllTreeNodes</a></td><td>
            Setzt alle Knoten im gesamten Tree zurück.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_ResetPartTreeNodes.htm">ResetPartTreeNodes</a></td><td>
            Setzt alle Knoten im Teilbaum ab branch zurück.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_Run.htm">Run</a></td><td>
            Prüft, ob ein Knoten gestartet werden kann und startet dann den Knoten, seinen Trigger,
            oder beide (über StartNodeOrTrigger).
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_SetTreeCollapsed.htm">SetTreeCollapsed</a></td><td>
            Setzt die Property StartCollapsed für einen ganzen (Teil-)Baum.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_SetWorkersState.htm">SetWorkersState</a></td><td>
            Setzt einen gemeinsamen (kombinierten) NodeWorkerState 'WorkersState'
            für alle NodeWorker.
            Retourniert NodeWorkersState.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_ThreadUpdateLastLogical.htm">ThreadUpdateLastLogical</a></td><td>
            Setzt threadsafe LastLogical.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_ThreadUpdateLastLogicalState.htm">ThreadUpdateLastLogicalState</a></td><td>
            Setzt threadsafe LastLogicalState.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_ThreadUpdateLastState.htm">ThreadUpdateLastState</a></td><td>
            Setzt threadsafe LastState.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_ToString.htm">ToString</a></td><td>
            Überschriebene ToString()-Methode.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_NetEti_Globals_GenericTree_1_Traverse.htm">Traverse(Action<span id="LST7B68A3F8_17" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, T<span id="LST7B68A3F8_18" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Geht rekursiv durch den Baum und ruft für jeden Knoten die Action auf.
            <br />(Vererbt von <a href="T_NetEti_Globals_GenericTree_1.htm">GenericTree<span id="LST7B68A3F8_19" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST7B68A3F8_20" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_NetEti_Globals_GenericTree_1_Traverse_1.htm">Traverse(Func<span id="LST7B68A3F8_21" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, T, Object, Object<span id="LST7B68A3F8_22" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Geht rekursiv durch den Baum und ruft für jeden Knoten die Action auf.
            <br />(Vererbt von <a href="T_NetEti_Globals_GenericTree_1.htm">GenericTree<span id="LST7B68A3F8_23" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST7B68A3F8_24" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_NetEti_Globals_GenericTree_1_Traverse_2.htm">Traverse(Int32, Action<span id="LST7B68A3F8_25" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, T<span id="LST7B68A3F8_26" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Rekursive Hilfsroutine für die öffentliche Routine 'Traverse'.
            <br />(Vererbt von <a href="T_NetEti_Globals_GenericTree_1.htm">GenericTree<span id="LST7B68A3F8_27" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST7B68A3F8_28" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_NetEti_Globals_GenericTree_1_Traverse_3.htm">Traverse(Int32, Func<span id="LST7B68A3F8_29" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, T, Object, Object<span id="LST7B68A3F8_30" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Object)</a></td><td>
            Rekursive Hilfsroutine für die öffentliche Routine 'Traverse'.
            <br />(Vererbt von <a href="T_NetEti_Globals_GenericTree_1.htm">GenericTree<span id="LST7B68A3F8_31" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST7B68A3F8_32" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_UnMarkThreadAsInvalid.htm">UnMarkThreadAsInvalid</a></td><td>
            Entfernt thread aus der Liste ungültiger Threads.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_UnregisterTriggeredNode.htm">UnregisterTriggeredNode</a></td><td>
            Setzt den Teilbaum auf nicht startbar.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_UserBreak.htm">UserBreak</a></td><td>
            Wird aufgerufen, wenn der Teilbaum vom Anwender bewusst gestoppt wurde.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_UserRun.htm">UserRun</a></td><td>
            Startet die Verarbeitung dieses Knotens nach einem Start
            durch den Anwender. Gibt die Information, dass der Start
            durch den Anwender erfolgte, im TreeEvent an Run weiter.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr></table><a href="#PageHeader">Zurück nach oben</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDAFA')" onkeypress="SectionExpandCollapse_CheckKey('IDAFA', event)" tabindex="0"><img id="IDAFAToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Ereignisse</span></div><div id="IDAFASection" class="collapsibleSection"><table id="EventList" class="members"><tr><th class="iconColumn"> </th><th>Name</th><th>Beschreibung</th></tr><tr><td><img src="../icons/pubEvent.gif" alt="Public Ereignis" title="Public Ereignis" /></td><td><a href="E_LogicalTaskTree_LogicalNode_ExceptionCleared.htm">ExceptionCleared</a></td><td>
            Wird aufgerufen, wenn eine Exception gelöscht wird.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubEvent.gif" alt="Public Ereignis" title="Public Ereignis" /></td><td><a href="E_LogicalTaskTree_LogicalNode_ExceptionRaised.htm">ExceptionRaised</a></td><td>
            Wird aufgerufen, wenn eine Exception aufgetreten ist.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubEvent.gif" alt="Public Ereignis" title="Public Ereignis" /></td><td><a href="E_LogicalTaskTree_LogicalNode_NodeLastNotNullLogicalChanged.htm">NodeLastNotNullLogicalChanged</a></td><td>
            Wird aufgerufen, wenn sich das logische Ergebnis eines Knotens geändert hat
            und ungleich null ist.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubEvent.gif" alt="Public Ereignis" title="Public Ereignis" /></td><td><a href="E_LogicalTaskTree_LogicalNode_NodeLogicalChanged.htm">NodeLogicalChanged</a></td><td>
            Wird aufgerufen, wenn sich das logische Ergebnis eines Knotens geändert hat.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubEvent.gif" alt="Public Ereignis" title="Public Ereignis" /></td><td><a href="E_LogicalTaskTree_LogicalNode_NodeProgressChanged.htm">NodeProgressChanged</a></td><td>
            Wird aufgerufen, wenn sich der Verarbeitungs-Fortschritt eines Knotens geändert hat.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubEvent.gif" alt="Public Ereignis" title="Public Ereignis" /></td><td><a href="E_LogicalTaskTree_LogicalNode_NodeProgressFinished.htm">NodeProgressFinished</a></td><td>
            Wird aufgerufen, wenn die Verarbeitung eines Knotens abgeschlossen wurde (unabhängig vom Ergebnis).
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubEvent.gif" alt="Public Ereignis" title="Public Ereignis" /></td><td><a href="E_LogicalTaskTree_LogicalNode_NodeProgressStarted.htm">NodeProgressStarted</a></td><td>
            Wird aufgerufen, wenn ein Knoten gestartet wurde.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubEvent.gif" alt="Public Ereignis" title="Public Ereignis" /></td><td><a href="E_LogicalTaskTree_LogicalNode_NodeResultChanged.htm">NodeResultChanged</a></td><td>
            Wird aufgerufen, wenn sich das Result eines Knotens geändert hat.
            Dient dazu, die Berechnung des logischen Zustands des übergeordneten
            Knotens neu zu starten.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubEvent.gif" alt="Public Ereignis" title="Public Ereignis" /></td><td><a href="E_LogicalTaskTree_LogicalNode_NodeStateChanged.htm">NodeStateChanged</a></td><td>
            Wird aufgerufen, wenn sich der Verarbeitungszustand eines Knotens geändert hat.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubEvent.gif" alt="Public Ereignis" title="Public Ereignis" /></td><td><a href="E_LogicalTaskTree_LogicalNode_NodeWorkersStateChanged.htm">NodeWorkersStateChanged</a></td><td>
            Wird aufgerufen, wenn sich der Gesamtzustand der dem Knoten
            zugeordneten Worker geändert hat.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubEvent.gif" alt="Public Ereignis" title="Public Ereignis" /></td><td><a href="E_LogicalTaskTree_LogicalNode_PropertiesChanged.htm">PropertiesChanged</a></td><td>
            Dieses Event aus IVishnuNode.INotifyPropertiesChanged kann von LogicalNodeViewmodel abonniert werden.
            Dieses erhält über die übergebenen PropertiesChangedEventArgs eine String-List mit Property-Namen
            und kann seinerseits über INotifyProperyChanged die UI informieren.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr></table><a href="#PageHeader">Zurück nach oben</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDLFA')" onkeypress="SectionExpandCollapse_CheckKey('IDLFA', event)" tabindex="0"><img id="IDLFAToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Felder</span></div><div id="IDLFASection" class="collapsibleSection"><table id="FieldList" class="members"><tr><th class="iconColumn"> </th><th>Name</th><th>Beschreibung</th></tr><tr><td><img src="../icons/protField.gif" alt="Protected Feld" title="Protected Feld" /></td><td><a href="F_LogicalTaskTree_LogicalNode__lastRun.htm">_lastRun</a></td><td>
            Zeitpunkt des letzten Starts des Knoten (internes Feld).
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protField.gif" alt="Protected Feld" title="Protected Feld" /></td><td><a href="F_LogicalTaskTree_LogicalNode__nextRunInfo.htm">_nextRunInfo</a></td><td>
            Info-Text über den nächsten Start des Knotens (wenn bekannt) oder null (internes Feld).
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protField.gif" alt="Protected Feld" title="Protected Feld" /></td><td><a href="F_LogicalTaskTree_LogicalNode__parentViewLocker.htm">_parentViewLocker</a></td><td>
            Dient zur Sperrung für Thread-safen Zugriff auf ParentView.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protField.gif" alt="Protected Feld" title="Protected Feld" /></td><td><a href="F_LogicalTaskTree_LogicalNode_AppSettings.htm">AppSettings</a></td><td>
            Applikationseinstellungen.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protField.gif" alt="Protected Feld" title="Protected Feld" /></td><td><a href="F_LogicalTaskTree_LogicalNode_CancellationToken.htm">CancellationToken</a></td><td>
            Über die CancellationTokenSource kann dieses Token auf
            Abbruch gesetzt werden, was in diesem Knoten zum Aufruf
            der Routine cancelNotification führt.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protField.gif" alt="Protected Feld" title="Protected Feld" /></td><td><a href="F_LogicalTaskTree_LogicalNode_ExceptionLocker.htm">ExceptionLocker</a></td><td>
            Dient zum kurzzeitigen Sperren bei Exceptions.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protField.gif" alt="Protected Feld" title="Protected Feld" /></td><td><a href="F_LogicalTaskTree_LogicalNode_IsRunRequired.htm">IsRunRequired</a></td><td>
            True: der Knoten soll gestartet werden.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protField.gif" alt="Protected Feld" title="Protected Feld" /></td><td><a href="F_LogicalTaskTree_LogicalNode_IsTaskActiveOrScheduled.htm">IsTaskActiveOrScheduled</a></td><td>
            True: der Knoten ist gerade aktiv oder durch einen Timer kontrolliert.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubField.gif" alt="Public Feld" title="Public Feld" /></td><td><a href="F_LogicalTaskTree_LogicalNode_LastExceptions.htm">LastExceptions</a></td><td>
            Beim letzten Lauf aufgetretene Exception oder null;
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protField.gif" alt="Protected Feld" title="Protected Feld" /></td><td><a href="F_LogicalTaskTree_LogicalNode_LastLogicalLocker.htm">LastLogicalLocker</a></td><td>
            Dient zum kurzzeitigen Sperren von LastLogical.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protField.gif" alt="Protected Feld" title="Protected Feld" /></td><td><a href="F_LogicalTaskTree_LogicalNode_LastLogicalStateLocker.htm">LastLogicalStateLocker</a></td><td>
            Dient zum kurzzeitigen Sperren von LastLogicalState.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protField.gif" alt="Protected Feld" title="Protected Feld" /></td><td><a href="F_LogicalTaskTree_LogicalNode_LastStateLocker.htm">LastStateLocker</a></td><td>
            Dient zum kurzzeitigen Sperren von LastState.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubField.gif" alt="Public Feld" title="Public Feld" /></td><td><a href="F_NetEti_Globals_GenericTree_1_Mother.htm">Mother</a></td><td>
            Der Besitzer des Knoten.
            <br />(Vererbt von <a href="T_NetEti_Globals_GenericTree_1.htm">GenericTree<span id="LST7B68A3F8_33" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST7B68A3F8_34" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>)</td></tr><tr><td><img src="../icons/protField.gif" alt="Protected Feld" title="Protected Feld" /></td><td><a href="F_LogicalTaskTree_LogicalNode_ResultLocker.htm">ResultLocker</a></td><td>
            Dient zum kurzzeitigen Sperren von Result.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubField.gif" alt="Public Feld" title="Public Feld" /></td><td><a href="F_LogicalTaskTree_LogicalNode_RootJobList.htm">RootJobList</a></td><td>
            Nächsthöhere JobList für diesen Knoten oder der Knoten selbst,
            wenn er eine JobList ist.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protField.gif" alt="Protected Feld" title="Protected Feld" /></td><td><a href="F_LogicalTaskTree_LogicalNode_SubLastNotNullLogicalLocker.htm">SubLastNotNullLogicalLocker</a></td><td>
            Dient zum kurzzeitigen Sperren von LastLogical.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubField.gif" alt="Public Feld" title="Public Feld" /></td><td><a href="F_LogicalTaskTree_LogicalNode_TreeRootJobList.htm">TreeRootJobList</a></td><td>
            Oberste JobList.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubField.gif" alt="Public Feld" title="Public Feld" /><img src="../icons/Static.gif" alt="Static Member" title="Static Member" /></td><td><a href="F_LogicalTaskTree_UndefinedLogicalNodeClass_UndefinedLogicalNode.htm">UndefinedLogicalNode</a></td><td>
            Statische Instanz für eine undefinierte LogicalNode.
            Ersetzt null, um die elenden null-Warnungen bei der Verwendung von LogicalNodes
            zu umgehen, bei denen sichergestellt ist, dass sie zum Zeitpunkt der Verwendung
            ungleich null sind, die aber im Konstruktor sonst noch nicht sinnvoll instanziiert
            werden könnten.
            Bei eventuellen späteren null-Abfragen muss null durch diese Instanz ersetzt werden.
            Es kann dann ggf. auf 'is IUndefinedElement' geprüft werden.
            </td></tr></table><a href="#PageHeader">Zurück nach oben</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('seeAlso')" onkeypress="SectionExpandCollapse_CheckKey('seeAlso', event)" tabindex="0"><img id="seeAlsoToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Siehe auch</span></div><div id="seeAlsoSection" class="collapsibleSection"><h4>Referenz</h4><div><a href="N_LogicalTaskTree.htm">LogicalTaskTree Namensraum</a></div></div></div></div><div id="PageFooter" class="pageFooter">Naturgemäß basieren viele Erkenntnisse und Entwicklungen auf im Internet frei zugänglichen Informationen. Eventuell fehlende Verweise auf ursprüngliche Autoren sind unbeabsichtigt und werden nach Meldung sofort nachgepflegt.<p>Copyright © 2012-2025 Erik Nagel</p><div class="feedbackLink">Senden Sie Kommentare zu diesem Feature an
        <a id="HT_MailLink" href="mailto:Vishnu%40reallyhuman.net?Subject=Vishnu%20-%20der%20logische%20Prozess-Monitor">Vishnu@reallyhuman.net</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Ihre Rückmeldung wird für die Verbesserung der Dokumentation und des Produktes genutzt. Ihre Email-Adresse wird zu keinem anderen Zweck benutzt und wird nach der Behebung des gemeldeten Problems gelöscht. Während der Arbeit an dem Problem kann es sein dass Sie per Email kontaktiert werden für weitergehende Details oder Abklärung zur Rückmeldung von Ihnen. Nachdem das Problem eingegrenzt worden ist kann es sein dass Sie eine Email erhalten zur Problembehebung.");
        </script></div></body></html>