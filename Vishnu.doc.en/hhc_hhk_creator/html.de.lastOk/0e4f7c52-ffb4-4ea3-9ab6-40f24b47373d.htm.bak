<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><meta name="Microsoft.Help.SelfBranded" content="true" /><meta name="Language" content="de-de" /><meta name="Microsoft.Help.Locale" content="de-de" /><meta name="Microsoft.Help.TopicLocale" content="de-de" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-de-DE.css" /><script type="text/javascript" src="../scripts/branding.js"></script><title>Vishnu Logik</title><meta name="Microsoft.Help.Id" content="0e4f7c52-ffb4-4ea3-9ab6-40f24b47373d" /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="Microsoft.Help.Category" content="XML" /><meta name="Description" content="Vishnu setzt Ihren logischen Ausdruck (LogicalExpression, siehe auch ) intern in eine entsprechende Baumstruktur (Tree) um, die logisch verarbeitet wird und welche Sie dann letzten Endes in der Normaldarstellung (&quot;Logical Task Tree&quot;) auch so wiederfinden." /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-3.5.1.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="SetDefaultLanguage('cs');"><input type="hidden" id="userDataCache" class="userDataStyle" /><div id="PageHeader" class="pageHeader">Vishnu - der logische Prozess-Monitor<form id="SearchForm" method="get" action="#" onsubmit="TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/ad9ee8b6-c68c-47ec-9584-d85046eb3137.htm" title="Vishnu - der logische Prozess-Monitor" tocid="roottoc">Vishnu - der logische Prozess-Monitor</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/fdd9dbc7-ba68-49fb-b91f-17eb2decbaf2.htm" title="Details" tocid="fdd9dbc7-ba68-49fb-b91f-17eb2decbaf2">Details</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/bc0ffa08-c936-4fad-8fdb-dbd2279fc360.htm" title="Vishnu Akteure" tocid="bc0ffa08-c936-4fad-8fdb-dbd2279fc360">Vishnu Akteure</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/c8911ff4-4ce7-406b-8467-e8ddff1ec56c.htm" title="Inline SubJobs" tocid="c8911ff4-4ce7-406b-8467-e8ddff1ec56c">Inline SubJobs</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="../html/0e4f7c52-ffb4-4ea3-9ab6-40f24b47373d.htm" title="Vishnu Logik" tocid="0e4f7c52-ffb4-4ea3-9ab6-40f24b47373d">Vishnu Logik</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/28fdc0c4-7fdc-4d16-be94-94cee2a9ca85.htm" title="TreeEvents" tocid="28fdc0c4-7fdc-4d16-be94-94cee2a9ca85">TreeEvents</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/478a3c03-87d1-4aa1-9087-917abb7eccfe.htm" title="das Kontext Menü" tocid="478a3c03-87d1-4aa1-9087-917abb7eccfe">das Kontext Menü</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div id="TopicContent" class="topicContent"><table class="titleTable"><tr><td class="logoColumn"><img src="../icons/Vishnu_64.png" /></td><td class="titleColumn"><h1>Vishnu Logik</h1></td></tr></table><div><p><strong>Vishnu</strong> setzt Ihren logischen Ausdruck (<span class="keyword">LogicalExpression</span>,
				siehe auch <a href="E6ECB24A-CA5C-4785-9514-992F359D394A.htm">Konfiguration und Parameter</a>) intern in eine entsprechende Baumstruktur (Tree) um,
				die logisch verarbeitet wird und welche Sie dann letzten Endes in der Normaldarstellung ("Logical Task Tree") auch so wiederfinden.
				Wie das im Detail aussieht und welche logischen Ausdrücke <strong>Vishnu</strong> versteht, lesen Sie in diesem Kapikel.
			</p></div><div class="collapsibleAreaRegion" id="LogicalTaskTree"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDDAB')" onkeypress="SectionExpandCollapse_CheckKey('IDDAB', event)" tabindex="0"><img id="IDDABToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Logical Task Tree</span></div><div id="IDDABSection" class="collapsibleSection"><p>
					Während der Verarbeitung ergibt sich das logische Ergebnis eines Knoten aus den Ergebnissen seiner Unterknoten.
					Schauen wir uns zur Verdeutlichung noch mal den Demo-Job aus <a href="62ca75a8-ba50-4115-93df-b1e76bf6e5f7.htm">ein einfaches Beispiel</a> an.
				</p><div class="mediaNear"><img alt="Demo Job 01" src="../media/DemoJob_01.PNG" /></div><p>
					Der Knoten "CheckDiskSpace" wird rot dargestellt, weil der <span class="keyword">Checker</span> des Unterknotens
					"Check_D" "false" zurückgemeldet hat ("Frei" war mit 143636 MB kleiner als "Minimum" mit 200000 MB).
					Da "CheckDiskSpace" seine Unterknoten mit einem logischen UND ("AND") verbindet, geht infolgedessen "Check_DiskSpace"
					auch auf "false" (rot). Dies pflanzt sich dann im Tree nach oben fort und "Check All" geht auch auf "false" (rot).
				</p><p>
					Bei dem Knoten "CheckServers" müssen wir schon etwas genauer hinschauen. Dieser Knoten ist grün (true), obwohl einer
					seiner "Enkel"-Knoten "Local_Backup" rot ist, also "false" zurückgemeldet hat.
					Wie man an folgendem Ausschnitt aus der <span class="keyword">JobDescription.xml</span> sehen kann, ist der
					problematische Knoten "Local_Backup" über ein ODER ("OR") mit dem Knoten "Local" verbunden und diese Verbindung als
					Ganzes geklammert.
				</p><div id="IDFBDAB" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDFBDAB_tab1" class="codeSnippetContainerTabSingle">JobDescription.xml</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDFBDAB_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDFBDAB');return false;" title="Copy">Copy</a></div></div><div id="IDFBDAB_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">...
  <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">LogicalName</span><span class="highlight-xml-bracket">&gt;</span>CheckServers<span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">LogicalName</span><span class="highlight-xml-bracket">&gt;</span>
  <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">LogicalExpression</span><span class="highlight-xml-bracket">&gt;</span>(Google AND Heise) AND (Local OR Local_Backup)<span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">LogicalExpression</span><span class="highlight-xml-bracket">&gt;</span>
...</pre></div></div></div><p>
					Da es bei einem logischen ODER ausreicht, wenn einer der beiden Partner "true" (grün) ist, wird der von <strong>Vishnu</strong>
					anstelle der Klammern eingezogene anonyme Zwischenknoten "true" (grün). Der andere anonyme Zwischenknoten, der "Google"
					und "Heise" über "AND" verbindet ist ohnehin grün, womit "CheckServers" letztendlich auch grün wird.
					Vishnu erzeugt immer dann Zwischenknoten, wenn in einem logischen Ausdruck mehrere Operatoren (AND, OR, etc.) mit
					unterschiedlicher Bindungskraft (z.B. UND bindet enger als ODER) vorkommen oder von Ihnen Klammern gesetzt wurden.
				</p><div class="alert"><table><tr><th><img src="../icons/AlertNote.png" alt="Hinweis" />  Hinweis</th></tr><tr><td><p>
						Man kann Klammern auch setzen, wenn sie aus rein logischen Gesichtspunkten nicht erforderlich sind um <strong>Vishnu</strong>
						dazu zu bringen, anonyme Zwischenknoten zu erzeugen, und damit die Bildschirmdarstellung kompakter gestalten.
					</p></td></tr></table></div></div><div class="collapsibleAreaRegion" id="Syntax"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDEAB')" onkeypress="SectionExpandCollapse_CheckKey('IDEAB', event)" tabindex="0"><img id="IDEABToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Logik-Elemente und Syntax</span></div><div id="IDEABSection" class="collapsibleSection"><p><span class="keyword">LogicalExpressions</span> können auf zwei leicht unterschiedliche Arten formuliert werden
					(dargestellt an unserem obigen Beispiel):
				</p><ol><li><p>
							&lt;LogicalExpression&gt;(Google AND Heise) AND (Local OR Local_Backup)&lt;/LogicalExpression&gt;
						</p></li><li><p>
							&lt;LogicalExpression&gt;&lt;![CDATA[(Google AND Heise) AND (Local OR Local_Backup)]]&gt;&lt;/LogicalExpression&gt;
						</p></li></ol><p>
					Die zweite Form, in der der logische Ausdruck noch zusätzlich in "&lt;![CDATA[" und "]]&gt;" eingeschlossen ist,
					hat den Vorteil, dass im logischen Ausdruck auch Sonderzeichen vorkommen dürfen. Das ermöglicht,
					<span class="keyword">Operatoren</span> in ihrer Kurzform verwenden zu können (siehe nachfolgende Operatoren-Tabelle).
				</p><div class="caption">gültige Vishnu-Operatoren</div><table><tr><th><p>Operator</p></th><th><p>Syntax</p></th><th><p>Kurzformen</p></th></tr><tr><td><p>Ist gleich (Identität)</p></td><td><p>'IS'</p></td><td><p>':'</p></td></tr><tr><td><p>Ist nicht (Verneinung)</p></td><td><p>'NOT'</p></td><td><p>'!'</p></td></tr><tr><td><p>
								Logisches UND
							</p></td><td><p>'AND'</p></td><td><p>'&amp;'</p></td></tr><tr><td><p>
								Logisches ODER
							</p></td><td><p>'OR'</p></td><td><p>'|'</p></td></tr><tr><td><p>
								Exklusiv ODER (entweder oder)
							</p></td><td><p>'XOR'</p></td><td><p>'&gt;&lt;'</p></td></tr><tr><td><p>
								Implikation (daraus folgt)
							</p></td><td><p>'IMP'</p></td><td><p>'=&gt;'</p></td></tr><tr><td><p>
								Logisches Nicht UND
							</p></td><td><p>'NAND'</p></td><td><p>'!&amp;'</p></td></tr><tr><td><p>
								Logisches Nicht ODER
							</p></td><td><p>'NOR'</p></td><td><p>'!|'</p></td></tr><tr><td><p>
								Logisches Nicht Exklusiv ODER
							</p></td><td><p>'XNOR'</p></td><td><p>'!&gt;&lt;'</p></td></tr><tr><td><p>
								Klammer auf
							</p></td><td><p>'GROUP'</p></td><td><p>'(', '[', '{'</p></td></tr><tr><td><p>
								Klammer zu
							</p></td><td><p>'UNGROUP'</p></td><td><p>')', ']', '}'</p></td></tr><tr><td><p>
								Ist gleich
							</p></td><td><p>'EQ'</p></td><td><p>'==', '='</p></td></tr><tr><td><p>
								Ist ungleich
							</p></td><td><p>'NE'</p></td><td><p>'&lt;&gt;'</p></td></tr><tr><td><p>
								Ist kleiner
							</p></td><td><p>'LT'</p></td><td><p>'&lt;'</p></td></tr><tr><td><p>
								Ist kleiner oder gleich
							</p></td><td><p>'LE'</p></td><td><p>'&lt;='</p></td></tr><tr><td><p>
								Ist größer
							</p></td><td><p>'GT'</p></td><td><p>'&gt;'</p></td></tr><tr><td><p>
								Ist größer oder gleich
							</p></td><td><p>'GE'</p></td><td><p>'&gt;='</p></td></tr><tr><td><p>
								Schwellenwert 10%, 20%, ... , 80%, 90%
							</p></td><td><p>'TR10', 'TR20', ... , 'TR80', 'TR90'</p></td><td><p>---</p></td></tr></table><div class="alert"><table><tr><th><img src="../icons/AlertCaution.png" alt="Wichtig" />  Wichtig</th></tr><tr><td><p>
						Eine Variable in einer <span class="keyword">LogicalExpression</span> wie zum Beispiel "Google"
						oder "Heise" kann in einem komplexeren logischen Konstrukt durchaus mehrfach auftreten.
						<strong>Vishnu</strong> stellt sie dann im Tree auch mehrfach dar, sorgt aber intern dafür, dass ein zugehöriger
						<span class="keyword">Checker</span> nur einmal ausgeführt wird.
					</p></td></tr></table></div><p><strong>weitere Hinweise</strong></p><p>
					Die Schwellenwert-Logik (treshold) prüft, ob ein bestimmter Prozentsatz der dem Job untergeordneter Knoten
					das Ergebnis <span class="keyword"><span id="LSTFFDA894F_0" data-languageSpecificText="vb=True|nu=true"></span></span> geliefert hat. Wird der durch den gewählten <span class="keyword">Operator</span>
					festgelegte Prozentsatz (Schwellenwert) erreicht oder überschritten, geht der gesamte Job auf <span class="keyword"><span id="LSTFFDA894F_1" data-languageSpecificText="vb=True|nu=true"></span></span>
					(grüne Anzeige).<br />
					Im unteren Beispiel mit insgesamt 10 Checkern wurde über den Operator <strong>TR50</strong> der Schwellenwert 50% übergeben.
					Wie zu sehen, geht ab dem 5. grünen Checker der Job auch auf grün (true).
				</p><div class="mediaNear"><img alt="Check Treshold 50 10" src="../media/Check_Treshold_50_10.jpg" /></div><p><span class="keyword">Operatoren</span> können in der Regel in einer Kette mit insgesamt mehr als zwei Argumenten angewendet werden.
					Das bedeutet, dass zum Beispiel über den Operator <strong>XOR</strong> mehr als nur zwei <span class="keyword">Checker</span>
					in Beziehung gesetzt werden können (siehe Bild unten). Gleiches gilt z.B. auch für Vergleichsoperatoren.
				</p><div class="mediaNear"><img alt="Check Dependent Node" src="../media/CheckDependentNode.JPG" /></div></div></div></div><div id="PageFooter" class="pageFooter">Naturgemäß basieren viele Erkenntnisse und Entwicklungen auf im Internet frei zugänglichen Informationen. Eventuell fehlende Verweise auf ursprüngliche Autoren sind unbeabsichtigt und werden nach Meldung sofort nachgepflegt.<p>Copyright © 2012-2025 Erik Nagel</p><div class="feedbackLink">Senden Sie Kommentare zu diesem Feature an
        <a id="HT_MailLink" href="mailto:Vishnu%40reallyhuman.net?Subject=Vishnu%20-%20der%20logische%20Prozess-Monitor">Vishnu@reallyhuman.net</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Ihre Rückmeldung wird für die Verbesserung der Dokumentation und des Produktes genutzt. Ihre Email-Adresse wird zu keinem anderen Zweck benutzt und wird nach der Behebung des gemeldeten Problems gelöscht. Während der Arbeit an dem Problem kann es sein dass Sie per Email kontaktiert werden für weitergehende Details oder Abklärung zur Rückmeldung von Ihnen. Nachdem das Problem eingegrenzt worden ist kann es sein dass Sie eine Email erhalten zur Problembehebung.");
        </script></div></body></html>