<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><meta name="Microsoft.Help.SelfBranded" content="true" /><meta name="Language" content="de-de" /><meta name="Microsoft.Help.Locale" content="de-de" /><meta name="Microsoft.Help.TopicLocale" content="de-de" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-de-DE.css" /><script type="text/javascript" src="../scripts/branding.js"></script><title>LogicalNode Methoden</title><meta name="Title" content="LogicalNode Methoden" /><meta name="Microsoft.Help.Id" content="Methods.T:LogicalTaskTree.LogicalNode" /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="System.Keywords" content="LogicalNode Klasse, Methoden" /><meta name="container" content="LogicalTaskTree" /><meta name="file" content="Methods_T_LogicalTaskTree_LogicalNode" /><meta name="guid" content="Methods_T_LogicalTaskTree_LogicalNode" /><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-3.5.1.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="SetDefaultLanguage('cs');"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/ad9ee8b6-c68c-47ec-9584-d85046eb3137.htm" title="Vishnu - der logische Prozess-Monitor" tocid="roottoc">Vishnu - der logische Prozess-Monitor</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/R_Project_Vishnu_doc_de.htm" title="Vishnu - technische Dokumentation" tocid="R_Project_Vishnu_doc_de">Vishnu - technische Dokumentation</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/N_LogicalTaskTree.htm" title="LogicalTaskTree" tocid="N_LogicalTaskTree">LogicalTaskTree</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/T_LogicalTaskTree_LogicalNode.htm" title="LogicalNode Klasse" tocid="T_LogicalTaskTree_LogicalNode">LogicalNode Klasse</a></div><div class="toclevel1 current" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Methods_T_LogicalTaskTree_LogicalNode.htm" title="LogicalNode Methoden" tocid="Methods_T_LogicalTaskTree_LogicalNode">LogicalNode Methoden</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_AllowSnapshots.htm" title="AllowSnapshots Methode" tocid="M_LogicalTaskTree_LogicalNode_AllowSnapshots">AllowSnapshots Methode</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_Break.htm" title="Break Methode" tocid="M_LogicalTaskTree_LogicalNode_Break">Break Methode</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_CanControlledTreeStart.htm" title="CanControlledTreeStart Methode" tocid="M_LogicalTaskTree_LogicalNode_CanControlledTreeStart">CanControlledTreeStart Methode</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_DoRun.htm" title="DoRun Methode" tocid="M_LogicalTaskTree_LogicalNode_DoRun">DoRun Methode</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_Equals.htm" title="Equals Methode" tocid="M_LogicalTaskTree_LogicalNode_Equals">Equals Methode</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_FindEventTriggers.htm" title="FindEventTriggers Methode" tocid="M_LogicalTaskTree_LogicalNode_FindEventTriggers">FindEventTriggers Methode</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_FindNodeById.htm" title="FindNodeById Methode" tocid="M_LogicalTaskTree_LogicalNode_FindNodeById">FindNodeById Methode</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_GetEnvironment.htm" title="GetEnvironment Methode" tocid="M_LogicalTaskTree_LogicalNode_GetEnvironment">GetEnvironment Methode</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_GetHashCode.htm" title="GetHashCode Methode" tocid="M_LogicalTaskTree_LogicalNode_GetHashCode">GetHashCode Methode</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_GetlastEventSourceIfIsTreeEventTriggered.htm" title="GetlastEventSourceIfIsTreeEventTriggered Methode" tocid="M_LogicalTaskTree_LogicalNode_GetlastEventSourceIfIsTreeEventTriggered">GetlastEventSourceIfIsTreeEventTriggered Methode</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_GetResults.htm" title="GetResults Methode" tocid="M_LogicalTaskTree_LogicalNode_GetResults">GetResults Methode</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_GetTopRootJobList.htm" title="GetTopRootJobList Methode" tocid="M_LogicalTaskTree_LogicalNode_GetTopRootJobList">GetTopRootJobList Methode</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_InitFromNode.htm" title="InitFromNode Methode" tocid="M_LogicalTaskTree_LogicalNode_InitFromNode">InitFromNode Methode</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_InitNode.htm" title="InitNode Methode" tocid="M_LogicalTaskTree_LogicalNode_InitNode">InitNode Methode</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_Invalidate.htm" title="Invalidate Methode" tocid="M_LogicalTaskTree_LogicalNode_Invalidate">Invalidate Methode</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_LogWithDistinctTime.htm" title="LogWithDistinctTime Methode" tocid="M_LogicalTaskTree_LogicalNode_LogWithDistinctTime">LogWithDistinctTime Methode</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_MarkThreadAsInvalidIfActive.htm" title="MarkThreadAsInvalidIfActive Methode" tocid="M_LogicalTaskTree_LogicalNode_MarkThreadAsInvalidIfActive">MarkThreadAsInvalidIfActive Methode</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_OnLastNotNullLogicalChanged.htm" title="OnLastNotNullLogicalChanged Methode" tocid="M_LogicalTaskTree_LogicalNode_OnLastNotNullLogicalChanged">OnLastNotNullLogicalChanged Methode</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_OnNodeBreaked.htm" title="OnNodeBreaked Methode" tocid="M_LogicalTaskTree_LogicalNode_OnNodeBreaked">OnNodeBreaked Methode</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_OnNodeProgressChanged.htm" title="OnNodeProgressChanged Methode" tocid="M_LogicalTaskTree_LogicalNode_OnNodeProgressChanged">OnNodeProgressChanged Methode</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_OnNodeProgressFinished.htm" title="OnNodeProgressFinished Methode" tocid="M_LogicalTaskTree_LogicalNode_OnNodeProgressFinished">OnNodeProgressFinished Methode</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_OnNodeProgressStarted.htm" title="OnNodeProgressStarted Methode" tocid="M_LogicalTaskTree_LogicalNode_OnNodeProgressStarted">OnNodeProgressStarted Methode</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_OnNodeWorkersStateChanged.htm" title="OnNodeWorkersStateChanged Methode" tocid="M_LogicalTaskTree_LogicalNode_OnNodeWorkersStateChanged">OnNodeWorkersStateChanged Methode</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_PauseTree.htm" title="PauseTree Methode" tocid="M_LogicalTaskTree_LogicalNode_PauseTree">PauseTree Methode</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_ProcessTreeEvent.htm" title="ProcessTreeEvent Methode" tocid="M_LogicalTaskTree_LogicalNode_ProcessTreeEvent">ProcessTreeEvent Methode</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_ProhibitSnapshots.htm" title="ProhibitSnapshots Methode" tocid="M_LogicalTaskTree_LogicalNode_ProhibitSnapshots">ProhibitSnapshots Methode</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_RaiseNodeLastNotNullLogicalChangedWithTreeEvent.htm" title="RaiseNodeLastNotNullLogicalChangedWithTreeEvent Methode" tocid="M_LogicalTaskTree_LogicalNode_RaiseNodeLastNotNullLogicalChangedWithTreeEvent">RaiseNodeLastNotNullLogicalChangedWithTreeEvent Methode</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_RaiseNodeLogicalChanged.htm" title="RaiseNodeLogicalChanged Methode" tocid="M_LogicalTaskTree_LogicalNode_RaiseNodeLogicalChanged">RaiseNodeLogicalChanged Methode</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_Refresh.htm" title="Refresh Methode" tocid="M_LogicalTaskTree_LogicalNode_Refresh">Refresh Methode</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_RegisterTriggeredNodes.htm" title="RegisterTriggeredNodes Methode" tocid="M_LogicalTaskTree_LogicalNode_RegisterTriggeredNodes">RegisterTriggeredNodes Methode</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_Reload.htm" title="Reload Methode" tocid="M_LogicalTaskTree_LogicalNode_Reload">Reload Methode</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_ResetAllTreeEventTriggeringNodes.htm" title="ResetAllTreeEventTriggeringNodes Methode" tocid="M_LogicalTaskTree_LogicalNode_ResetAllTreeEventTriggeringNodes">ResetAllTreeEventTriggeringNodes Methode</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_ResetAllTreeNodes.htm" title="ResetAllTreeNodes Methode" tocid="M_LogicalTaskTree_LogicalNode_ResetAllTreeNodes">ResetAllTreeNodes Methode</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_ResetPartTreeNodes.htm" title="ResetPartTreeNodes Methode" tocid="M_LogicalTaskTree_LogicalNode_ResetPartTreeNodes">ResetPartTreeNodes Methode</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_ResumeTree.htm" title="ResumeTree Methode" tocid="M_LogicalTaskTree_LogicalNode_ResumeTree">ResumeTree Methode</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_Run.htm" title="Run Methode" tocid="M_LogicalTaskTree_LogicalNode_Run">Run Methode</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_SetTreeCollapsed.htm" title="SetTreeCollapsed Methode" tocid="M_LogicalTaskTree_LogicalNode_SetTreeCollapsed">SetTreeCollapsed Methode</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_SetWorkersState.htm" title="SetWorkersState Methode" tocid="M_LogicalTaskTree_LogicalNode_SetWorkersState">SetWorkersState Methode</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_SleepIfNecessary.htm" title="SleepIfNecessary Methode" tocid="M_LogicalTaskTree_LogicalNode_SleepIfNecessary">SleepIfNecessary Methode</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_ThreadUpdateLastLogical.htm" title="ThreadUpdateLastLogical Methode" tocid="M_LogicalTaskTree_LogicalNode_ThreadUpdateLastLogical">ThreadUpdateLastLogical Methode</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_ThreadUpdateLastLogicalState.htm" title="ThreadUpdateLastLogicalState Methode" tocid="M_LogicalTaskTree_LogicalNode_ThreadUpdateLastLogicalState">ThreadUpdateLastLogicalState Methode</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_ThreadUpdateLastState.htm" title="ThreadUpdateLastState Methode" tocid="M_LogicalTaskTree_LogicalNode_ThreadUpdateLastState">ThreadUpdateLastState Methode</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_ToString.htm" title="ToString Methode" tocid="M_LogicalTaskTree_LogicalNode_ToString">ToString Methode</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_UnMarkThreadAsInvalid.htm" title="UnMarkThreadAsInvalid Methode" tocid="M_LogicalTaskTree_LogicalNode_UnMarkThreadAsInvalid">UnMarkThreadAsInvalid Methode</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_UnregisterTriggeredNode.htm" title="UnregisterTriggeredNode Methode" tocid="M_LogicalTaskTree_LogicalNode_UnregisterTriggeredNode">UnregisterTriggeredNode Methode</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_UserBreak.htm" title="UserBreak Methode" tocid="M_LogicalTaskTree_LogicalNode_UserBreak">UserBreak Methode</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_LogicalTaskTree_LogicalNode_UserRun.htm" title="UserRun Methode" tocid="M_LogicalTaskTree_LogicalNode_UserRun">UserRun Methode</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div id="TopicContent" class="topicContent"><table class="titleTable"><tr><td class="logoColumn"><img src="../icons/Vishnu_64.png" /></td><td class="titleColumn"><h1>Logical<wbr />Node Methoden</h1></td></tr></table><p>Der <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a> Typ exponiert die folgenden Member.</p><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDADA')" onkeypress="SectionExpandCollapse_CheckKey('IDADA', event)" tabindex="0"><img id="IDADAToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Methoden</span></div><div id="IDADASection" class="collapsibleSection"><table id="MethodList" class="members"><tr><th class="iconColumn"> </th><th>Name</th><th>Beschreibung</th></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /><img src="../icons/Static.gif" alt="Static Member" title="Static Member" /></td><td><a href="M_LogicalTaskTree_LogicalNode_AllowSnapshots.htm">AllowSnapshots</a></td><td>
            Erlaubt Snapshots.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_Break.htm">Break</a></td><td>
            Wenn erforderlich, beim Trigger abmelden,
            Abbrechen der Task über CancellationToken, Status setzen.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_CanControlledTreeStart.htm">CanControlledTreeStart</a></td><td>
            Gibt an, ob ein (Teil-)Baum in einem JobController gestartet werden kann, d.h. dass
            der Knoten und alle seine Eltern (rekursiv) gestartet werden können.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_NetEti_Globals_GenericTree_1_Climb2Top.htm">Climb2Top</a></td><td>
            Hangelt sich durch den Baum nach oben (bis zur Root)
            und ruft für jeden Knoten die Action auf.
            <br />(Vererbt von <a href="T_NetEti_Globals_GenericTree_1.htm">GenericTree<span id="LST92AE5BA6_0" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST92AE5BA6_1" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_DoRun.htm">DoRun</a></td><td>
            Die eigentliche, Knotentyp-spezifische Verarbeitung;
            muss überschrieben werden.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_Equals.htm">Equals</a></td><td>
            Vergleicht den Inhalt dieser LogicalNode nach logischen Gesichtspunkten
            mit dem Inhalt einer übergebenen LogicalNode.
            <br />(Überschreibt <a href="https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)" target="_blank" rel="noopener noreferrer">Object<span id="LST92AE5BA6_2" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>Equals(Object)</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_FindEventTriggers.htm">FindEventTriggers</a></td><td>
            Sucht nach zuständigen Triggern für ein Event.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_FindNodeById.htm">FindNodeById</a></td><td>
            Hierüber kann eine Ableitung von LogicalNode ihren eigenen Thread
            zum Abbruch veranlassen.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_GetEnvironment.htm">GetEnvironment</a></td><td>
            Returniert das ConcurrentDictionary Environment als einfaches Dictionary Results.
            Benutzt dazu die interne Routine GetResultsFromResultList().
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_GetHashCode.htm">GetHashCode</a></td><td>
            Erzeugt einen Hashcode für diese LogicalNode.
            <br />(Überschreibt <a href="https://learn.microsoft.com/dotnet/api/system.object.gethashcode" target="_blank" rel="noopener noreferrer">Object<span id="LST92AE5BA6_3" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>GetHashCode<span id="LST92AE5BA6_4" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_GetlastEventSourceIfIsTreeEventTriggered.htm">GetlastEventSourceIfIsTreeEventTriggered</a></td><td>
            Aktualisiert bei TreeEvent-getriggerten Knoten die Werte
            des Knotens, bevor mit ihnen weitergearbeitet wird.
            Ist bei Situationen wichtig, in dem entweder der Knoten das
            auslösende TreeEvent verpasst hat (beim Programmstart)
            oder ein anderes TreeEvent schneller war und zu einer
            Reaktion führt, die die aktuellen Werte des Knotens
            benötigt (JobSnapshotTrigger).
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_GetResults.htm">GetResults</a></td><td>
            Returniert das ConcurrentDictionary ResultList als einfaches Dictionary Results.
            Benutzt dazu die interne Routine GetResultsFromResultList().
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_GetTopRootJobList.htm">GetTopRootJobList</a></td><td>
            Liefert die für den Knoten gültige, oberste Root-JobList.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_InitFromNode.htm">InitFromNode</a></td><td>
            Setzt bestimmte Eigenschaften auf die Werte der übergebenen LogicalNode "source". 
            </td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_InitNode.htm">InitNode</a></td><td>
            Setzt den Knoten auf die Starteinstellungen zurück.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_Invalidate.htm">Invalidate</a></td><td>
            Löscht interne Caches, so dass alles neu ausgewertet wird.
            </td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /><img src="../icons/Static.gif" alt="Static Member" title="Static Member" /></td><td><a href="M_LogicalTaskTree_LogicalNode_LogWithDistinctTime.htm">LogWithDistinctTime</a></td><td>
            Schreibt eine Nachricht mit kurzer Sleeptime vorher und nacher, um zeitnahe
            Vorgänge später im Log in zeitlicher Folge sichtbar zu machen.
            </td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_MarkThreadAsInvalidIfActive.htm">MarkThreadAsInvalidIfActive</a></td><td>
            Trägt thread in die Liste ungültiger Threads ein,
            falls der Thread noch aktiv ist.
            </td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_OnLastNotNullLogicalChanged.htm">OnLastNotNullLogicalChanged</a></td><td>
            Löst das NodeLastNotNullLogicalChanged-Ereignis aus.
            </td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_OnNodeBreaked.htm">OnNodeBreaked</a></td><td>
            Löst das NodeBreaked-Ereignis aus.
            </td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_OnNodeProgressChanged.htm">OnNodeProgressChanged</a></td><td>
            Löst das NodeProgressChanged-Ereignis aus.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_OnNodeProgressFinished.htm">OnNodeProgressFinished</a></td><td>
            Löst das NodeProgressFinished-Ereignis aus.
            </td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_OnNodeProgressStarted.htm">OnNodeProgressStarted</a></td><td>
            Löst das NodeStarted-Ereignis aus.
            </td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_OnNodeWorkersStateChanged.htm">OnNodeWorkersStateChanged</a></td><td>
            Löst das NodeWorkersStateChanged-Ereignis aus.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /><img src="../icons/Static.gif" alt="Static Member" title="Static Member" /></td><td><a href="M_LogicalTaskTree_LogicalNode_PauseTree.htm">PauseTree</a></td><td>
            Hält die Verarbeitung im Tree an.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_ProcessTreeEvent.htm">ProcessTreeEvent</a></td><td>
            Stößt weitere Verarbeitungen für das aktuelle TreeEvent an (Trigger, Logger).
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /><img src="../icons/Static.gif" alt="Static Member" title="Static Member" /></td><td><a href="M_LogicalTaskTree_LogicalNode_ProhibitSnapshots.htm">ProhibitSnapshots</a></td><td>
            Verhindert Snapshots.
            </td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_RaiseNodeLastNotNullLogicalChangedWithTreeEvent.htm">RaiseNodeLastNotNullLogicalChangedWithTreeEvent</a></td><td>
            Triggert das TreeEvent "AnyLastNotNullLogicalHasChanged" und ruft "OnNodeLastNotNullLogicalChanged".
            </td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_RaiseNodeLogicalChanged.htm">RaiseNodeLogicalChanged</a></td><td>
            Kapselt den Aufruf des nicht vererbbaren Events NodeLogicalChanged für
            für die abgeleiteten Klassen NodeList und JobList.
            Diese Routine gibt das Event über NodeLogicalChanged letzten Endes an die UI weiter.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_Refresh.htm">Refresh</a></td><td>
            Sorgt für eine sofortige Neu-Auswertung aller gecashten Zustände.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_RegisterTriggeredNodes.htm">RegisterTriggeredNodes</a></td><td>
            Registriert alle getriggerten Knoten eines Teilbaums bei ihren Triggern.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_Reload.htm">Reload</a></td><td>
            Wird aufgerufen, wenn der Teilbaum neu geladen werden soll.
            </td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_ResetAllTreeEventTriggeringNodes.htm">ResetAllTreeEventTriggeringNodes</a></td><td>
            Setzt alle Knoten im Teilbaum zurück, von denen andere per TreeEvent abhängen.
            </td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_ResetAllTreeNodes.htm">ResetAllTreeNodes</a></td><td>
            Setzt alle Knoten im gesamten Tree zurück.
            </td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_ResetPartTreeNodes.htm">ResetPartTreeNodes</a></td><td>
            Setzt alle Knoten im Teilbaum ab branch zurück.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /><img src="../icons/Static.gif" alt="Static Member" title="Static Member" /></td><td><a href="M_LogicalTaskTree_LogicalNode_ResumeTree.htm">ResumeTree</a></td><td>
            Lässt einen angehaltenen Tree weiterlaufen.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_Run.htm">Run</a></td><td>
            Prüft, ob ein Knoten gestartet werden kann und startet dann den Knoten, seinen Trigger,
            oder beide (über StartNodeOrTrigger).
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_SetTreeCollapsed.htm">SetTreeCollapsed</a></td><td>
            Setzt die Property StartCollapsed für einen ganzen (Teil-)Baum.
            </td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_SetWorkersState.htm">SetWorkersState</a></td><td>
            Setzt einen gemeinsamen (kombinierten) NodeWorkerState 'WorkersState'
            für alle NodeWorker.
            Retourniert NodeWorkersState.
            </td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /><img src="../icons/Static.gif" alt="Static Member" title="Static Member" /></td><td><a href="M_LogicalTaskTree_LogicalNode_SleepIfNecessary.htm">SleepIfNecessary</a></td><td>
            Streut System.Sleeps zur Systementlastung ein.
            Ist feiner regulierbar, als fixe Sleeps in geschachtelten Inner-Loops.
            </td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_ThreadUpdateLastLogical.htm">ThreadUpdateLastLogical</a></td><td>
            Setzt threadsafe LastLogical.
            </td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_ThreadUpdateLastLogicalState.htm">ThreadUpdateLastLogicalState</a></td><td>
            Setzt threadsafe LastLogicalState.
            </td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_ThreadUpdateLastState.htm">ThreadUpdateLastState</a></td><td>
            Setzt threadsafe LastState.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_ToString.htm">ToString</a></td><td>
            Überschriebene ToString()-Methode.
            <br />(Überschreibt <a href="https://learn.microsoft.com/dotnet/api/system.object.tostring" target="_blank" rel="noopener noreferrer">Object<span id="LST92AE5BA6_5" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>ToString<span id="LST92AE5BA6_6" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_NetEti_Globals_GenericTree_1_Traverse.htm">Traverse(Action<span id="LST92AE5BA6_7" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, T<span id="LST92AE5BA6_8" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Geht rekursiv durch den Baum und ruft für jeden Knoten die Action auf.
            <br />(Vererbt von <a href="T_NetEti_Globals_GenericTree_1.htm">GenericTree<span id="LST92AE5BA6_9" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST92AE5BA6_10" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_NetEti_Globals_GenericTree_1_Traverse_1.htm">Traverse(Func<span id="LST92AE5BA6_11" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, T, Object, Object<span id="LST92AE5BA6_12" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Geht rekursiv durch den Baum und ruft für jeden Knoten die Action auf.
            <br />(Vererbt von <a href="T_NetEti_Globals_GenericTree_1.htm">GenericTree<span id="LST92AE5BA6_13" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST92AE5BA6_14" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_NetEti_Globals_GenericTree_1_Traverse_2.htm">Traverse(Int32, Action<span id="LST92AE5BA6_15" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, T<span id="LST92AE5BA6_16" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Rekursive Hilfsroutine für die öffentliche Routine 'Traverse'.
            <br />(Vererbt von <a href="T_NetEti_Globals_GenericTree_1.htm">GenericTree<span id="LST92AE5BA6_17" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST92AE5BA6_18" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_NetEti_Globals_GenericTree_1_Traverse_3.htm">Traverse(Int32, Func<span id="LST92AE5BA6_19" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, T, Object, Object<span id="LST92AE5BA6_20" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Object)</a></td><td>
            Rekursive Hilfsroutine für die öffentliche Routine 'Traverse'.
            <br />(Vererbt von <a href="T_NetEti_Globals_GenericTree_1.htm">GenericTree<span id="LST92AE5BA6_21" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST92AE5BA6_22" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_UnMarkThreadAsInvalid.htm">UnMarkThreadAsInvalid</a></td><td>
            Entfernt thread aus der Liste ungültiger Threads.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_UnregisterTriggeredNode.htm">UnregisterTriggeredNode</a></td><td>
            Setzt den Teilbaum auf nicht startbar.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_UserBreak.htm">UserBreak</a></td><td>
            Wird aufgerufen, wenn der Teilbaum vom Anwender bewusst gestoppt wurde.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_UserRun.htm">UserRun</a></td><td>
            Startet die Verarbeitung dieses Knotens nach einem Start
            durch den Anwender. Gibt die Information, dass der Start
            durch den Anwender erfolgte, im TreeEvent an Run weiter.
            </td></tr></table><a href="#PageHeader">Zurück nach oben</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('seeAlso')" onkeypress="SectionExpandCollapse_CheckKey('seeAlso', event)" tabindex="0"><img id="seeAlsoToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Siehe auch</span></div><div id="seeAlsoSection" class="collapsibleSection"><h4>Referenz</h4><div><a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode Klasse</a></div><div><a href="N_LogicalTaskTree.htm">LogicalTaskTree Namensraum</a></div></div></div></div><div id="PageFooter" class="pageFooter">Naturgemäß basieren viele Erkenntnisse und Entwicklungen auf im Internet frei zugänglichen Informationen. Eventuell fehlende Verweise auf ursprüngliche Autoren sind unbeabsichtigt und werden nach Meldung sofort nachgepflegt.<p>Copyright © 2012-2025 Erik Nagel</p><div class="feedbackLink">Senden Sie Kommentare zu diesem Feature an
        <a id="HT_MailLink" href="mailto:Vishnu%40reallyhuman.net?Subject=Vishnu%20-%20der%20logische%20Prozess-Monitor">Vishnu@reallyhuman.net</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Ihre Rückmeldung wird für die Verbesserung der Dokumentation und des Produktes genutzt. Ihre Email-Adresse wird zu keinem anderen Zweck benutzt und wird nach der Behebung des gemeldeten Problems gelöscht. Während der Arbeit an dem Problem kann es sein dass Sie per Email kontaktiert werden für weitergehende Details oder Abklärung zur Rückmeldung von Ihnen. Nachdem das Problem eingegrenzt worden ist kann es sein dass Sie eine Email erhalten zur Problembehebung.");
        </script></div></body></html>