<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><meta name="Microsoft.Help.SelfBranded" content="true" /><meta name="Language" content="de-de" /><meta name="Microsoft.Help.Locale" content="de-de" /><meta name="Microsoft.Help.TopicLocale" content="de-de" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-de-DE.css" /><script type="text/javascript" src="../scripts/branding.js"></script><title>eigene Views</title><meta name="Microsoft.Help.Id" content="74204d60-cbb3-4f38-8266-aa7af541143f" /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="Microsoft.Help.Category" content="CSharp" /><meta name="Microsoft.Help.Category" content="XML" /><meta name="Description" content="Dieses Kapitel befasst sich mit besonderen, selbst erstellten View-Dlls. Über eigene Views können Sie die Darstellung von Checkern und deren Prüfungsergebnissen in Vishnu nahezu beliebig erweitern und verändern." /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-3.5.1.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="SetDefaultLanguage('cs');"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/ad9ee8b6-c68c-47ec-9584-d85046eb3137.htm" title="Vishnu - der logische Prozess-Monitor" tocid="roottoc">Vishnu - der logische Prozess-Monitor</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/1ccf9fe4-94f8-49ff-9234-506c5ad9daa7.htm" title="fortgeschrittene Themen" tocid="1ccf9fe4-94f8-49ff-9234-506c5ad9daa7">fortgeschrittene Themen</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/ac884694-516c-4c98-a2af-d79cc504d0f6.htm" title="benannte Trigger und Logger" tocid="ac884694-516c-4c98-a2af-d79cc504d0f6">benannte Trigger und Logger</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/628bbc96-dcd7-4563-a515-5a2edf9ebc10.htm" title="Snapshots" tocid="628bbc96-dcd7-4563-a515-5a2edf9ebc10">Snapshots</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/0af46309-8c47-467f-a231-36615b7488d4.htm" title="Anforderungen an Anwender-Module" tocid="0af46309-8c47-467f-a231-36615b7488d4">Anforderungen an Anwender-Module</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/a3f9771a-ac24-46c0-97df-d2bde6a990e8.htm" title="eigene Checker" tocid="a3f9771a-ac24-46c0-97df-d2bde6a990e8">eigene Checker</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="../html/74204d60-cbb3-4f38-8266-aa7af541143f.htm" title="eigene Views" tocid="74204d60-cbb3-4f38-8266-aa7af541143f">eigene Views</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/f724b721-c805-4dbe-8db4-1529c0c68f3d.htm" title="eigene Parameter-Reader" tocid="f724b721-c805-4dbe-8db4-1529c0c68f3d">eigene Parameter-Reader</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/b2bd8510-a131-4466-9fac-66f2033d92a0.htm" title="eigene ValueModifier" tocid="b2bd8510-a131-4466-9fac-66f2033d92a0">eigene ValueModifier</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/c2c472b6-b252-4bd6-bf6a-0b15bc404ea4.htm" title="eigene Trigger" tocid="c2c472b6-b252-4bd6-bf6a-0b15bc404ea4">eigene Trigger</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/3ccc247e-ea3a-47fc-9ed6-4713baf96986.htm" title="eigene Logger" tocid="3ccc247e-ea3a-47fc-9ed6-4713baf96986">eigene Logger</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/f14917bd-1d50-41f0-85ff-14462a770915.htm" title="Checker-Historie loggen" tocid="f14917bd-1d50-41f0-85ff-14462a770915">Checker-Historie loggen</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div id="TopicContent" class="topicContent"><table class="titleTable"><tr><td class="logoColumn"><img src="../icons/Vishnu_64.png" /></td><td class="titleColumn"><h1>eigene Views</h1></td></tr></table><div><p>
				Dieses Kapitel befasst sich mit besonderen, selbst erstellten <strong>View-Dlls</strong>.
				Über eigene <span class="keyword">Views</span> können Sie die Darstellung von Checkern und deren Prüfungsergebnissen
				in <strong>Vishnu</strong> nahezu beliebig erweitern und verändern. <strong>Vishnu</strong> deckt mit seinen schon bereitgestellten
				Standard-<span class="keyword">Views</span> alle wesentlichen Funktionalitäten ab.
				Wie Sie aber schon in <a href="62ca75a8-ba50-4115-93df-b1e76bf6e5f7.htm">ein einfaches Beispiel</a> beim <span class="keyword">Job</span>
				CheckDiskSpace sehen konnten, kann über eigene <span class="keyword">Views</span> Information visuell noch viel
				eingänglicher aufbereitet werden.
				Für die Erstellung eigener DLLs sind jedoch Grundkenntnisse in einer
				<span class="keyword">DotNet</span>-Sprache, z.B. <span class="keyword">C#</span> erforderlich.
			</p><div class="alert"><table><tr><th><img src="../icons/AlertCaution.png" alt="Wichtig" />  Wichtig</th></tr><tr><td><p>
					Der Einstieg ist allerdings für <span class="keyword">C#</span> durch eine
					<strong>Vishnu</strong>-<strong>Visual Studio</strong>-Erweiterung auch ohne Programmierkenntnisse möglich.
					Es wird auf Knopfdruck ein lauffähiges Testprojekt mit Ihrer eigenen neuen
					<span class="keyword">View</span> generiert.
				</p></td></tr></table></div></div><div class="collapsibleAreaRegion" id="UserViewDemoJob"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDDAB')" onkeypress="SectionExpandCollapse_CheckKey('IDDAB', event)" tabindex="0"><img id="IDDABToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />der Demo Job</span></div><div id="IDDABSection" class="collapsibleSection"><p>
					Dies ist die <span class="keyword">JobDescription.xml</span> für den Demo-Job für eigene <span class="keyword">Views</span>:
				</p><div id="IDBBDAB" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDBBDAB_tab1" class="codeSnippetContainerTabSingle">JobDescription.xml</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDBBDAB_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDBBDAB');return false;" title="Copy">Copy</a></div></div><div id="IDBBDAB_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-xml-bracket">&lt;?</span><span class="highlight-xml-tag">xml</span> <span class="highlight-xml-attribute-name">version</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"1.0"</span> <span class="highlight-xml-attribute-name">encoding</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"utf-8"</span><span class="highlight-xml-bracket">?&gt;</span>
<span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">JobDescription</span><span class="highlight-xml-bracket">&gt;</span>
  <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">LogicalName</span><span class="highlight-xml-bracket">&gt;</span>UserViewDemo<span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">LogicalName</span><span class="highlight-xml-bracket">&gt;</span>
  <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">LogicalExpression</span><span class="highlight-xml-bracket">&gt;</span>Predecessor AND UserChecker<span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">LogicalExpression</span><span class="highlight-xml-bracket">&gt;</span>
  <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">Checkers</span> <span class="highlight-xml-attribute-name">type</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"array"</span><span class="highlight-xml-bracket">&gt;</span>
    <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">Checker</span><span class="highlight-xml-bracket">&gt;</span>
      <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">LogicalName</span><span class="highlight-xml-bracket">&gt;</span>Predecessor<span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">LogicalName</span><span class="highlight-xml-bracket">&gt;</span>
      <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">PhysicalPath</span><span class="highlight-xml-bracket">&gt;</span>TrueFalseExceptionChecker.dll<span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">PhysicalPath</span><span class="highlight-xml-bracket">&gt;</span>
      <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">Parameters</span><span class="highlight-xml-bracket">&gt;</span>False:True:Exception|10|Predecessor: Hello World<span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">Parameters</span><span class="highlight-xml-bracket">&gt;</span>
      <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">Trigger</span><span class="highlight-xml-bracket">&gt;</span>
        <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">PhysicalPath</span><span class="highlight-xml-bracket">&gt;</span>TimerTrigger.dll<span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">PhysicalPath</span><span class="highlight-xml-bracket">&gt;</span>
        <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">Parameters</span><span class="highlight-xml-bracket">&gt;</span>S:3|S:15<span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">Parameters</span><span class="highlight-xml-bracket">&gt;</span>
      <span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">Trigger</span><span class="highlight-xml-bracket">&gt;</span>
    <span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">Checker</span><span class="highlight-xml-bracket">&gt;</span>
    <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">Checker</span><span class="highlight-xml-bracket">&gt;</span>
      <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">LogicalName</span><span class="highlight-xml-bracket">&gt;</span>UserChecker<span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">LogicalName</span><span class="highlight-xml-bracket">&gt;</span>
      <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">PhysicalPath</span><span class="highlight-xml-bracket">&gt;</span>Plugin\UserChecker.dll<span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">PhysicalPath</span><span class="highlight-xml-bracket">&gt;</span>
      <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">UserControlPath</span><span class="highlight-xml-bracket">&gt;</span>Plugin\UserView.dll<span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">UserControlPath</span><span class="highlight-xml-bracket">&gt;</span>
      <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">Trigger</span><span class="highlight-xml-bracket">&gt;</span>
        <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">Reference</span><span class="highlight-xml-bracket">&gt;</span>True<span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">Reference</span><span class="highlight-xml-bracket">&gt;</span>
        <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">Parameters</span><span class="highlight-xml-bracket">&gt;</span>Predecessor<span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">Parameters</span><span class="highlight-xml-bracket">&gt;</span>
      <span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">Trigger</span><span class="highlight-xml-bracket">&gt;</span>
    <span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">Checker</span><span class="highlight-xml-bracket">&gt;</span>
  <span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">Checkers</span><span class="highlight-xml-bracket">&gt;</span>
<span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">JobDescription</span><span class="highlight-xml-bracket">&gt;</span></pre></div></div></div><p>
					Den wesentlichen Unterschied zum Demo-Job für eigene Checker (siehe <a href="a3f9771a-ac24-46c0-97df-d2bde6a990e8.htm">eigene Checker</a>)
					macht die zusätzliche Anweisung
					<span class="keyword">&lt;UserControlPath&gt;Plugin\UserView.dll&lt;/UserControlPath&gt;</span>/<span class="keyword">&lt;UserControlPath&gt;Plugin\UserView.dll&lt;/UserControlPath&gt;</span>.
				</p><p>
					Hierüber wird <strong>Vishnu</strong> mitgeteilt, dass sich im Verzeichnis <strong>Plugin</strong> eine eigene
					<span class="keyword">DLL</span><strong> UserView.dll</strong> befindet, die <strong>Vishnu</strong> anstelle
					der Standard-<span class="keyword">View</span> verwenden soll.
				</p></div><div class="collapsibleAreaRegion" id="UserViewDemoProjektErzeugung"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDEAB')" onkeypress="SectionExpandCollapse_CheckKey('IDEAB', event)" tabindex="0"><img id="IDEABToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />das Demo Projekt - schnell erzeugen</span></div><div id="IDEABSection" class="collapsibleSection"><p>
					Über die Visual Studio Erweiterung <strong>Vishnu_UserView_VSIX.vsix</strong>
					(per Doppelklick installieren) können Sie Visual Studio eine C#-Projektvorlage für eigene Views hinzufügen:
				</p><div class="alert"><table><tr><th><img src="../icons/AlertNote.png" alt="Hinweis" />  Hinweis</th></tr><tr><td><p><a href="https://neteti.de/extensions/free/64/Vishnu_UserView_VSIX.vsix" target="_blank" alt="Vishnu_UserView_VSIX.vsix">
								Vishnu_UserView_VSIX.vsix download link
							</a></p></td></tr></table></div><div class="mediaNear"><img alt="Vishnu User View VSIX" src="../media/Vishnu_UserView_VSIX.png" /></div><p>
					Diese Projektvorlage kann dann später für ein neues Projekt verwendet werden:
				</p><div class="alert"><table><tr><th><img src="../icons/AlertCaution.png" alt="Achtung" />  Achtung</th></tr><tr><td><p>
						Es erfolgen während der Generierung der Projekte zwei Fehlermeldungen, dass
						dem Projekt nicht alle erforderlichen Pakete hinzugefügt werden könnten.
						Diese treffen aber nicht zu und können ignoriert werden.
					</p></td></tr></table></div><div class="mediaNear"><img alt="Vishnu User View VSIX select" src="../media/Vishnu_UserView_VSIX_select.png" /></div><p>
					Es wird eine Projektmappe mit einem View-Projekt und einem Testprojekt generiert.
				</p><div class="mediaNear"><img alt="User View Solution" src="../media/UserViewSolution.png" /></div><div class="alert"><table><tr><th><img src="../icons/AlertNote.png" alt="Hinweis" />  Hinweis</th></tr><tr><td><p>
						Die UserView und das Testprojekt sind sofort lauffähig und die UserView kann mit der
						implementierten Demo-Funktionalität als <strong>Vishnu</strong>-View eingesetzt werden.
					</p><p>
						Hier die Ausgabe des Testprojekts im Debugger:
					</p></td></tr></table></div><div class="mediaNear"><img alt="User View Demo Run" src="../media/UserViewDemoRun.png" /></div></div><div class="collapsibleAreaRegion" id="UserViewDemoProjektDetails"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDFAB')" onkeypress="SectionExpandCollapse_CheckKey('IDFAB', event)" tabindex="0"><img id="IDFABToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />das Demo Projekt - Details</span></div><div id="IDFABSection" class="collapsibleSection"><p>
					Die Klasse <strong>UserChecker_ReturnObject</strong> im durch die Projektvorlage generierten Projekt (s.o.)
					sollte normalerweise identisch zur ReturnObject-Klasse des entsprechenden Checkers aus dem passenden
					<strong>UserChecker</strong>-Projekt sein.
				</p><div class="alert"><table><tr><th><img src="../icons/AlertNote.png" alt="Hinweis" />  Hinweis</th></tr><tr><td><p>
						Wenn Sie später in eigenen Projekten die doppelte Definition
						des <span class="keyword">ReturnObject</span>s vermeiden wollen, können Sie stattdessen auch mit einer Referenz
						auf die passende <span class="keyword">Checker.dll</span> arbeiten. Um das Demo-Projekt einfach zu halten,
						wurde hier die <span class="keyword">UserChecker_ReturnObject.cs</span> aus dem UserCheckerDemo-Projekt kopiert.
					</p></td></tr></table></div><p>
					In der Klasse <strong>ResultViewModel</strong> müssen an zwei Stellen die darzustellenden Eigenschaften
					(<span class="keyword">Properties</span>) des <span class="keyword">ReturnObject</span>s
					eingefügt werden:
				</p><div id="IDDBFAB" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDDBFAB_tab1" class="codeSnippetContainerTabSingle">Auszug aus der Klasse ResultViewModel</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDDBFAB_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDDBFAB');return false;" title="Copy">Copy</a></div></div><div id="IDDBFAB_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">    ...
<span class="highlight-comment">// TODO: Hier müssen die darzustellenden Properties aus UserChecker_ReturnObject hinzugefügt werden:</span>
<span class="highlight-comment">/// &lt;summary&gt;</span>
<span class="highlight-comment">/// Demo-Property.</span>
<span class="highlight-comment">/// Das UserChecker_ReturnObject kann prinzipiell beliebige öffentliche Properties besitzen.</span>
<span class="highlight-comment">/// In diesem ViewModel werden nur Properties berücksichtigt, die in den Serialisierungs-</span>
<span class="highlight-comment">/// Deserialisierungsroutinen des UserCheckers entsprechend berücksichtigt wurden.</span>
<span class="highlight-comment">/// &lt;/summary&gt;</span>
<span class="highlight-keyword">public</span> <span class="highlight-keyword">string</span> DefaultResultProperty
{
    <span class="highlight-keyword">get</span>
    {
        <span class="highlight-keyword">string</span> prop = <span class="highlight-keyword">this</span>.GetResultProperty&lt;<span class="highlight-keyword">string</span>&gt;(<span class="highlight-keyword">typeof</span>(UserChecker_ReturnObject), <span class="highlight-literal">"DefaultResultProperty"</span>);
        <span class="highlight-keyword">return</span> prop;
    }
}

    ...

<span class="highlight-comment">/// &lt;summary&gt;</span>
<span class="highlight-comment">/// Wird ausgeführt, wenn sich die Result-Property des ViewModels</span>
<span class="highlight-comment">/// des zugehörigen Vishnu-Knotens geändert hat.</span>
<span class="highlight-comment">/// &lt;/summary&gt;</span>
<span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> HandleResultPropertyChanged()
{
            ...
    <span class="highlight-comment">// TODO: Hier müssen die darzustellenden Properties aus UserChecker_ReturnObject hinzugefügt werden:</span>
    <span class="highlight-keyword">this</span>.RaisePropertyChanged(<span class="highlight-literal">"DefaultResultProperty"</span>);

    <span class="highlight-comment">// TODO: Eventuelle zusätzliche Buttons müssten hier zum Update gezwungen werden,</span>
    <span class="highlight-comment">// da die Verarbeitung in einem anderen Thread läuft, z.B.:</span>
    <span class="highlight-comment">// this._btnXYZ...RelayCommand.UpdateCanExecuteState(this.Dispatcher);</span>
}

    ...</pre></div></div></div><div class="alert"><table><tr><th><img src="../icons/AlertNote.png" alt="Hinweis" />  Hinweis</th></tr><tr><td><p>
						Der Code-Auszug zeigt nur die absolut notwendigen Änderungen. Erweiterungen zum Beispiel für eigene Buttons
						sind in der Originalquelle angedeutet.
					</p></td></tr></table></div></div><div class="collapsibleAreaRegion" id="Serialisierung"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDGAB')" onkeypress="SectionExpandCollapse_CheckKey('IDGAB', event)" tabindex="0"><img id="IDGABToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Serialisierung/De-Serialisierung</span></div><div id="IDGABSection" class="collapsibleSection"><p>
					Bisher wurde ein Thema noch nicht behandelt, das für die korrekte Darstellung von Ergebnissen
					eigener <span class="keyword">Checker</span> in eigenen <span class="keyword">Views</span>
					unerlässlich ist: die Serialisierung und De-Serialisierung des <span class="keyword">UserChecker_ReturnObject</span>es.
				</p><p><strong>Vishnu</strong> behandelt <span class="keyword">UserChecker_ReturnObject</span>e bei der Anzeige in den
					Standard-<span class="keyword">View</span>s einfach als Zeichenketten. Dies ist aber für die Aufbereitung
					strukturierter Inhalte (<span class="keyword">Properties</span>) unzureichend. Hierfür muss auf die
					<span class="keyword">Properties</span> im Einzelnen zugegriffen werden können.
					Die Klasse <strong>UserChecker_ReturnObject</strong> enthält für diesen Zweck folgende Routinen (Überblick):
				</p><ul><li><p><strong>Deserialisierungs-Konstruktor</strong></p></li><li><p><strong>Serialisierungs-Hilfsroutine</strong></p></li><li><p><strong>Überschriebene ToString()-Methode</strong></p></li><li><p>Überschriebene Vergleichsmethode</p></li><li><p>Überschriebene Hashcode Erzeugungsroutine</p></li></ul><p>
					Alle fünf Routinen müssen vorhanden sein und in den oben fett gedruckten drei Routinen
					müssen die Properties von <strong>UserChecker_ReturnObjecten</strong> behandelt werden.
					Details sind im nachfolgenden Code-Auschnitt der <strong>UserChecker_ReturnObject</strong>-Klasse zu sehen:
				</p><div id="IDEBGAB" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDEBGAB_tab1" class="codeSnippetContainerTabSingle">Auszug aus der Klasse UserChecker_ReturnObject</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDEBGAB_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDEBGAB');return false;" title="Copy">Copy</a></div></div><div id="IDEBGAB_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">    ...
<span class="highlight-comment">/// &lt;summary&gt;</span>
<span class="highlight-comment">/// Deserialisierungs-Konstruktor.</span>
<span class="highlight-comment">/// &lt;/summary&gt;</span>
<span class="highlight-comment">/// &lt;param name="info"&gt;Property-Container.&lt;/param&gt;</span>
<span class="highlight-comment">/// &lt;param name="context"&gt;Übertragungs-Kontext.&lt;/param&gt;</span>
<span class="highlight-keyword">protected</span> UserChecker_ReturnObject(SerializationInfo info, StreamingContext context)
{
    <span class="highlight-keyword">this</span>.DefaultResultProperty = info.GetString(<span class="highlight-literal">"DefaultResultProperty"</span>);
}

<span class="highlight-comment">/// &lt;summary&gt;</span>
<span class="highlight-comment">/// Serialisierungs-Hilfsroutine: holt die Objekt-Properties in den Property-Container.</span>
<span class="highlight-comment">/// &lt;/summary&gt;</span>
<span class="highlight-comment">/// &lt;param name="info"&gt;Property-Container.&lt;/param&gt;</span>
<span class="highlight-comment">/// &lt;param name="context"&gt;Serialisierungs-Kontext.&lt;/param&gt;</span>
<span class="highlight-keyword">public</span> <span class="highlight-keyword">virtual</span> <span class="highlight-keyword">void</span> GetObjectData(SerializationInfo info, StreamingContext context)
{
    info.AddValue(<span class="highlight-literal">"DefaultResultProperty"</span>, <span class="highlight-keyword">this</span>.DefaultResultProperty);
}

<span class="highlight-comment">/// &lt;summary&gt;</span>
<span class="highlight-comment">/// Überschriebene ToString()-Methode - stellt alle öffentlichen Properties</span>
<span class="highlight-comment">/// als einen aufbereiteten String zur Verfügung.</span>
<span class="highlight-comment">/// &lt;/summary&gt;</span>
<span class="highlight-comment">/// &lt;returns&gt;Alle öffentlichen Properties als ein String aufbereitet.&lt;/returns&gt;</span>
<span class="highlight-keyword">public</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">string</span> ToString()
{
    StringBuilder str = <span class="highlight-keyword">new</span> StringBuilder(<span class="highlight-keyword">this</span>.DefaultResultProperty);
    <span class="highlight-comment">// str.Append(...);</span>
    <span class="highlight-keyword">return</span> str.ToString();
}

<span class="highlight-comment">/// &lt;summary&gt;</span>
<span class="highlight-comment">/// Überschriebene Vergleichsmethode - vergleicht dieses Result mit</span>
<span class="highlight-comment">/// einem übergebenen Result nach Inhalt.</span>
<span class="highlight-comment">/// &lt;/summary&gt;</span>
<span class="highlight-comment">/// &lt;param name="obj"&gt;Das zu vergleichende Result.&lt;/param&gt;</span>
<span class="highlight-comment">/// &lt;returns&gt;True, wenn das übergebene Result inhaltlich gleich diesem Result ist.&lt;/returns&gt;</span>
<span class="highlight-keyword">public</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">bool</span> Equals(<span class="highlight-keyword">object</span> obj)
{
    <span class="highlight-keyword">if</span> (obj == <span class="highlight-keyword">null</span> || <span class="highlight-keyword">this</span>.GetType() != obj.GetType())
    {
        <span class="highlight-keyword">return</span> <span class="highlight-keyword">false</span>;
    }
    <span class="highlight-keyword">if</span> (Object.ReferenceEquals(<span class="highlight-keyword">this</span>, obj))
    {
        <span class="highlight-keyword">return</span> <span class="highlight-keyword">true</span>;
    }
    <span class="highlight-keyword">if</span> (<span class="highlight-keyword">this</span>.ToString() != obj.ToString())
    {
        <span class="highlight-keyword">return</span> <span class="highlight-keyword">false</span>;
    }
    <span class="highlight-keyword">return</span> <span class="highlight-keyword">true</span>;
}

<span class="highlight-comment">/// &lt;summary&gt;</span>
<span class="highlight-comment">/// Überschriebene Hashcode Erzeugungsroutine - Erzeugt einen</span>
<span class="highlight-comment">/// eindeutigen Hashcode für dieses Result.</span>
<span class="highlight-comment">/// &lt;/summary&gt;</span>
<span class="highlight-comment">/// &lt;returns&gt;Hashcode (int).&lt;/returns&gt;</span>
<span class="highlight-keyword">public</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">int</span> GetHashCode()
{
    <span class="highlight-keyword">return</span> (<span class="highlight-keyword">this</span>.ToString()).GetHashCode();
}
    ...</pre></div></div></div><div class="alert"><table><tr><th><img src="../icons/AlertNote.png" alt="Hinweis" />  Hinweis</th></tr><tr><td><p>
						Die Routinen zur Serialisierung, bzw. De-Serialisierung spielen übrigens auch bei der Darstellung von
						<a href="628bbc96-dcd7-4563-a515-5a2edf9ebc10.htm">Snapshots</a> eine wichtige Rolle.
					</p></td></tr></table></div></div><div class="collapsibleAreaRegion" id="SieheAuch"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDHAB')" onkeypress="SectionExpandCollapse_CheckKey('IDHAB', event)" tabindex="0"><img id="IDHABToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Siehe auch</span></div><div id="IDHABSection" class="collapsibleSection"><p><a href="a3f9771a-ac24-46c0-97df-d2bde6a990e8.htm">eigene Checker</a></p></div></div></div><div id="PageFooter" class="pageFooter">Naturgemäß basieren viele Erkenntnisse und Entwicklungen auf im Internet frei zugänglichen Informationen. Eventuell fehlende Verweise auf ursprüngliche Autoren sind unbeabsichtigt und werden nach Meldung sofort nachgepflegt.<p>Copyright © 2012-2025 Erik Nagel</p><div class="feedbackLink">Senden Sie Kommentare zu diesem Feature an
        <a id="HT_MailLink" href="mailto:Vishnu%40reallyhuman.net?Subject=Vishnu%20-%20der%20logische%20Prozess-Monitor">Vishnu@reallyhuman.net</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Ihre Rückmeldung wird für die Verbesserung der Dokumentation und des Produktes genutzt. Ihre Email-Adresse wird zu keinem anderen Zweck benutzt und wird nach der Behebung des gemeldeten Problems gelöscht. Während der Arbeit an dem Problem kann es sein dass Sie per Email kontaktiert werden für weitergehende Details oder Abklärung zur Rückmeldung von Ihnen. Nachdem das Problem eingegrenzt worden ist kann es sein dass Sie eine Email erhalten zur Problembehebung.");
        </script></div></body></html>