<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><meta name="Microsoft.Help.SelfBranded" content="true" /><meta name="Language" content="de-de" /><meta name="Microsoft.Help.Locale" content="de-de" /><meta name="Microsoft.Help.TopicLocale" content="de-de" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-de-DE.css" /><script type="text/javascript" src="../scripts/branding.js"></script><title>NodeConnector Klasse</title><meta name="Title" content="NodeConnector Klasse" /><meta name="Microsoft.Help.Id" content="T:LogicalTaskTree.NodeConnector" /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="System.Keywords" content="LogicalTaskTree.NodeConnector Klasse" /><meta name="System.Keywords" content="NodeConnector Klasse" /><meta name="Microsoft.Help.F1" content="LogicalTaskTree.NodeConnector" /><meta name="Microsoft.Help.F1" content="NodeConnector" /><meta name="container" content="LogicalTaskTree" /><meta name="file" content="T_LogicalTaskTree_NodeConnector" /><meta name="guid" content="T_LogicalTaskTree_NodeConnector" /><meta name="Description" content="Wird automatisch generiert, wenn der Name eines Einzelknotens innerhalb eines logischen Ausdrucks mehrfach auftritt." /><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-3.5.1.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="SetDefaultLanguage('cs');"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/ad9ee8b6-c68c-47ec-9584-d85046eb3137.htm" title="Vishnu - der logische Prozess-Monitor" tocid="roottoc">Vishnu - der logische Prozess-Monitor</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/R_Project_Vishnu_doc_de.htm" title="Vishnu - technische Dokumentation" tocid="R_Project_Vishnu_doc_de">Vishnu - technische Dokumentation</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/N_LogicalTaskTree.htm" title="LogicalTaskTree" tocid="N_LogicalTaskTree">LogicalTaskTree</a></div><div class="toclevel1 current" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/T_LogicalTaskTree_NodeConnector.htm" title="NodeConnector Klasse" tocid="T_LogicalTaskTree_NodeConnector">NodeConnector Klasse</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Overload_LogicalTaskTree_NodeConnector__ctor.htm" title="NodeConnector Konstruktor" tocid="Overload_LogicalTaskTree_NodeConnector__ctor">NodeConnector Konstruktor</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Properties_T_LogicalTaskTree_NodeConnector.htm" title="NodeConnector Eigenschaften" tocid="Properties_T_LogicalTaskTree_NodeConnector">NodeConnector Eigenschaften</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Methods_T_LogicalTaskTree_NodeConnector.htm" title="NodeConnector Methoden" tocid="Methods_T_LogicalTaskTree_NodeConnector">NodeConnector Methoden</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/Events_T_LogicalTaskTree_NodeConnector.htm" title="NodeConnector Ereignisse" tocid="Events_T_LogicalTaskTree_NodeConnector">NodeConnector Ereignisse</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Fields_T_LogicalTaskTree_NodeConnector.htm" title="NodeConnector Felder" tocid="Fields_T_LogicalTaskTree_NodeConnector">NodeConnector Felder</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div id="TopicContent" class="topicContent"><table class="titleTable"><tr><td class="logoColumn"><img src="../icons/Vishnu_64.png" /></td><td class="titleColumn"><h1>Node<wbr />Connector Klasse</h1></td></tr></table><div class="summary">
             Wird automatisch generiert, wenn der Name eines Einzelknotens
             innerhalb eines logischen Ausdrucks mehrfach auftritt. Wirkt nach außen so,
             als ob der Knoten zweimal (oder mehrmals) im Tree aufträte, verweist intern
             aber nur auf den ersten Knoten dieses Namens. Dadurch wird sichergestellt,
             dass die zu dem ursprünglichen Knoten gehörige Verarbeitung in Tree nur
             einmal ausgeführt wird.
             Filtert das ReturnObject eines INodeCheckers nach Typ und ggf. Format-String.
             </div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDDA')" onkeypress="SectionExpandCollapse_CheckKey('IDDA', event)" tabindex="0"><img id="IDDAToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Vererbungshierarchie</span></div><div id="IDDASection" class="collapsibleSection"><a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">System<span id="LST85D2CB4F_0" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>Object</a><br />  <a href="T_NetEti_Globals_GenericTree_1.htm">NetEti.Globals<span id="LST85D2CB4F_1" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>GenericTree</a><span id="LST85D2CB4F_2" data-languageSpecificText="cpp=&lt;|cs=&lt;|fs=&lt;|vb=(Of |nu=("></span><a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a><span id="LST85D2CB4F_3" data-languageSpecificText="cpp=&gt;|cs=&gt;|fs=&gt;|vb=)|nu=)"></span><br />    <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalTaskTree<span id="LST85D2CB4F_4" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>LogicalNode</a><br />      <a href="T_LogicalTaskTree_NodeParent.htm">LogicalTaskTree<span id="LST85D2CB4F_5" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>NodeParent</a><br />        <span class="selflink">LogicalTaskTree<span id="LST85D2CB4F_6" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>NodeConnector</span><br />          <a href="T_LogicalTaskTree_JobConnector.htm">LogicalTaskTree<span id="LST85D2CB4F_7" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>JobConnector</a><br /></div><br /><strong>Namensraum:</strong> <a href="N_LogicalTaskTree.htm">LogicalTaskTree</a><br /><strong>Assembly:</strong> LogicalTaskTree (in LogicalTaskTree.dll) Version: 1.0.0+d75bac576d44afb64cfff79fd3665c8ca1172cbc<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDB')" onkeypress="SectionExpandCollapse_CheckKey('IDB', event)" tabindex="0"><img id="IDBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="IDBSection" class="collapsibleSection"><div id="IDAB" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDAB_tab1" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','cs','1','4');return false;">C#</a></div><div id="IDAB_tab2" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','vb','2','4');return false;">VB</a></div><div id="IDAB_tab3" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','cpp','3','4');return false;">C++</a></div><div id="IDAB_tab4" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','fs','4','4');return false;">F#</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDAB_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDAB');return false;" title="Copy">Copy</a></div></div><div id="IDAB_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">NodeConnector</span> : <span class="identifier">NodeParent</span></pre></div><div id="IDAB_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Class</span> <span class="identifier">NodeConnector</span>
	<span class="keyword">Inherits</span> <span class="identifier">NodeParent</span></pre></div><div id="IDAB_code_Div3" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">ref class</span> <span class="identifier">NodeConnector</span> : <span class="keyword">public</span> <span class="identifier">NodeParent</span></pre></div><div id="IDAB_code_Div4" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">type</span> <span class="identifier">NodeConnector</span> = 
    <span class="keyword">class</span>
        <span class="keyword">inherit</span> <span class="identifier">NodeParent</span>
    <span class="keyword">end</span></pre></div></div></div></div><p>Der <span class="selflink">NodeConnector</span> Typ exponiert die folgenden Member.</p><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDA0BC0EA')" onkeypress="SectionExpandCollapse_CheckKey('IDA0BC0EA', event)" tabindex="0"><img id="IDA0BC0EAToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Konstruktoren</span></div><div id="IDA0BC0EASection" class="collapsibleSection"><table id="ConstructorList" class="members"><tr><th class="iconColumn"> </th><th>Name</th><th>Beschreibung</th></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_NodeConnector__ctor.htm">NodeConnector(LogicalNode, JobList, TreeParameters)</a></td><td>
            Konstruktor für ein Snapshot-Dummy-Element.
            Dieser Konstruktor leitet für den Konstruktor von NodeConnector direkt an LogicalNode weiter.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_NodeConnector__ctor_1.htm">NodeConnector(String, LogicalNode, JobList, TreeParameters, LogicalNode, NodeCheckerBase)</a></td><td>
            Konstruktor
            </td></tr></table><a href="#PageHeader">Zurück nach oben</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID03C0EA')" onkeypress="SectionExpandCollapse_CheckKey('ID03C0EA', event)" tabindex="0"><img id="ID03C0EAToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Eigenschaften</span></div><div id="ID03C0EASection" class="collapsibleSection"><table id="PropertyList" class="members"><tr><th class="iconColumn"> </th><th>Name</th><th>Beschreibung</th></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_BreakWithResult.htm">BreakWithResult</a></td><td>
            Ein Teilbaum kann u.U. schon ein eindeutiges logisches Ergebnis haben,
            bevor alle Kinder ihre Verarbeitung beendet haben.
            Bei BreakWithResult=True werden diese dann abgebochen, wenn in dem
            bereffenden Ast keine Trigger aktiv sind.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_CanTreeStart.htm">CanTreeStart</a></td><td>
            Gibt an, ob ein (Teil-)Baum gestartet werden kann, d.h. dass bei einem
            Knoten mit Kindern alle seine Kinder (rekursiv) gestartet werden können
            oder bei einem Endknoten (Checker) ohne Kinder dieser selbst gestartet werden kann.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_NodeConnector_Checker.htm">Checker</a></td><td>
            Der Arbeitsprozess - hier wird mit der Welt kommuniziert,
            externe Prozesse gestartet oder beobachtet.
            </td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_NetEti_Globals_GenericTree_1_Children.htm">Children</a></td><td>
            Liste der Kinder eines Knotens.
            <br />(Vererbt von <a href="T_NetEti_Globals_GenericTree_1.htm">GenericTree<span id="LST85D2CB4F_8" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST85D2CB4F_9" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_DebugMode.htm">DebugMode</a></td><td>
            Bei True können zusätzliche Testausgaben erfolgen.
            Default: False.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_NodeParent_HookedTo.htm">HookedTo</a></td><td>
            Enthält Komma-separiert TreeParams.Name und IdInfo der Knoten, in deren
            Events sich dieser NodeParent eingehängt hat oder den Text "NULL".
            <br />(Vererbt von <a href="T_LogicalTaskTree_NodeParent.htm">NodeParent</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_Id.htm">Id</a></td><td>
            Die eindeutige Kennung des Knotens.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_IdInfo.htm">IdInfo</a></td><td>
            Die eindeutige Kennung des Knotens (identisch zur Property Id).
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_IdPath.htm">IdPath</a></td><td>
            Auf eine durch '/' getrennte Kette von Ids reduzierter Pfad zum Knoten.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_InitNodes.htm">InitNodes</a></td><td>
            Bei True werden alle Knoten im Tree resettet, wenn dieser Knoten gestartet wird.
            Kann für Loops in Controlled-Jobs verwendet werden.
            Default: false.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_IsActive.htm">IsActive</a></td><td>
            Bei true befindet sich der Teilbaum/Knoten in aktivem (gestartetem) Zustand.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_IsGlobal.htm">IsGlobal</a></td><td>
            Bei true wird dieser Knoten als Referenzknoten angelegt, wenn irgendwo im Tree
            (nicht nur im aktuellen Job) der Name des Knotens schon gefunden wurde.
            Bei false wird nur im aktuellen Job nach gleichnamigen Knoten gesucht.
            Default: false.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_IsInSleepTime.htm">IsInSleepTime</a></td><td>
            Returns true, wenn gerade eine vom User definierte Ruhezeit
            für Vishnu-Akteure (Checker) läuft.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_IsInSnapshot.htm">IsInSnapshot</a></td><td>
            Bei True befindet sich diese LogicalNode innerhalb eines Snapshots.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_IsSnapshotDummy.htm">IsSnapshotDummy</a></td><td>
            Bei True dient dieser Knoten nur zur Anzeige und lässt keine weiteren Funktionen zu.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_LastExecutingTreeEvent.htm">LastExecutingTreeEvent</a></td><td>
            Das letzte auslösende TreeEvent (bei TreeEvent-getriggerten Knoten)
            oder null.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_LastLogical.htm">LastLogical</a></td><td>
            Der letzte logische Zustand eines Knotens.
            Für den Zugriff auf Zustände von Child-Knoten, ohne dort
            die Ermittlung der Zustände erneut anzustoßen.
            Senkt die Prozessorlast.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_LastLogicalState.htm">LastLogicalState</a></td><td>
            Der letzte Ergebniszustand eines Knotens.
            Für den Zugriff auf Zustände von Child-Knoten, ohne dort
            die Ermittlung der Zustände erneut anzustoßen.
            Senkt die Prozessorlast.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_LastNotNullLogical.htm">LastNotNullLogical</a></td><td>
            Merkfeld für den letzten Zustand von Logical, der nicht null war;
            wird benötigt, damit Worker nur dann gestartet werden, wenn sich
            der Zustand von Logical signifikant geändert hat und nicht jedesmal,
            wenn der Checker arbeitet (Logical = null).
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_NodeConnector_LastResult.htm">LastResult</a></td><td>
            Das letzte Verarbeitungsergebnis für diesen Knoten.
            <br />(Überschreibt <a href="P_LogicalTaskTree_LogicalNode_LastResult.htm">LogicalNode<span id="LST85D2CB4F_10" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>LastResult</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_NodeConnector_LastRun.htm">LastRun</a></td><td>
            Zeitpunkt des letzten Starts des Knoten.
            <br />(Überschreibt <a href="P_LogicalTaskTree_LogicalNode_LastRun.htm">LogicalNode<span id="LST85D2CB4F_11" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>LastRun</a>)</td></tr><tr><td><img src="../icons/protProperty.gif" alt="Protected Eigenschaft" title="Protected Eigenschaft" /></td><td><a href="P_LogicalTaskTree_NodeParent_LastSingleNodesFinished.htm">LastSingleNodesFinished</a></td><td>
            Die letzte Anzahl beendeter Endknoten-Kinder eines Knotens.
            Für den Zugriff auf Zustände von Child-Knoten, ohne dort
            die Ermittlung der Zustände erneut anzustoßen.
            Senkt die Prozessorlast.
            <br />(Vererbt von <a href="T_LogicalTaskTree_NodeParent.htm">NodeParent</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_LastState.htm">LastState</a></td><td>
            Der letzte Verarbeitungszustand eines Knotens.
            Für den Zugriff auf Zustände von Child-Knoten, ohne dort
            die Ermittlung der Zustände erneut anzustoßen.
            Senkt die Prozessorlast.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_Level.htm">Level</a></td><td>
            Die Hierarchie-Ebene des Knotens.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_LevelInfo.htm">LevelInfo</a></td><td>
            Die Hierarchie-Ebene des Knotens (identisch zur Property Level).
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_LockName.htm">LockName</a></td><td>
            Optionaler zum globalen Sperren verwendeter Name.
            Wird verwendet, wenn ThreadLocked gesetzt ist.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_Logger.htm">Logger</a></td><td>
            Ein optionaler Logger, der bei bestimmten Ereignissen
            aufgerufen wird oder null.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_NodeConnector_Logical.htm">Logical</a></td><td>
            Der logische Zustand des Knotens.
            <br />(Überschreibt <a href="P_LogicalTaskTree_LogicalNode_Logical.htm">LogicalNode<span id="LST85D2CB4F_12" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>Logical</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_NodeConnector_LogicalState.htm">LogicalState</a></td><td>
            Der Ergebnis-Zustand des Knotens:
            None, Done, Fault, Timeout, UserAbort.
            <br />(Überschreibt <a href="P_LogicalTaskTree_LogicalNode_LogicalState.htm">LogicalNode<span id="LST85D2CB4F_13" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>LogicalState</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_Name.htm">Name</a></td><td>
            "Menschenfreundliche" Darstellung des Knotens.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_NameId.htm">NameId</a></td><td>
            Kombination aus Name und Id des Knotens.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_NameInfo.htm">NameInfo</a></td><td>
            "Menschenfreundliche" Darstellung des Knotens.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_NodeConnector_NextRun.htm">NextRun</a></td><td>
            Zeitpunkt des nächsten Starts des Knotens (wenn bekannt) oder DateTime.MinValue.
            <br />(Überschreibt <a href="P_LogicalTaskTree_LogicalNode_NextRun.htm">LogicalNode<span id="LST85D2CB4F_14" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>NextRun</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_NodeConnector_NextRunInfo.htm">NextRunInfo</a></td><td>
            Info-Text über den nächsten Start des Knotens (wenn bekannt) oder null.
            <br />(Überschreibt <a href="P_LogicalTaskTree_LogicalNode_NextRunInfo.htm">LogicalNode<span id="LST85D2CB4F_15" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>NextRunInfo</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_NodeType.htm">NodeType</a></td><td>
            Der Knotentyp:
              None, NodeConnector, ValueModifier, JobConnector, Constant, Checker, NodeList, JobList, Snapshot.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_ParentView.htm">ParentView</a></td><td>
            Das Parent-Control, in dem dieser Knoten dargestellt wird.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_Path.htm">Path</a></td><td>
            Der Pfad zum Knoten bestehend aus einer durch '/' getrennte Kette von NameIds:
            NameId ist Name + "(" + Id + ")" bei Knoten mit Name != null,
                   nur Id bei Name = null.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_PathInfo.htm">PathInfo</a></td><td>
            Der Pfad zum Knoten (identisch zur Property Path).
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_NodeConnector_ReferencedNodeId.htm">ReferencedNodeId</a></td><td>
            Id des ursprünglich referenzierten Knotens.
            <br />(Überschreibt <a href="P_LogicalTaskTree_LogicalNode_ReferencedNodeId.htm">LogicalNode<span id="LST85D2CB4F_16" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>ReferencedNodeId</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_NodeConnector_ReferencedNodeName.htm">ReferencedNodeName</a></td><td>
            Name eines ursprünglich referenzierten Knotens oder null.
            <br />(Überschreibt <a href="P_LogicalTaskTree_LogicalNode_ReferencedNodeName.htm">LogicalNode<span id="LST85D2CB4F_17" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>ReferencedNodeName</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_NodeConnector_ReferencedNodePath.htm">ReferencedNodePath</a></td><td>
            Pfad des ursprünglich referenzierten Knotens.
            <br />(Überschreibt <a href="P_LogicalTaskTree_LogicalNode_ReferencedNodePath.htm">LogicalNode<span id="LST85D2CB4F_18" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>ReferencedNodePath</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_NodeConnector_SingleNodes.htm">SingleNodes</a></td><td>
            Property für die Fortschrittsberechnung.
            <br />(Überschreibt <a href="P_LogicalTaskTree_LogicalNode_SingleNodes.htm">LogicalNode<span id="LST85D2CB4F_19" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>SingleNodes</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_NodeConnector_SingleNodesFinished.htm">SingleNodesFinished</a></td><td>
            Property für die Fortschrittsberechnung.
            <br />(Überschreibt <a href="P_LogicalTaskTree_LogicalNode_SingleNodesFinished.htm">LogicalNode<span id="LST85D2CB4F_20" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>SingleNodesFinished</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_SleepTimeFrom.htm">SleepTimeFrom</a></td><td>
            Der Beginn einer möglichen Ruhezeit.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_SleepTimeTo.htm">SleepTimeTo</a></td><td>
            Das Ende einer möglichen Ruhezeit.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_StartCollapsed.htm">StartCollapsed</a></td><td>
            Bei True wird der Job beim Start zusammengeklappt angezeigt, wenn die UI dies unterstützt.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_NodeConnector_State.htm">State</a></td><td>
            Der Verarbeitungszustand des Knotens:
            None, Waiting, Working, Finished, Busy (= Waiting | Working) oder CanStart (= None|Finished).
            <br />(Überschreibt <a href="P_LogicalTaskTree_LogicalNode_State.htm">LogicalNode<span id="LST85D2CB4F_21" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>State</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_ThreadLocked.htm">ThreadLocked</a></td><td>
            Bei True wird jeder Thread über die Klasse gesperrt, so dass
            nicht Thread-sichere Checker serialisiert werden;
            Default: False;
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_TreeParams.htm">TreeParams</a></td><td>
            Zusätzliche Parameter, einige, die für den gesamten Tree
            Gültigkeit haben und einige knotenspezifische Parameter
            oder null.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_Trigger.htm">Trigger</a></td><td>
            Ein optionaler Trigger, der den Job wiederholt aufruft
            oder null (setzt intern BreakWithResult außer Kraft).
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_TriggeredRunDelay.htm">TriggeredRunDelay</a></td><td>
            Verzögert den Start eines Knotens (und InitNodes).
            Kann für Loops in Controlled-Jobs verwendet werden.
            Default: 0 (Millisekunden).
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_TypeInfo.htm">TypeInfo</a></td><td>
            Der Knotentyp:
              None, NodeConnector, ValueModifier, Constant, Checker.
            <a href="T_Vishnu_Interchange_NodeTypes.htm">NodeTypes</a><br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_NodeConnector_UserControlPath.htm">UserControlPath</a></td><td>
            Der Pfad zum aktuell dynamisch zu ladenden UserControl.
            <br />(Überschreibt <a href="P_LogicalTaskTree_LogicalNode_UserControlPath.htm">LogicalNode<span id="LST85D2CB4F_22" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>UserControlPath</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_WorkersState.htm">WorkersState</a></td><td>
            Ein Sammelstatus für alle zugeordneten Worker.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr></table><a href="#PageHeader">Zurück nach oben</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID0CB0EA')" onkeypress="SectionExpandCollapse_CheckKey('ID0CB0EA', event)" tabindex="0"><img id="ID0CB0EAToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Methoden</span></div><div id="ID0CB0EASection" class="collapsibleSection"><table id="MethodList" class="members"><tr><th class="iconColumn"> </th><th>Name</th><th>Beschreibung</th></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_NodeConnector_Break.htm">Break</a></td><td>
            Überschrieben, um das Abbrechen von ValueModifiern zu unterbinden.
            Stattdessen wird zum Originalknoten weitergeleitet.
            <br />(Überschreibt <a href="M_LogicalTaskTree_LogicalNode_Break.htm">LogicalNode<span id="LST85D2CB4F_23" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>Break(Boolean)</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_CanControlledTreeStart.htm">CanControlledTreeStart</a></td><td>
            Gibt an, ob ein (Teil-)Baum in einem JobController gestartet werden kann, d.h. dass
            der Knoten und alle seine Eltern (rekursiv) gestartet werden können.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_NetEti_Globals_GenericTree_1_Climb2Top.htm">Climb2Top</a></td><td>
            Hangelt sich durch den Baum nach oben (bis zur Root)
            und ruft für jeden Knoten die Action auf.
            <br />(Vererbt von <a href="T_NetEti_Globals_GenericTree_1.htm">GenericTree<span id="LST85D2CB4F_24" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST85D2CB4F_25" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_NodeConnector_DoRun.htm">DoRun</a></td><td>
            Hier wird der Checker-Thread gestartet.
            Diese Routine läuft asynchron.
            <br />(Überschreibt <a href="M_LogicalTaskTree_LogicalNode_DoRun.htm">LogicalNode<span id="LST85D2CB4F_26" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>DoRun(TreeEvent)</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_NodeConnector_Equals.htm">Equals</a></td><td>
            Vergleicht den Inhalt dieses NodeConnectors nach logischen Gesichtspunkten
            mit dem Inhalt eines übergebenen NodeConnectors.
            <br />(Überschreibt <a href="M_LogicalTaskTree_LogicalNode_Equals.htm">LogicalNode<span id="LST85D2CB4F_27" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>Equals(Object)</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_FindEventTriggers.htm">FindEventTriggers</a></td><td>
            Sucht nach zuständigen Triggern für ein Event.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_FindNodeById.htm">FindNodeById</a></td><td>
            Hierüber kann eine Ableitung von LogicalNode ihren eigenen Thread
            zum Abbruch veranlassen.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_NodeParent_FreeChildAt.htm">FreeChildAt</a></td><td>
            Löst die Event-Verknüpfungen mit dem Child-Knoten am Index index und 
            ruft danach ggf. Dispose für den Child-Knoten auf.
            <br />(Vererbt von <a href="T_LogicalTaskTree_NodeParent.htm">NodeParent</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_GetEnvironment.htm">GetEnvironment</a></td><td>
            Returniert das ConcurrentDictionary Environment als einfaches Dictionary Results.
            Benutzt dazu die interne Routine GetResultsFromResultList().
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_NodeConnector_GetHashCode.htm">GetHashCode</a></td><td>
            Erzeugt einen Hashcode für diesen NodeConnector.
            <br />(Überschreibt <a href="M_LogicalTaskTree_LogicalNode_GetHashCode.htm">LogicalNode<span id="LST85D2CB4F_28" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>GetHashCode<span id="LST85D2CB4F_29" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_GetlastEventSourceIfIsTreeEventTriggered.htm">GetlastEventSourceIfIsTreeEventTriggered</a></td><td>
            Aktualisiert bei TreeEvent-getriggerten Knoten die Werte
            des Knotens, bevor mit ihnen weitergearbeitet wird.
            Ist bei Situationen wichtig, in dem entweder der Knoten das
            auslösende TreeEvent verpasst hat (beim Programmstart)
            oder ein anderes TreeEvent schneller war und zu einer
            Reaktion führt, die die aktuellen Werte des Knotens
            benötigt (JobSnapshotTrigger).
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_GetResults.htm">GetResults</a></td><td>
            Returniert das ConcurrentDictionary ResultList als einfaches Dictionary Results.
            Benutzt dazu die interne Routine GetResultsFromResultList().
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_GetTopRootJobList.htm">GetTopRootJobList</a></td><td>
            Liefert die für den Knoten gültige, oberste Root-JobList.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_InitFromNode.htm">InitFromNode</a></td><td>
            Setzt bestimmte Eigenschaften auf die Werte der übergebenen LogicalNode "source". 
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_InitNode.htm">InitNode</a></td><td>
            Setzt den Knoten auf die Starteinstellungen zurück.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_NodeConnector_InitReferencedNode.htm">InitReferencedNode</a></td><td>
            Merkt sich den zu referenzierenden Knoten und hängt sich in dessen Events.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_Invalidate.htm">Invalidate</a></td><td>
            Löscht interne Caches, so dass alles neu ausgewertet wird.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_MarkThreadAsInvalidIfActive.htm">MarkThreadAsInvalidIfActive</a></td><td>
            Trägt thread in die Liste ungültiger Threads ein,
            falls der Thread noch aktiv ist.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_OnLastNotNullLogicalChanged.htm">OnLastNotNullLogicalChanged</a></td><td>
            Löst das NodeLastNotNullLogicalChanged-Ereignis aus.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_OnNodeBreaked.htm">OnNodeBreaked</a></td><td>
            Löst das NodeBreaked-Ereignis aus.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_OnNodeProgressChanged.htm">OnNodeProgressChanged</a></td><td>
            Löst das NodeProgressChanged-Ereignis aus.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_OnNodeProgressFinished.htm">OnNodeProgressFinished</a></td><td>
            Löst das NodeProgressFinished-Ereignis aus.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_OnNodeProgressStarted.htm">OnNodeProgressStarted</a></td><td>
            Löst das NodeStarted-Ereignis aus.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_OnNodeWorkersStateChanged.htm">OnNodeWorkersStateChanged</a></td><td>
            Löst das NodeWorkersStateChanged-Ereignis aus.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_ProcessTreeEvent.htm">ProcessTreeEvent</a></td><td>
            Stößt weitere Verarbeitungen für das aktuelle TreeEvent an (Trigger, Logger).
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_RaiseNodeLastNotNullLogicalChangedWithTreeEvent.htm">RaiseNodeLastNotNullLogicalChangedWithTreeEvent</a></td><td>
            Triggert das TreeEvent "AnyLastNotNullLogicalHasChanged" und ruft "OnNodeLastNotNullLogicalChanged".
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_RaiseNodeLogicalChanged.htm">RaiseNodeLogicalChanged</a></td><td>
            Kapselt den Aufruf des nicht vererbbaren Events NodeLogicalChanged für
            für die abgeleiteten Klassen NodeList und JobList.
            Diese Routine gibt das Event über NodeLogicalChanged letzten Endes an die UI weiter.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_Refresh.htm">Refresh</a></td><td>
            Sorgt für eine sofortige Neu-Auswertung aller gecashten Zustände.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_RegisterTriggeredNodes.htm">RegisterTriggeredNodes</a></td><td>
            Registriert alle getriggerten Knoten eines Teilbaums bei ihren Triggern.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_NodeParent_ReleaseChildAt.htm">ReleaseChildAt</a></td><td>
            Löst die Event-Verknüpfungen mit dem Child-Knoten am Index index.
            <br />(Vererbt von <a href="T_LogicalTaskTree_NodeParent.htm">NodeParent</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_NodeConnector_Reload.htm">Reload</a></td><td>
            Lädt den Zweig oder Knoten neu.
            <br />(Überschreibt <a href="M_LogicalTaskTree_LogicalNode_Reload.htm">LogicalNode<span id="LST85D2CB4F_30" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>Reload<span id="LST85D2CB4F_31" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_ResetAllTreeEventTriggeringNodes.htm">ResetAllTreeEventTriggeringNodes</a></td><td>
            Setzt alle Knoten im Teilbaum zurück, von denen andere per TreeEvent abhängen.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_ResetAllTreeNodes.htm">ResetAllTreeNodes</a></td><td>
            Setzt alle Knoten im gesamten Tree zurück.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_ResetPartTreeNodes.htm">ResetPartTreeNodes</a></td><td>
            Setzt alle Knoten im Teilbaum ab branch zurück.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_NodeConnector_Run.htm">Run</a></td><td>
            Überschrieben, um das Starten von ValueModifiern zu unterbinden.
            Stattdessen wird über UserRun zum Originalknoten weitergeleitet.
            <br />(Überschreibt <a href="M_LogicalTaskTree_LogicalNode_Run.htm">LogicalNode<span id="LST85D2CB4F_32" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>Run(TreeEvent)</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_NodeParent_SetChildAt.htm">SetChildAt</a></td><td>
            Speichert den Kindknoten am übergebenen Index und hängt sich in die Events des Kindknoten ein.
            <br />(Vererbt von <a href="T_LogicalTaskTree_NodeParent.htm">NodeParent</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_SetTreeCollapsed.htm">SetTreeCollapsed</a></td><td>
            Setzt die Property StartCollapsed für einen ganzen (Teil-)Baum.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_SetWorkersState.htm">SetWorkersState</a></td><td>
            Setzt einen gemeinsamen (kombinierten) NodeWorkerState 'WorkersState'
            für alle NodeWorker.
            Retourniert NodeWorkersState.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_NodeParent_SubNodeExceptionCleared.htm">SubNodeExceptionCleared</a></td><td>
            Wird angesprungen, wenn in einem Kind eine Exception gelöscht wurde.
            Kaskadiert die Auflösung einer vormaligen Exception u.U. bis zum Root-Knoten nach oben.
            Parent-Knoten mit mehreren Kindern (NodeList) generieren ihrerseits ein ExceptionCleared-Event
            nur dann, wenn kein Child-Knoten mehr eine Exception hält.
            <br />(Vererbt von <a href="T_LogicalTaskTree_NodeParent.htm">NodeParent</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_NodeParent_SubNodeExceptionRaised.htm">SubNodeExceptionRaised</a></td><td>
            Wird angesprungen, wenn in einem Kind eine Exception aufgetreten ist.
            Kaskadiert die Exception bis zum Root-Knoten nach oben, ohne die Verarbeitung abzubrechen.
            <br />(Vererbt von <a href="T_LogicalTaskTree_NodeParent.htm">NodeParent</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_NodeParent_SubNodeLastNotNullLogicalChanged.htm">SubNodeLastNotNullLogicalChanged</a></td><td>
            Wird angesprungen, wenn sich der logische Zustand "LastNotNullLogical" eines Kindes geändert hat.
            Dieses Event ist entscheidend für eine mögliche Änderung des logischen Zustandes des Parent-Knoten.
            Kann von SingleNodes und ParentNodes bis hin zum Root-Knoten ausgelöst werden.
            Ursprünglicher Auslöser ist immer eine SingleNode.
            Kaskadiert u.U. im Tree bis zum Root-Knoten nach oben.
            <br />(Vererbt von <a href="T_LogicalTaskTree_NodeParent.htm">NodeParent</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_NodeParent_SubNodeLogicalChanged.htm">SubNodeLogicalChanged</a></td><td>
            Wird angesprungen, wenn sich das aktuelle logische Ergebnis des Child-Knotens geändert hat.
            Wird von einer SingleNode ausgelöst.
            Setzt sich im Tree nur bis zum direkten Parent-Knoten fort.
            <br />(Vererbt von <a href="T_LogicalTaskTree_NodeParent.htm">NodeParent</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_NodeParent_SubNodeProgressChanged.htm">SubNodeProgressChanged</a></td><td>
            Wird angesprungen, wenn sich der Verarbeitungsfortschritt
            des Referenzierten Originalknotens geändert hat.
            Setzt sich im Tree nur bis zum direkten Parent-Knoten fort.
            <br />(Vererbt von <a href="T_LogicalTaskTree_NodeParent.htm">NodeParent</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_NodeConnector_SubNodeProgressFinished.htm">SubNodeProgressFinished</a></td><td>
            Wird angesprungen, wenn die Verarbeitung des Kind-Knotens beendet ist.
            Kaskadiert u.U. im Tree bis zum Root-Knoten.
            Parent-Knoten mit mehreren Kindern (NodeList) generieren ihrerseits ein NodeProgressFinished-Event
            nur dann, wenn die Verarbeitung aller Kind-Knoten beendet ist.
            <br />(Überschreibt <a href="M_LogicalTaskTree_NodeParent_SubNodeProgressFinished.htm">NodeParent<span id="LST85D2CB4F_33" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>SubNodeProgressFinished(Object, ProgressChangedEventArgs)</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_NodeParent_SubNodeProgressStarted.htm">SubNodeProgressStarted</a></td><td>
            Wird angesprungen, wenn die Verarbeitung des Kind-Knotens gestarted wurde.
            Kaskadiert u.U. im Tree bis zum Root-Knoten nach oben.
            Parent-Knoten mit mehreren Kindern (NodeList) generieren ihrerseits ein NodeProgressStarted-Event
            nur dann, wenn dieses das erste (und bisher einzige) Kind ist, dessen Verarbeitung gestartet wurde.
            <br />(Vererbt von <a href="T_LogicalTaskTree_NodeParent.htm">NodeParent</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_NodeConnector_SubNodeResultChanged.htm">SubNodeResultChanged</a></td><td>
            Wird angesprungen, wenn sich das Result eines Kind-Knotens geändert hat.
            Kaskadiert im Tree bis zum Root-Knoten nach oben.
            <br />(Überschreibt <a href="M_LogicalTaskTree_NodeParent_SubNodeResultChanged.htm">NodeParent<span id="LST85D2CB4F_34" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>SubNodeResultChanged(LogicalNode, Result)</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_NodeParent_SubNodeStateChanged.htm">SubNodeStateChanged</a></td><td>
            Wird angesprungen, wenn sich der Verarbeitungszustand eines Kindes geändert hat.
            Wird von einer SingleNode ausgelöst.
            Setzt sich im Tree nur bis zum direkten Parent-Knoten fort.
            <br />(Vererbt von <a href="T_LogicalTaskTree_NodeParent.htm">NodeParent</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_ThreadUpdateLastLogical.htm">ThreadUpdateLastLogical</a></td><td>
            Setzt threadsafe LastLogical.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_NodeParent_ThreadUpdateLastLogicalState.htm">ThreadUpdateLastLogicalState</a></td><td>
            Setzt threadsafe LastLogicalState.
            <br />(Vererbt von <a href="T_LogicalTaskTree_NodeParent.htm">NodeParent</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_NodeParent_ThreadUpdateLastSingleNodesFinished.htm">ThreadUpdateLastSingleNodesFinished</a></td><td>
            Setzt threadsafe LastSingleNodesFinished.
            <br />(Vererbt von <a href="T_LogicalTaskTree_NodeParent.htm">NodeParent</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_ThreadUpdateLastState.htm">ThreadUpdateLastState</a></td><td>
            Setzt threadsafe LastState.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_NodeConnector_ToString.htm">ToString</a></td><td>
            Überschriebene ToString()-Methode.
            <br />(Überschreibt <a href="M_LogicalTaskTree_LogicalNode_ToString.htm">LogicalNode<span id="LST85D2CB4F_35" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>ToString<span id="LST85D2CB4F_36" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_NetEti_Globals_GenericTree_1_Traverse.htm">Traverse(Action<span id="LST85D2CB4F_37" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, T<span id="LST85D2CB4F_38" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Geht rekursiv durch den Baum und ruft für jeden Knoten die Action auf.
            <br />(Vererbt von <a href="T_NetEti_Globals_GenericTree_1.htm">GenericTree<span id="LST85D2CB4F_39" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST85D2CB4F_40" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_NetEti_Globals_GenericTree_1_Traverse_1.htm">Traverse(Func<span id="LST85D2CB4F_41" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, T, Object, Object<span id="LST85D2CB4F_42" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Geht rekursiv durch den Baum und ruft für jeden Knoten die Action auf.
            <br />(Vererbt von <a href="T_NetEti_Globals_GenericTree_1.htm">GenericTree<span id="LST85D2CB4F_43" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST85D2CB4F_44" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_NetEti_Globals_GenericTree_1_Traverse_2.htm">Traverse(Int32, Action<span id="LST85D2CB4F_45" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, T<span id="LST85D2CB4F_46" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Rekursive Hilfsroutine für die öffentliche Routine 'Traverse'.
            <br />(Vererbt von <a href="T_NetEti_Globals_GenericTree_1.htm">GenericTree<span id="LST85D2CB4F_47" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST85D2CB4F_48" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_NetEti_Globals_GenericTree_1_Traverse_3.htm">Traverse(Int32, Func<span id="LST85D2CB4F_49" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, T, Object, Object<span id="LST85D2CB4F_50" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Object)</a></td><td>
            Rekursive Hilfsroutine für die öffentliche Routine 'Traverse'.
            <br />(Vererbt von <a href="T_NetEti_Globals_GenericTree_1.htm">GenericTree<span id="LST85D2CB4F_51" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST85D2CB4F_52" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_UnMarkThreadAsInvalid.htm">UnMarkThreadAsInvalid</a></td><td>
            Entfernt thread aus der Liste ungültiger Threads.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_UnregisterTriggeredNode.htm">UnregisterTriggeredNode</a></td><td>
            Setzt den Teilbaum auf nicht startbar.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_NodeConnector_UserBreak.htm">UserBreak</a></td><td>
            Stoppt den Originalknoten.
            <br />(Überschreibt <a href="M_LogicalTaskTree_LogicalNode_UserBreak.htm">LogicalNode<span id="LST85D2CB4F_53" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>UserBreak<span id="LST85D2CB4F_54" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_NodeConnector_UserRun.htm">UserRun</a></td><td>
            Startet den Originalknoten.
            <br />(Überschreibt <a href="M_LogicalTaskTree_LogicalNode_UserRun.htm">LogicalNode<span id="LST85D2CB4F_55" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>UserRun<span id="LST85D2CB4F_56" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a>)</td></tr></table><a href="#PageHeader">Zurück nach oben</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDAEA')" onkeypress="SectionExpandCollapse_CheckKey('IDAEA', event)" tabindex="0"><img id="IDAEAToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Ereignisse</span></div><div id="IDAEASection" class="collapsibleSection"><table id="EventList" class="members"><tr><th class="iconColumn"> </th><th>Name</th><th>Beschreibung</th></tr><tr><td><img src="../icons/pubEvent.gif" alt="Public Ereignis" title="Public Ereignis" /></td><td><a href="E_LogicalTaskTree_LogicalNode_ExceptionCleared.htm">ExceptionCleared</a></td><td>
            Wird aufgerufen, wenn eine Exception gelöscht wird.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubEvent.gif" alt="Public Ereignis" title="Public Ereignis" /></td><td><a href="E_LogicalTaskTree_LogicalNode_ExceptionRaised.htm">ExceptionRaised</a></td><td>
            Wird aufgerufen, wenn eine Exception aufgetreten ist.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubEvent.gif" alt="Public Ereignis" title="Public Ereignis" /></td><td><a href="E_LogicalTaskTree_LogicalNode_NodeLastNotNullLogicalChanged.htm">NodeLastNotNullLogicalChanged</a></td><td>
            Wird aufgerufen, wenn sich das logische Ergebnis eines Knotens geändert hat
            und ungleich null ist.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubEvent.gif" alt="Public Ereignis" title="Public Ereignis" /></td><td><a href="E_LogicalTaskTree_LogicalNode_NodeLogicalChanged.htm">NodeLogicalChanged</a></td><td>
            Wird aufgerufen, wenn sich das logische Ergebnis eines Knotens geändert hat.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubEvent.gif" alt="Public Ereignis" title="Public Ereignis" /></td><td><a href="E_LogicalTaskTree_LogicalNode_NodeProgressChanged.htm">NodeProgressChanged</a></td><td>
            Wird aufgerufen, wenn sich der Verarbeitungs-Fortschritt eines Knotens geändert hat.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubEvent.gif" alt="Public Ereignis" title="Public Ereignis" /></td><td><a href="E_LogicalTaskTree_LogicalNode_NodeProgressFinished.htm">NodeProgressFinished</a></td><td>
            Wird aufgerufen, wenn die Verarbeitung eines Knotens abgeschlossen wurde (unabhängig vom Ergebnis).
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubEvent.gif" alt="Public Ereignis" title="Public Ereignis" /></td><td><a href="E_LogicalTaskTree_LogicalNode_NodeProgressStarted.htm">NodeProgressStarted</a></td><td>
            Wird aufgerufen, wenn ein Knoten gestartet wurde.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubEvent.gif" alt="Public Ereignis" title="Public Ereignis" /></td><td><a href="E_LogicalTaskTree_LogicalNode_NodeResultChanged.htm">NodeResultChanged</a></td><td>
            Wird aufgerufen, wenn sich das Result eines Knotens geändert hat.
            Dient dazu, die Berechnung des logischen Zustands des übergeordneten
            Knotens neu zu starten.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubEvent.gif" alt="Public Ereignis" title="Public Ereignis" /></td><td><a href="E_LogicalTaskTree_LogicalNode_NodeStateChanged.htm">NodeStateChanged</a></td><td>
            Wird aufgerufen, wenn sich der Verarbeitungszustand eines Knotens geändert hat.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubEvent.gif" alt="Public Ereignis" title="Public Ereignis" /></td><td><a href="E_LogicalTaskTree_LogicalNode_NodeWorkersStateChanged.htm">NodeWorkersStateChanged</a></td><td>
            Wird aufgerufen, wenn sich der Gesamtzustand der dem Knoten
            zugeordneten Worker geändert hat.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubEvent.gif" alt="Public Ereignis" title="Public Ereignis" /></td><td><a href="E_LogicalTaskTree_LogicalNode_PropertiesChanged.htm">PropertiesChanged</a></td><td>
            Dieses Event aus IVishnuNode.INotifyPropertiesChanged kann von LogicalNodeViewmodel abonniert werden.
            Dieses erhält über die übergebenen PropertiesChangedEventArgs eine String-List mit Property-Namen
            und kann seinerseits über INotifyProperyChanged die UI informieren.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr></table><a href="#PageHeader">Zurück nach oben</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDLEA')" onkeypress="SectionExpandCollapse_CheckKey('IDLEA', event)" tabindex="0"><img id="IDLEAToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Felder</span></div><div id="IDLEASection" class="collapsibleSection"><table id="FieldList" class="members"><tr><th class="iconColumn"> </th><th>Name</th><th>Beschreibung</th></tr><tr><td><img src="../icons/protField.gif" alt="Protected Feld" title="Protected Feld" /></td><td><a href="F_LogicalTaskTree_NodeConnector__lastResult.htm">_lastResult</a></td><td>
            Das letzte Verarbeitungsergebnis für diesen Knoten (internes Feld).
            </td></tr><tr><td><img src="../icons/protField.gif" alt="Protected Feld" title="Protected Feld" /></td><td><a href="F_LogicalTaskTree_LogicalNode__lastRun.htm">_lastRun</a></td><td>
            Zeitpunkt des letzten Starts des Knoten (internes Feld).
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protField.gif" alt="Protected Feld" title="Protected Feld" /></td><td><a href="F_LogicalTaskTree_LogicalNode__nextRunInfo.htm">_nextRunInfo</a></td><td>
            Info-Text über den nächsten Start des Knotens (wenn bekannt) oder null (internes Feld).
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protField.gif" alt="Protected Feld" title="Protected Feld" /></td><td><a href="F_LogicalTaskTree_NodeConnector__node.htm">_node</a></td><td>
            Der Knoten, auf den dieser NodeConnector verweist.
            </td></tr><tr><td><img src="../icons/protField.gif" alt="Protected Feld" title="Protected Feld" /></td><td><a href="F_LogicalTaskTree_LogicalNode__parentViewLocker.htm">_parentViewLocker</a></td><td>
            Dient zur Sperrung für Thread-safen Zugriff auf ParentView.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protField.gif" alt="Protected Feld" title="Protected Feld" /></td><td><a href="F_LogicalTaskTree_NodeConnector__userControlPath.htm">_userControlPath</a></td><td>
            Der Pfad zum aktuell dynamisch zu ladenden UserControl (internes Feld).
            </td></tr><tr><td><img src="../icons/protField.gif" alt="Protected Feld" title="Protected Feld" /></td><td><a href="F_LogicalTaskTree_LogicalNode_AppSettings.htm">AppSettings</a></td><td>
            Applikationseinstellungen.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protField.gif" alt="Protected Feld" title="Protected Feld" /></td><td><a href="F_LogicalTaskTree_LogicalNode_CancellationToken.htm">CancellationToken</a></td><td>
            Über die CancellationTokenSource kann dieses Token auf
            Abbruch gesetzt werden, was in diesem Knoten zum Aufruf
            der Routine cancelNotification führt.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protField.gif" alt="Protected Feld" title="Protected Feld" /></td><td><a href="F_LogicalTaskTree_LogicalNode_ExceptionLocker.htm">ExceptionLocker</a></td><td>
            Dient zum kurzzeitigen Sperren bei Exceptions.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protField.gif" alt="Protected Feld" title="Protected Feld" /></td><td><a href="F_LogicalTaskTree_LogicalNode_IsRunRequired.htm">IsRunRequired</a></td><td>
            True: der Knoten soll gestartet werden.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protField.gif" alt="Protected Feld" title="Protected Feld" /></td><td><a href="F_LogicalTaskTree_LogicalNode_IsTaskActiveOrScheduled.htm">IsTaskActiveOrScheduled</a></td><td>
            True: der Knoten ist gerade aktiv oder durch einen Timer kontrolliert.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubField.gif" alt="Public Feld" title="Public Feld" /></td><td><a href="F_LogicalTaskTree_LogicalNode_LastExceptions.htm">LastExceptions</a></td><td>
            Beim letzten Lauf aufgetretene Exception oder null;
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protField.gif" alt="Protected Feld" title="Protected Feld" /></td><td><a href="F_LogicalTaskTree_LogicalNode_LastLogicalLocker.htm">LastLogicalLocker</a></td><td>
            Dient zum kurzzeitigen Sperren von LastLogical.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protField.gif" alt="Protected Feld" title="Protected Feld" /></td><td><a href="F_LogicalTaskTree_LogicalNode_LastLogicalStateLocker.htm">LastLogicalStateLocker</a></td><td>
            Dient zum kurzzeitigen Sperren von LastLogicalState.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protField.gif" alt="Protected Feld" title="Protected Feld" /></td><td><a href="F_LogicalTaskTree_NodeParent_LastSingleNodesFinishedLocker.htm">LastSingleNodesFinishedLocker</a></td><td>
            Dient zum kurzzeitigen Sperren von LastSingleNodesFinished.
            <br />(Vererbt von <a href="T_LogicalTaskTree_NodeParent.htm">NodeParent</a>)</td></tr><tr><td><img src="../icons/protField.gif" alt="Protected Feld" title="Protected Feld" /></td><td><a href="F_LogicalTaskTree_LogicalNode_LastStateLocker.htm">LastStateLocker</a></td><td>
            Dient zum kurzzeitigen Sperren von LastState.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubField.gif" alt="Public Feld" title="Public Feld" /></td><td><a href="F_NetEti_Globals_GenericTree_1_Mother.htm">Mother</a></td><td>
            Der Besitzer des Knoten.
            <br />(Vererbt von <a href="T_NetEti_Globals_GenericTree_1.htm">GenericTree<span id="LST85D2CB4F_57" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LST85D2CB4F_58" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>)</td></tr><tr><td><img src="../icons/protField.gif" alt="Protected Feld" title="Protected Feld" /></td><td><a href="F_LogicalTaskTree_LogicalNode_ResultLocker.htm">ResultLocker</a></td><td>
            Dient zum kurzzeitigen Sperren von Result.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/pubField.gif" alt="Public Feld" title="Public Feld" /></td><td><a href="F_LogicalTaskTree_LogicalNode_RootJobList.htm">RootJobList</a></td><td>
            Nächsthöhere JobList für diesen Knoten oder der Knoten selbst,
            wenn er eine JobList ist.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protField.gif" alt="Protected Feld" title="Protected Feld" /></td><td><a href="F_LogicalTaskTree_LogicalNode_SubLastNotNullLogicalLocker.htm">SubLastNotNullLogicalLocker</a></td><td>
            Dient zum kurzzeitigen Sperren von LastLogical.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr><tr><td><img src="../icons/protField.gif" alt="Protected Feld" title="Protected Feld" /></td><td><a href="F_LogicalTaskTree_NodeParent_SubNodeStateChangedLocker.htm">SubNodeStateChangedLocker</a></td><td>
            Dient zum kurzzeitigen Sperren für das Zurücksetzen (Invalidieren)
            verschiedener für die Ermittlung des aktuellen Zustands der
            ParentNode wichtiger Counter.
            <br />(Vererbt von <a href="T_LogicalTaskTree_NodeParent.htm">NodeParent</a>)</td></tr><tr><td><img src="../icons/protField.gif" alt="Protected Feld" title="Protected Feld" /></td><td><a href="F_LogicalTaskTree_NodeParent_ThreadRefreshParentNodeLocker.htm">ThreadRefreshParentNodeLocker</a></td><td>
            Dient zum kurzzeitigen Sperren für das Zurücksetzen (Invalidieren)
            verschiedener für die Ermittlung des aktuellen Zustands der
            ParentNode wichtiger Counter.
            <br />(Vererbt von <a href="T_LogicalTaskTree_NodeParent.htm">NodeParent</a>)</td></tr><tr><td><img src="../icons/pubField.gif" alt="Public Feld" title="Public Feld" /></td><td><a href="F_LogicalTaskTree_LogicalNode_TreeRootJobList.htm">TreeRootJobList</a></td><td>
            Oberste JobList.
            <br />(Vererbt von <a href="T_LogicalTaskTree_LogicalNode.htm">LogicalNode</a>)</td></tr></table><a href="#PageHeader">Zurück nach oben</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDBC')" onkeypress="SectionExpandCollapse_CheckKey('IDBC', event)" tabindex="0"><img id="IDBCToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Anmerkungen</span></div><div id="IDBCSection" class="collapsibleSection">
             File: NodeConnector.cs
             Autor: Erik Nagel
            
             27.05.2013 Erik Nagel: erstellt
             </div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('seeAlso')" onkeypress="SectionExpandCollapse_CheckKey('seeAlso', event)" tabindex="0"><img id="seeAlsoToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Siehe auch</span></div><div id="seeAlsoSection" class="collapsibleSection"><h4>Referenz</h4><div><a href="N_LogicalTaskTree.htm">LogicalTaskTree Namensraum</a></div></div></div></div><div id="PageFooter" class="pageFooter">Naturgemäß basieren viele Erkenntnisse und Entwicklungen auf im Internet frei zugänglichen Informationen. Eventuell fehlende Verweise auf ursprüngliche Autoren sind unbeabsichtigt und werden nach Meldung sofort nachgepflegt.<p>Copyright © 2012-2025 Erik Nagel</p><div class="feedbackLink">Senden Sie Kommentare zu diesem Feature an
        <a id="HT_MailLink" href="mailto:Vishnu%40reallyhuman.net?Subject=Vishnu%20-%20der%20logische%20Prozess-Monitor">Vishnu@reallyhuman.net</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Ihre Rückmeldung wird für die Verbesserung der Dokumentation und des Produktes genutzt. Ihre Email-Adresse wird zu keinem anderen Zweck benutzt und wird nach der Behebung des gemeldeten Problems gelöscht. Während der Arbeit an dem Problem kann es sein dass Sie per Email kontaktiert werden für weitergehende Details oder Abklärung zur Rückmeldung von Ihnen. Nachdem das Problem eingegrenzt worden ist kann es sein dass Sie eine Email erhalten zur Problembehebung.");
        </script></div></body></html>