<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><meta name="Microsoft.Help.SelfBranded" content="true" /><meta name="Language" content="de-de" /><meta name="Microsoft.Help.Locale" content="de-de" /><meta name="Microsoft.Help.TopicLocale" content="de-de" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-de-DE.css" /><script type="text/javascript" src="../scripts/branding.js"></script><title>LogicalNode Klasse</title><meta name="Title" content="LogicalNode Klasse" /><meta name="Microsoft.Help.Id" content="T:LogicalTaskTree.LogicalNode" /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="System.Keywords" content="LogicalTaskTree.LogicalNode Klasse" /><meta name="System.Keywords" content="LogicalNode Klasse" /><meta name="Microsoft.Help.F1" content="LogicalTaskTree.LogicalNode" /><meta name="Microsoft.Help.F1" content="LogicalNode" /><meta name="container" content="LogicalTaskTree" /><meta name="file" content="T_LogicalTaskTree_LogicalNode" /><meta name="guid" content="T_LogicalTaskTree_LogicalNode" /><meta name="Description" content="Abstrakte Basisklasse für einen Knoten im LogicalTaskTree." /><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-3.5.1.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="SetDefaultLanguage('cs');"><input type="hidden" id="userDataCache" class="userDataStyle" /><div id="PageHeader" class="pageHeader">Vishnu - der logische Prozess-Monitor<form id="SearchForm" method="get" action="#" onsubmit="TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/ad9ee8b6-c68c-47ec-9584-d85046eb3137.htm" title="Vishnu - der logische Prozess-Monitor" tocid="roottoc">Vishnu - der logische Prozess-Monitor</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/R_Project_Vishnu_doc_de.htm" title="Vishnu - technische Dokumentation" tocid="R_Project_Vishnu_doc_de">Vishnu - technische Dokumentation</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/N_LogicalTaskTree.htm" title="LogicalTaskTree" tocid="N_LogicalTaskTree">LogicalTaskTree</a></div><div class="toclevel1 current" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/T_LogicalTaskTree_LogicalNode.htm" title="LogicalNode Klasse" tocid="T_LogicalTaskTree_LogicalNode">LogicalNode Klasse</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Overload_LogicalTaskTree_LogicalNode__ctor.htm" title="LogicalNode Konstruktor" tocid="Overload_LogicalTaskTree_LogicalNode__ctor">LogicalNode Konstruktor</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Properties_T_LogicalTaskTree_LogicalNode.htm" title="LogicalNode Eigenschaften" tocid="Properties_T_LogicalTaskTree_LogicalNode">LogicalNode Eigenschaften</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Methods_T_LogicalTaskTree_LogicalNode.htm" title="LogicalNode Methoden" tocid="Methods_T_LogicalTaskTree_LogicalNode">LogicalNode Methoden</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Events_T_LogicalTaskTree_LogicalNode.htm" title="LogicalNode Ereignisse" tocid="Events_T_LogicalTaskTree_LogicalNode">LogicalNode Ereignisse</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Fields_T_LogicalTaskTree_LogicalNode.htm" title="LogicalNode Felder" tocid="Fields_T_LogicalTaskTree_LogicalNode">LogicalNode Felder</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div id="TopicContent" class="topicContent"><table class="titleTable"><tr><td class="logoColumn"><img src="../icons/Vishnu_64.png" /></td><td class="titleColumn"><h1>Logical<wbr />Node Klasse</h1></td></tr></table><div class="summary">
             Abstrakte Basisklasse für einen Knoten im LogicalTaskTree.
             </div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDDA')" onkeypress="SectionExpandCollapse_CheckKey('IDDA', event)" tabindex="0"><img id="IDDAToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Vererbungshierarchie</span></div><div id="IDDASection" class="collapsibleSection"><a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">System<span id="LSTA287690F_0" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>Object</a><br />  <a href="T_NetEti_Globals_GenericTree_1.htm">NetEti.Globals<span id="LSTA287690F_1" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>GenericTree</a><span id="LSTA287690F_2" data-languageSpecificText="cpp=&lt;|cs=&lt;|fs=&lt;|vb=(Of |nu=("></span><span class="selflink">LogicalNode</span><span id="LSTA287690F_3" data-languageSpecificText="cpp=&gt;|cs=&gt;|fs=&gt;|vb=)|nu=)"></span><br />    <span class="selflink">LogicalTaskTree<span id="LSTA287690F_4" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>LogicalNode</span><br />      <a href="T_LogicalTaskTree_NodeParent.htm">LogicalTaskTree<span id="LSTA287690F_5" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>NodeParent</a><br />      <a href="T_LogicalTaskTree_SingleNode.htm">LogicalTaskTree<span id="LSTA287690F_6" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>SingleNode</a><br />      <a href="T_LogicalTaskTree_UndefinedLogicalNodeClass.htm">LogicalTaskTree<span id="LSTA287690F_7" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>UndefinedLogicalNodeClass</a><br /></div><br /><strong>Namensraum:</strong> <a href="N_LogicalTaskTree.htm">LogicalTaskTree</a><br /><strong>Assembly:</strong> LogicalTaskTree (in LogicalTaskTree.dll) Version: 1.0.0+d75bac576d44afb64cfff79fd3665c8ca1172cbc<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDB')" onkeypress="SectionExpandCollapse_CheckKey('IDB', event)" tabindex="0"><img id="IDBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="IDBSection" class="collapsibleSection"><div id="IDAB" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDAB_tab1" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','cs','1','4');return false;">C#</a></div><div id="IDAB_tab2" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','vb','2','4');return false;">VB</a></div><div id="IDAB_tab3" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','cpp','3','4');return false;">C++</a></div><div id="IDAB_tab4" class="codeSnippetContainerTab"><a href="#" onclick="ChangeTab('IDAB','fs','4','4');return false;">F#</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDAB_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDAB');return false;" title="Copy">Copy</a></div></div><div id="IDAB_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="identifier">LogicalNode</span> : <span class="identifier">GenericTree</span>&lt;<span class="identifier">LogicalNode</span>&gt;, 
	<span class="identifier">IVishnuNode</span>, <span class="identifier">INotifyPropertiesChanged</span></pre></div><div id="IDAB_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">MustInherit</span> <span class="keyword">Class</span> <span class="identifier">LogicalNode</span>
	<span class="keyword">Inherits</span> <span class="identifier">GenericTree</span>(<span class="keyword">Of</span> <span class="identifier">LogicalNode</span>)
	<span class="keyword">Implements</span> <span class="identifier">IVishnuNode</span>, <span class="identifier">INotifyPropertiesChanged</span></pre></div><div id="IDAB_code_Div3" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">ref class</span> <span class="identifier">LogicalNode</span> <span class="keyword">abstract</span> : <span class="keyword">public</span> <span class="identifier">GenericTree</span>&lt;<span class="identifier">LogicalNode</span>^&gt;, 
	<span class="identifier">IVishnuNode</span>, <span class="identifier">INotifyPropertiesChanged</span></pre></div><div id="IDAB_code_Div4" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve">[&lt;<span class="identifier">AbstractClassAttribute</span>&gt;]
<span class="keyword">type</span> <span class="identifier">LogicalNode</span> = 
    <span class="keyword">class</span>
        <span class="keyword">inherit</span> <span class="identifier">GenericTree</span>&lt;<span class="identifier">LogicalNode</span>&gt;
        <span class="keyword">interface</span> <span class="identifier">IVishnuNode</span>
        <span class="keyword">interface</span> <span class="identifier">INotifyPropertiesChanged</span>
    <span class="keyword">end</span></pre></div></div></div></div><p>Der <span class="selflink">LogicalNode</span> Typ exponiert die folgenden Member.</p><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDA0AB0FA')" onkeypress="SectionExpandCollapse_CheckKey('IDA0AB0FA', event)" tabindex="0"><img id="IDA0AB0FAToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Konstruktoren</span></div><div id="IDA0AB0FASection" class="collapsibleSection"><table id="ConstructorList" class="members"><tr><th class="iconColumn"> </th><th>Name</th><th>Beschreibung</th></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode__ctor.htm">LogicalNode(LogicalNode, JobList, TreeParameters)</a></td><td>
            Konstruktor für ein Snapshot-Dummy-Element.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode__ctor_1.htm">LogicalNode(String, LogicalNode, JobList, TreeParameters)</a></td><td>
            Konstruktor
            </td></tr></table><a href="#PageHeader">Zurück nach oben</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID0SC0FA')" onkeypress="SectionExpandCollapse_CheckKey('ID0SC0FA', event)" tabindex="0"><img id="ID0SC0FAToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Eigenschaften</span></div><div id="ID0SC0FASection" class="collapsibleSection"><table id="PropertyList" class="members"><tr><th class="iconColumn"> </th><th>Name</th><th>Beschreibung</th></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_BreakWithResult.htm">BreakWithResult</a></td><td>
            Ein Teilbaum kann u.U. schon ein eindeutiges logisches Ergebnis haben,
            bevor alle Kinder ihre Verarbeitung beendet haben.
            Bei BreakWithResult=True werden diese dann abgebochen, wenn in dem
            bereffenden Ast keine Trigger aktiv sind.
            </td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_CanTreeStart.htm">CanTreeStart</a></td><td>
            Gibt an, ob ein (Teil-)Baum gestartet werden kann, d.h. dass bei einem
            Knoten mit Kindern alle seine Kinder (rekursiv) gestartet werden können
            oder bei einem Endknoten (Checker) ohne Kinder dieser selbst gestartet werden kann.
            </td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_NetEti_Globals_GenericTree_1_Children.htm">Children</a></td><td>
            Liste der Kinder eines Knotens.
            <br />(Vererbt von <a href="T_NetEti_Globals_GenericTree_1.htm">GenericTree<span id="LSTA287690F_8" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTA287690F_9" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_DebugMode.htm">DebugMode</a></td><td>
            Bei True können zusätzliche Testausgaben erfolgen.
            Default: False.
            </td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_Id.htm">Id</a></td><td>
            Die eindeutige Kennung des Knotens.
            </td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_IdInfo.htm">IdInfo</a></td><td>
            Die eindeutige Kennung des Knotens (identisch zur Property Id).
            </td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_IdPath.htm">IdPath</a></td><td>
            Auf eine durch '/' getrennte Kette von Ids reduzierter Pfad zum Knoten.
            </td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_InitNodes.htm">InitNodes</a></td><td>
            Bei True werden alle Knoten im Tree resettet, wenn dieser Knoten gestartet wird.
            Kann für Loops in Controlled-Jobs verwendet werden.
            Default: false.
            </td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_IsActive.htm">IsActive</a></td><td>
            Bei true befindet sich der Teilbaum/Knoten in aktivem (gestartetem) Zustand.
            </td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_IsGlobal.htm">IsGlobal</a></td><td>
            Bei true wird dieser Knoten als Referenzknoten angelegt, wenn irgendwo im Tree
            (nicht nur im aktuellen Job) der Name des Knotens schon gefunden wurde.
            Bei false wird nur im aktuellen Job nach gleichnamigen Knoten gesucht.
            Default: false.
            </td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_IsInSleepTime.htm">IsInSleepTime</a></td><td>
            Returns true, wenn gerade eine vom User definierte Ruhezeit
            für Vishnu-Akteure (Checker) läuft.
            </td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_IsInSnapshot.htm">IsInSnapshot</a></td><td>
            Bei True befindet sich diese LogicalNode innerhalb eines Snapshots.
            </td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_IsSnapshotDummy.htm">IsSnapshotDummy</a></td><td>
            Bei True dient dieser Knoten nur zur Anzeige und lässt keine weiteren Funktionen zu.
            </td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_LastExecutingTreeEvent.htm">LastExecutingTreeEvent</a></td><td>
            Das letzte auslösende TreeEvent (bei TreeEvent-getriggerten Knoten)
            oder null.
            </td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_LastLogical.htm">LastLogical</a></td><td>
            Der letzte logische Zustand eines Knotens.
            Für den Zugriff auf Zustände von Child-Knoten, ohne dort
            die Ermittlung der Zustände erneut anzustoßen.
            Senkt die Prozessorlast.
            </td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_LastLogicalState.htm">LastLogicalState</a></td><td>
            Der letzte Ergebniszustand eines Knotens.
            Für den Zugriff auf Zustände von Child-Knoten, ohne dort
            die Ermittlung der Zustände erneut anzustoßen.
            Senkt die Prozessorlast.
            </td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_LastNotNullLogical.htm">LastNotNullLogical</a></td><td>
            Merkfeld für den letzten Zustand von Logical, der nicht null war;
            wird benötigt, damit Worker nur dann gestartet werden, wenn sich
            der Zustand von Logical signifikant geändert hat und nicht jedesmal,
            wenn der Checker arbeitet (Logical = null).
            </td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_LastResult.htm">LastResult</a></td><td>
            Result für diesen Knoten.
            </td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_LastRun.htm">LastRun</a></td><td>
            Zeitpunkt des letzten Starts des Knoten.
            </td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_LastState.htm">LastState</a></td><td>
            Der letzte Verarbeitungszustand eines Knotens.
            Für den Zugriff auf Zustände von Child-Knoten, ohne dort
            die Ermittlung der Zustände erneut anzustoßen.
            Senkt die Prozessorlast.
            </td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_Level.htm">Level</a></td><td>
            Die Hierarchie-Ebene des Knotens.
            </td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_LevelInfo.htm">LevelInfo</a></td><td>
            Die Hierarchie-Ebene des Knotens (identisch zur Property Level).
            </td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_LockName.htm">LockName</a></td><td>
            Optionaler zum globalen Sperren verwendeter Name.
            Wird verwendet, wenn ThreadLocked gesetzt ist.
            </td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_Logger.htm">Logger</a></td><td>
            Ein optionaler Logger, der bei bestimmten Ereignissen
            aufgerufen wird oder null.
            </td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_Logical.htm">Logical</a></td><td>
            Der logische Zustand eines Knotens; hierum geht es letztendlich in der
            gesamten Verarbeitung.
            </td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_LogicalState.htm">LogicalState</a></td><td>
            Der Ergebnis-Zustand des Knotens:
            None, Start, Done, Fault, Timeout, UserAbort.
            </td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_Name.htm">Name</a></td><td>
            "Menschenfreundliche" Darstellung des Knotens.
            </td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_NameId.htm">NameId</a></td><td>
            Kombination aus Name und Id des Knotens.
            </td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_NameInfo.htm">NameInfo</a></td><td>
            "Menschenfreundliche" Darstellung des Knotens.
            </td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_NextRun.htm">NextRun</a></td><td>
            Zeitpunkt des nächsten Starts des Knotens (wenn bekannt) oder DateTime.MinValue.
            </td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_NextRunInfo.htm">NextRunInfo</a></td><td>
            Info-Text über den nächsten Start des Knotens (wenn bekannt) oder null.
            </td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_NodeType.htm">NodeType</a></td><td>
            Der Knotentyp:
              None, NodeConnector, ValueModifier, JobConnector, Constant, Checker, NodeList, JobList, Snapshot.
            </td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_ParentView.htm">ParentView</a></td><td>
            Das Parent-Control, in dem dieser Knoten dargestellt wird.
            </td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_Path.htm">Path</a></td><td>
            Der Pfad zum Knoten bestehend aus einer durch '/' getrennte Kette von NameIds:
            NameId ist Name + "(" + Id + ")" bei Knoten mit Name != null,
                   nur Id bei Name = null.
            </td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_PathInfo.htm">PathInfo</a></td><td>
            Der Pfad zum Knoten (identisch zur Property Path).
            </td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_ReferencedNodeId.htm">ReferencedNodeId</a></td><td>
            Id eines ursprünglich referenzierten Knotens oder null.
            </td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_ReferencedNodeName.htm">ReferencedNodeName</a></td><td>
            Name eines ursprünglich referenzierten Knotens oder null.
            </td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_ReferencedNodePath.htm">ReferencedNodePath</a></td><td>
            Pfad eines ursprünglich referenzierten Knotens oder null.
            </td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_SingleNodes.htm">SingleNodes</a></td><td>
            Anzahl der SingleNodes (letztendlich Checker) am Ende eines (Teil-)Baums.
            </td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_SingleNodesFinished.htm">SingleNodesFinished</a></td><td>
            Prozentwert für den Anteil der beendeten SingleNodes
            (letztendlich Checker) am Ende eines (Teil-)Baums.
            </td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_SleepTimeFrom.htm">SleepTimeFrom</a></td><td>
            Der Beginn einer möglichen Ruhezeit.
            </td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_SleepTimeTo.htm">SleepTimeTo</a></td><td>
            Das Ende einer möglichen Ruhezeit.
            </td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_StartCollapsed.htm">StartCollapsed</a></td><td>
            Bei True wird der Job beim Start zusammengeklappt angezeigt, wenn die UI dies unterstützt.
            </td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_State.htm">State</a></td><td>
            Der Verarbeitungszustand eines Knotens:
            None, Waiting, Working, Finished, Triggered, Ready (= Finished | Triggered), CanStart (= None|Ready), Busy (= Waiting | Working).
            </td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_ThreadLocked.htm">ThreadLocked</a></td><td>
            Bei True wird jeder Thread über die Klasse gesperrt, so dass
            nicht Thread-sichere Checker serialisiert werden;
            Default: False;
            </td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_TreeParams.htm">TreeParams</a></td><td>
            Zusätzliche Parameter, einige, die für den gesamten Tree
            Gültigkeit haben und einige knotenspezifische Parameter
            oder null.
            </td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_Trigger.htm">Trigger</a></td><td>
            Ein optionaler Trigger, der den Job wiederholt aufruft
            oder null (setzt intern BreakWithResult außer Kraft).
            </td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_TriggeredRunDelay.htm">TriggeredRunDelay</a></td><td>
            Verzögert den Start eines Knotens (und InitNodes).
            Kann für Loops in Controlled-Jobs verwendet werden.
            Default: 0 (Millisekunden).
            </td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_TypeInfo.htm">TypeInfo</a></td><td>
            Der Knotentyp:
              None, NodeConnector, ValueModifier, Constant, Checker.
            <a href="T_Vishnu_Interchange_NodeTypes.htm">NodeTypes</a></td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_UserControlPath.htm">UserControlPath</a></td><td>
            Der Pfad zum aktuell dynamisch zu ladenden UserControl.
            </td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public Eigenschaft" title="Public Eigenschaft" /></td><td><a href="P_LogicalTaskTree_LogicalNode_WorkersState.htm">WorkersState</a></td><td>
            Ein Sammelstatus für alle zugeordneten Worker.
            </td></tr></table><a href="#PageHeader">Zurück nach oben</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID0BB0FA')" onkeypress="SectionExpandCollapse_CheckKey('ID0BB0FA', event)" tabindex="0"><img id="ID0BB0FAToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Methoden</span></div><div id="ID0BB0FASection" class="collapsibleSection"><table id="MethodList" class="members"><tr><th class="iconColumn"> </th><th>Name</th><th>Beschreibung</th></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /><img src="../icons/Static.gif" alt="Static Member" title="Static Member" /></td><td><a href="M_LogicalTaskTree_LogicalNode_AllowSnapshots.htm">AllowSnapshots</a></td><td>
            Erlaubt Snapshots.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_Break.htm">Break</a></td><td>
            Wenn erforderlich, beim Trigger abmelden,
            Abbrechen der Task über CancellationToken, Status setzen.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_CanControlledTreeStart.htm">CanControlledTreeStart</a></td><td>
            Gibt an, ob ein (Teil-)Baum in einem JobController gestartet werden kann, d.h. dass
            der Knoten und alle seine Eltern (rekursiv) gestartet werden können.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_NetEti_Globals_GenericTree_1_Climb2Top.htm">Climb2Top</a></td><td>
            Hangelt sich durch den Baum nach oben (bis zur Root)
            und ruft für jeden Knoten die Action auf.
            <br />(Vererbt von <a href="T_NetEti_Globals_GenericTree_1.htm">GenericTree<span id="LSTA287690F_10" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTA287690F_11" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_DoRun.htm">DoRun</a></td><td>
            Die eigentliche, Knotentyp-spezifische Verarbeitung;
            muss überschrieben werden.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_Equals.htm">Equals</a></td><td>
            Vergleicht den Inhalt dieser LogicalNode nach logischen Gesichtspunkten
            mit dem Inhalt einer übergebenen LogicalNode.
            <br />(Überschreibt <a href="https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)" target="_blank" rel="noopener noreferrer">Object<span id="LSTA287690F_12" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>Equals(Object)</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_FindEventTriggers.htm">FindEventTriggers</a></td><td>
            Sucht nach zuständigen Triggern für ein Event.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_FindNodeById.htm">FindNodeById</a></td><td>
            Hierüber kann eine Ableitung von LogicalNode ihren eigenen Thread
            zum Abbruch veranlassen.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_GetEnvironment.htm">GetEnvironment</a></td><td>
            Returniert das ConcurrentDictionary Environment als einfaches Dictionary Results.
            Benutzt dazu die interne Routine GetResultsFromResultList().
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_GetHashCode.htm">GetHashCode</a></td><td>
            Erzeugt einen Hashcode für diese LogicalNode.
            <br />(Überschreibt <a href="https://learn.microsoft.com/dotnet/api/system.object.gethashcode" target="_blank" rel="noopener noreferrer">Object<span id="LSTA287690F_13" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>GetHashCode<span id="LSTA287690F_14" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_GetlastEventSourceIfIsTreeEventTriggered.htm">GetlastEventSourceIfIsTreeEventTriggered</a></td><td>
            Aktualisiert bei TreeEvent-getriggerten Knoten die Werte
            des Knotens, bevor mit ihnen weitergearbeitet wird.
            Ist bei Situationen wichtig, in dem entweder der Knoten das
            auslösende TreeEvent verpasst hat (beim Programmstart)
            oder ein anderes TreeEvent schneller war und zu einer
            Reaktion führt, die die aktuellen Werte des Knotens
            benötigt (JobSnapshotTrigger).
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_GetResults.htm">GetResults</a></td><td>
            Returniert das ConcurrentDictionary ResultList als einfaches Dictionary Results.
            Benutzt dazu die interne Routine GetResultsFromResultList().
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_GetTopRootJobList.htm">GetTopRootJobList</a></td><td>
            Liefert die für den Knoten gültige, oberste Root-JobList.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_InitFromNode.htm">InitFromNode</a></td><td>
            Setzt bestimmte Eigenschaften auf die Werte der übergebenen LogicalNode "source". 
            </td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_InitNode.htm">InitNode</a></td><td>
            Setzt den Knoten auf die Starteinstellungen zurück.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_Invalidate.htm">Invalidate</a></td><td>
            Löscht interne Caches, so dass alles neu ausgewertet wird.
            </td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /><img src="../icons/Static.gif" alt="Static Member" title="Static Member" /></td><td><a href="M_LogicalTaskTree_LogicalNode_LogWithDistinctTime.htm">LogWithDistinctTime</a></td><td>
            Schreibt eine Nachricht mit kurzer Sleeptime vorher und nacher, um zeitnahe
            Vorgänge später im Log in zeitlicher Folge sichtbar zu machen.
            </td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_MarkThreadAsInvalidIfActive.htm">MarkThreadAsInvalidIfActive</a></td><td>
            Trägt thread in die Liste ungültiger Threads ein,
            falls der Thread noch aktiv ist.
            </td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_OnLastNotNullLogicalChanged.htm">OnLastNotNullLogicalChanged</a></td><td>
            Löst das NodeLastNotNullLogicalChanged-Ereignis aus.
            </td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_OnNodeBreaked.htm">OnNodeBreaked</a></td><td>
            Löst das NodeBreaked-Ereignis aus.
            </td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_OnNodeProgressChanged.htm">OnNodeProgressChanged</a></td><td>
            Löst das NodeProgressChanged-Ereignis aus.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_OnNodeProgressFinished.htm">OnNodeProgressFinished</a></td><td>
            Löst das NodeProgressFinished-Ereignis aus.
            </td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_OnNodeProgressStarted.htm">OnNodeProgressStarted</a></td><td>
            Löst das NodeStarted-Ereignis aus.
            </td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_OnNodeWorkersStateChanged.htm">OnNodeWorkersStateChanged</a></td><td>
            Löst das NodeWorkersStateChanged-Ereignis aus.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /><img src="../icons/Static.gif" alt="Static Member" title="Static Member" /></td><td><a href="M_LogicalTaskTree_LogicalNode_PauseTree.htm">PauseTree</a></td><td>
            Hält die Verarbeitung im Tree an.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_ProcessTreeEvent.htm">ProcessTreeEvent</a></td><td>
            Stößt weitere Verarbeitungen für das aktuelle TreeEvent an (Trigger, Logger).
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /><img src="../icons/Static.gif" alt="Static Member" title="Static Member" /></td><td><a href="M_LogicalTaskTree_LogicalNode_ProhibitSnapshots.htm">ProhibitSnapshots</a></td><td>
            Verhindert Snapshots.
            </td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_RaiseNodeLastNotNullLogicalChangedWithTreeEvent.htm">RaiseNodeLastNotNullLogicalChangedWithTreeEvent</a></td><td>
            Triggert das TreeEvent "AnyLastNotNullLogicalHasChanged" und ruft "OnNodeLastNotNullLogicalChanged".
            </td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_RaiseNodeLogicalChanged.htm">RaiseNodeLogicalChanged</a></td><td>
            Kapselt den Aufruf des nicht vererbbaren Events NodeLogicalChanged für
            für die abgeleiteten Klassen NodeList und JobList.
            Diese Routine gibt das Event über NodeLogicalChanged letzten Endes an die UI weiter.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_Refresh.htm">Refresh</a></td><td>
            Sorgt für eine sofortige Neu-Auswertung aller gecashten Zustände.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_RegisterTriggeredNodes.htm">RegisterTriggeredNodes</a></td><td>
            Registriert alle getriggerten Knoten eines Teilbaums bei ihren Triggern.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_Reload.htm">Reload</a></td><td>
            Wird aufgerufen, wenn der Teilbaum neu geladen werden soll.
            </td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_ResetAllTreeEventTriggeringNodes.htm">ResetAllTreeEventTriggeringNodes</a></td><td>
            Setzt alle Knoten im Teilbaum zurück, von denen andere per TreeEvent abhängen.
            </td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_ResetAllTreeNodes.htm">ResetAllTreeNodes</a></td><td>
            Setzt alle Knoten im gesamten Tree zurück.
            </td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_ResetPartTreeNodes.htm">ResetPartTreeNodes</a></td><td>
            Setzt alle Knoten im Teilbaum ab branch zurück.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /><img src="../icons/Static.gif" alt="Static Member" title="Static Member" /></td><td><a href="M_LogicalTaskTree_LogicalNode_ResumeTree.htm">ResumeTree</a></td><td>
            Lässt einen angehaltenen Tree weiterlaufen.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_Run.htm">Run</a></td><td>
            Prüft, ob ein Knoten gestartet werden kann und startet dann den Knoten, seinen Trigger,
            oder beide (über StartNodeOrTrigger).
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_SetTreeCollapsed.htm">SetTreeCollapsed</a></td><td>
            Setzt die Property StartCollapsed für einen ganzen (Teil-)Baum.
            </td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_SetWorkersState.htm">SetWorkersState</a></td><td>
            Setzt einen gemeinsamen (kombinierten) NodeWorkerState 'WorkersState'
            für alle NodeWorker.
            Retourniert NodeWorkersState.
            </td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /><img src="../icons/Static.gif" alt="Static Member" title="Static Member" /></td><td><a href="M_LogicalTaskTree_LogicalNode_SleepIfNecessary.htm">SleepIfNecessary</a></td><td>
            Streut System.Sleeps zur Systementlastung ein.
            Ist feiner regulierbar, als fixe Sleeps in geschachtelten Inner-Loops.
            </td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_ThreadUpdateLastLogical.htm">ThreadUpdateLastLogical</a></td><td>
            Setzt threadsafe LastLogical.
            </td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_ThreadUpdateLastLogicalState.htm">ThreadUpdateLastLogicalState</a></td><td>
            Setzt threadsafe LastLogicalState.
            </td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_ThreadUpdateLastState.htm">ThreadUpdateLastState</a></td><td>
            Setzt threadsafe LastState.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_ToString.htm">ToString</a></td><td>
            Überschriebene ToString()-Methode.
            <br />(Überschreibt <a href="https://learn.microsoft.com/dotnet/api/system.object.tostring" target="_blank" rel="noopener noreferrer">Object<span id="LSTA287690F_15" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>ToString<span id="LSTA287690F_16" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_NetEti_Globals_GenericTree_1_Traverse.htm">Traverse(Action<span id="LSTA287690F_17" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, T<span id="LSTA287690F_18" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Geht rekursiv durch den Baum und ruft für jeden Knoten die Action auf.
            <br />(Vererbt von <a href="T_NetEti_Globals_GenericTree_1.htm">GenericTree<span id="LSTA287690F_19" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTA287690F_20" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_NetEti_Globals_GenericTree_1_Traverse_1.htm">Traverse(Func<span id="LSTA287690F_21" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, T, Object, Object<span id="LSTA287690F_22" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Geht rekursiv durch den Baum und ruft für jeden Knoten die Action auf.
            <br />(Vererbt von <a href="T_NetEti_Globals_GenericTree_1.htm">GenericTree<span id="LSTA287690F_23" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTA287690F_24" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_NetEti_Globals_GenericTree_1_Traverse_2.htm">Traverse(Int32, Action<span id="LSTA287690F_25" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, T<span id="LSTA287690F_26" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Rekursive Hilfsroutine für die öffentliche Routine 'Traverse'.
            <br />(Vererbt von <a href="T_NetEti_Globals_GenericTree_1.htm">GenericTree<span id="LSTA287690F_27" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTA287690F_28" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_NetEti_Globals_GenericTree_1_Traverse_3.htm">Traverse(Int32, Func<span id="LSTA287690F_29" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32, T, Object, Object<span id="LSTA287690F_30" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Object)</a></td><td>
            Rekursive Hilfsroutine für die öffentliche Routine 'Traverse'.
            <br />(Vererbt von <a href="T_NetEti_Globals_GenericTree_1.htm">GenericTree<span id="LSTA287690F_31" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTA287690F_32" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected Methode" title="Protected Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_UnMarkThreadAsInvalid.htm">UnMarkThreadAsInvalid</a></td><td>
            Entfernt thread aus der Liste ungültiger Threads.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_UnregisterTriggeredNode.htm">UnregisterTriggeredNode</a></td><td>
            Setzt den Teilbaum auf nicht startbar.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_UserBreak.htm">UserBreak</a></td><td>
            Wird aufgerufen, wenn der Teilbaum vom Anwender bewusst gestoppt wurde.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public Methode" title="Public Methode" /></td><td><a href="M_LogicalTaskTree_LogicalNode_UserRun.htm">UserRun</a></td><td>
            Startet die Verarbeitung dieses Knotens nach einem Start
            durch den Anwender. Gibt die Information, dass der Start
            durch den Anwender erfolgte, im TreeEvent an Run weiter.
            </td></tr></table><a href="#PageHeader">Zurück nach oben</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDAFA')" onkeypress="SectionExpandCollapse_CheckKey('IDAFA', event)" tabindex="0"><img id="IDAFAToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Ereignisse</span></div><div id="IDAFASection" class="collapsibleSection"><table id="EventList" class="members"><tr><th class="iconColumn"> </th><th>Name</th><th>Beschreibung</th></tr><tr><td><img src="../icons/pubEvent.gif" alt="Public Ereignis" title="Public Ereignis" /><img src="../icons/Static.gif" alt="Static Member" title="Static Member" /></td><td><a href="E_LogicalTaskTree_LogicalNode_AllNodesStateChanged.htm">AllNodesStateChanged</a></td><td>
            Wird aufgerufen, wenn sich der Verarbeitungszustand eines Knotens geändert hat.
            </td></tr><tr><td><img src="../icons/pubEvent.gif" alt="Public Ereignis" title="Public Ereignis" /></td><td><a href="E_LogicalTaskTree_LogicalNode_ExceptionCleared.htm">ExceptionCleared</a></td><td>
            Wird aufgerufen, wenn eine Exception gelöscht wird.
            </td></tr><tr><td><img src="../icons/pubEvent.gif" alt="Public Ereignis" title="Public Ereignis" /></td><td><a href="E_LogicalTaskTree_LogicalNode_ExceptionRaised.htm">ExceptionRaised</a></td><td>
            Wird aufgerufen, wenn eine Exception aufgetreten ist.
            </td></tr><tr><td><img src="../icons/pubEvent.gif" alt="Public Ereignis" title="Public Ereignis" /></td><td><a href="E_LogicalTaskTree_LogicalNode_NodeLastNotNullLogicalChanged.htm">NodeLastNotNullLogicalChanged</a></td><td>
            Wird aufgerufen, wenn sich das logische Ergebnis eines Knotens geändert hat
            und ungleich null ist.
            </td></tr><tr><td><img src="../icons/pubEvent.gif" alt="Public Ereignis" title="Public Ereignis" /></td><td><a href="E_LogicalTaskTree_LogicalNode_NodeLogicalChanged.htm">NodeLogicalChanged</a></td><td>
            Wird aufgerufen, wenn sich das logische Ergebnis eines Knotens geändert hat.
            </td></tr><tr><td><img src="../icons/pubEvent.gif" alt="Public Ereignis" title="Public Ereignis" /></td><td><a href="E_LogicalTaskTree_LogicalNode_NodeProgressChanged.htm">NodeProgressChanged</a></td><td>
            Wird aufgerufen, wenn sich der Verarbeitungs-Fortschritt eines Knotens geändert hat.
            </td></tr><tr><td><img src="../icons/pubEvent.gif" alt="Public Ereignis" title="Public Ereignis" /></td><td><a href="E_LogicalTaskTree_LogicalNode_NodeProgressFinished.htm">NodeProgressFinished</a></td><td>
            Wird aufgerufen, wenn die Verarbeitung eines Knotens abgeschlossen wurde (unabhängig vom Ergebnis).
            </td></tr><tr><td><img src="../icons/pubEvent.gif" alt="Public Ereignis" title="Public Ereignis" /></td><td><a href="E_LogicalTaskTree_LogicalNode_NodeProgressStarted.htm">NodeProgressStarted</a></td><td>
            Wird aufgerufen, wenn ein Knoten gestartet wurde.
            </td></tr><tr><td><img src="../icons/pubEvent.gif" alt="Public Ereignis" title="Public Ereignis" /></td><td><a href="E_LogicalTaskTree_LogicalNode_NodeResultChanged.htm">NodeResultChanged</a></td><td>
            Wird aufgerufen, wenn sich das Result eines Knotens geändert hat.
            Dient dazu, die Berechnung des logischen Zustands des übergeordneten
            Knotens neu zu starten.
            </td></tr><tr><td><img src="../icons/pubEvent.gif" alt="Public Ereignis" title="Public Ereignis" /></td><td><a href="E_LogicalTaskTree_LogicalNode_NodeStateChanged.htm">NodeStateChanged</a></td><td>
            Wird aufgerufen, wenn sich der Verarbeitungszustand eines Knotens geändert hat.
            </td></tr><tr><td><img src="../icons/pubEvent.gif" alt="Public Ereignis" title="Public Ereignis" /></td><td><a href="E_LogicalTaskTree_LogicalNode_NodeWorkersStateChanged.htm">NodeWorkersStateChanged</a></td><td>
            Wird aufgerufen, wenn sich der Gesamtzustand der dem Knoten
            zugeordneten Worker geändert hat.
            </td></tr><tr><td><img src="../icons/pubEvent.gif" alt="Public Ereignis" title="Public Ereignis" /></td><td><a href="E_LogicalTaskTree_LogicalNode_PropertiesChanged.htm">PropertiesChanged</a></td><td>
            Dieses Event aus IVishnuNode.INotifyPropertiesChanged kann von LogicalNodeViewmodel abonniert werden.
            Dieses erhält über die übergebenen PropertiesChangedEventArgs eine String-List mit Property-Namen
            und kann seinerseits über INotifyProperyChanged die UI informieren.
            </td></tr></table><a href="#PageHeader">Zurück nach oben</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDMFA')" onkeypress="SectionExpandCollapse_CheckKey('IDMFA', event)" tabindex="0"><img id="IDMFAToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Felder</span></div><div id="IDMFASection" class="collapsibleSection"><table id="FieldList" class="members"><tr><th class="iconColumn"> </th><th>Name</th><th>Beschreibung</th></tr><tr><td><img src="../icons/protField.gif" alt="Protected Feld" title="Protected Feld" /></td><td><a href="F_LogicalTaskTree_LogicalNode__lastRun.htm">_lastRun</a></td><td>
            Zeitpunkt des letzten Starts des Knoten (internes Feld).
            </td></tr><tr><td><img src="../icons/protField.gif" alt="Protected Feld" title="Protected Feld" /></td><td><a href="F_LogicalTaskTree_LogicalNode__nextRunInfo.htm">_nextRunInfo</a></td><td>
            Info-Text über den nächsten Start des Knotens (wenn bekannt) oder null (internes Feld).
            </td></tr><tr><td><img src="../icons/protField.gif" alt="Protected Feld" title="Protected Feld" /></td><td><a href="F_LogicalTaskTree_LogicalNode__parentViewLocker.htm">_parentViewLocker</a></td><td>
            Dient zur Sperrung für Thread-safen Zugriff auf ParentView.
            </td></tr><tr><td><img src="../icons/protField.gif" alt="Protected Feld" title="Protected Feld" /></td><td><a href="F_LogicalTaskTree_LogicalNode_AppSettings.htm">AppSettings</a></td><td>
            Applikationseinstellungen.
            </td></tr><tr><td><img src="../icons/protField.gif" alt="Protected Feld" title="Protected Feld" /></td><td><a href="F_LogicalTaskTree_LogicalNode_CancellationToken.htm">CancellationToken</a></td><td>
            Über die CancellationTokenSource kann dieses Token auf
            Abbruch gesetzt werden, was in diesem Knoten zum Aufruf
            der Routine cancelNotification führt.
            </td></tr><tr><td><img src="../icons/protField.gif" alt="Protected Feld" title="Protected Feld" /></td><td><a href="F_LogicalTaskTree_LogicalNode_ExceptionLocker.htm">ExceptionLocker</a></td><td>
            Dient zum kurzzeitigen Sperren bei Exceptions.
            </td></tr><tr><td><img src="../icons/protField.gif" alt="Protected Feld" title="Protected Feld" /></td><td><a href="F_LogicalTaskTree_LogicalNode_IsRunRequired.htm">IsRunRequired</a></td><td>
            True: der Knoten soll gestartet werden.
            </td></tr><tr><td><img src="../icons/pubField.gif" alt="Public Feld" title="Public Feld" /><img src="../icons/Static.gif" alt="Static Member" title="Static Member" /></td><td><a href="F_LogicalTaskTree_LogicalNode_IsSnapshotProhibited.htm">IsSnapshotProhibited</a></td><td>
            Liefert true, wenn gerade keine Snapshots erlaubt sind.
            </td></tr><tr><td><img src="../icons/protField.gif" alt="Protected Feld" title="Protected Feld" /></td><td><a href="F_LogicalTaskTree_LogicalNode_IsTaskActiveOrScheduled.htm">IsTaskActiveOrScheduled</a></td><td>
            True: der Knoten ist gerade aktiv oder durch einen Timer kontrolliert.
            </td></tr><tr><td><img src="../icons/pubField.gif" alt="Public Feld" title="Public Feld" /><img src="../icons/Static.gif" alt="Static Member" title="Static Member" /></td><td><a href="F_LogicalTaskTree_LogicalNode_IsTreeFlushing.htm">IsTreeFlushing</a></td><td>
            Liefert true, wenn die Verarbeitung im Tree gerade angehalten werden soll
            aber schon erzeugte logische Änderungen noch zuende verteilt werden.
            </td></tr><tr><td><img src="../icons/pubField.gif" alt="Public Feld" title="Public Feld" /><img src="../icons/Static.gif" alt="Static Member" title="Static Member" /></td><td><a href="F_LogicalTaskTree_LogicalNode_IsTreePaused.htm">IsTreePaused</a></td><td>
            Liefert true, wenn die Verarbeitung im Tree gerade angehalten wurde.
            </td></tr><tr><td><img src="../icons/pubField.gif" alt="Public Feld" title="Public Feld" /></td><td><a href="F_LogicalTaskTree_LogicalNode_LastExceptions.htm">LastExceptions</a></td><td>
            Beim letzten Lauf aufgetretene Exception oder null;
            </td></tr><tr><td><img src="../icons/protField.gif" alt="Protected Feld" title="Protected Feld" /></td><td><a href="F_LogicalTaskTree_LogicalNode_LastLogicalLocker.htm">LastLogicalLocker</a></td><td>
            Dient zum kurzzeitigen Sperren von LastLogical.
            </td></tr><tr><td><img src="../icons/protField.gif" alt="Protected Feld" title="Protected Feld" /></td><td><a href="F_LogicalTaskTree_LogicalNode_LastLogicalStateLocker.htm">LastLogicalStateLocker</a></td><td>
            Dient zum kurzzeitigen Sperren von LastLogicalState.
            </td></tr><tr><td><img src="../icons/protField.gif" alt="Protected Feld" title="Protected Feld" /></td><td><a href="F_LogicalTaskTree_LogicalNode_LastStateLocker.htm">LastStateLocker</a></td><td>
            Dient zum kurzzeitigen Sperren von LastState.
            </td></tr><tr><td><img src="../icons/pubField.gif" alt="Public Feld" title="Public Feld" /></td><td><a href="F_NetEti_Globals_GenericTree_1_Mother.htm">Mother</a></td><td>
            Der Besitzer des Knoten.
            <br />(Vererbt von <a href="T_NetEti_Globals_GenericTree_1.htm">GenericTree<span id="LSTA287690F_33" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTA287690F_34" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>)</td></tr><tr><td><img src="../icons/protField.gif" alt="Protected Feld" title="Protected Feld" /></td><td><a href="F_LogicalTaskTree_LogicalNode_ResultLocker.htm">ResultLocker</a></td><td>
            Dient zum kurzzeitigen Sperren von Result.
            </td></tr><tr><td><img src="../icons/pubField.gif" alt="Public Feld" title="Public Feld" /></td><td><a href="F_LogicalTaskTree_LogicalNode_RootJobList.htm">RootJobList</a></td><td>
            Nächsthöhere JobList für diesen Knoten oder der Knoten selbst,
            wenn er eine JobList ist.
            </td></tr><tr><td><img src="../icons/protField.gif" alt="Protected Feld" title="Protected Feld" /></td><td><a href="F_LogicalTaskTree_LogicalNode_SubLastNotNullLogicalLocker.htm">SubLastNotNullLogicalLocker</a></td><td>
            Dient zum kurzzeitigen Sperren von LastLogical.
            </td></tr><tr><td><img src="../icons/pubField.gif" alt="Public Feld" title="Public Feld" /></td><td><a href="F_LogicalTaskTree_LogicalNode_TreeRootJobList.htm">TreeRootJobList</a></td><td>
            Oberste JobList.
            </td></tr></table><a href="#PageHeader">Zurück nach oben</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDBC')" onkeypress="SectionExpandCollapse_CheckKey('IDBC', event)" tabindex="0"><img id="IDBCToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Anmerkungen</span></div><div id="IDBCSection" class="collapsibleSection">
             File: LogicalNode.cs
             Autor: Erik Nagel
            
             01.12.2012 Erik Nagel: erstellt
             06.08.2016 Erik Nagel: IVishnuNode implementiert.
             </div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('seeAlso')" onkeypress="SectionExpandCollapse_CheckKey('seeAlso', event)" tabindex="0"><img id="seeAlsoToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Siehe auch</span></div><div id="seeAlsoSection" class="collapsibleSection"><h4>Referenz</h4><div><a href="N_LogicalTaskTree.htm">LogicalTaskTree Namensraum</a></div></div></div></div><div id="PageFooter" class="pageFooter">Naturgemäß basieren viele Erkenntnisse und Entwicklungen auf im Internet frei zugänglichen Informationen. Eventuell fehlende Verweise auf ursprüngliche Autoren sind unbeabsichtigt und werden nach Meldung sofort nachgepflegt.<p>Copyright © 2012-2025 Erik Nagel</p><div class="feedbackLink">Senden Sie Kommentare zu diesem Feature an
        <a id="HT_MailLink" href="mailto:Vishnu%40reallyhuman.net?Subject=Vishnu%20-%20der%20logische%20Prozess-Monitor">Vishnu@reallyhuman.net</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Ihre Rückmeldung wird für die Verbesserung der Dokumentation und des Produktes genutzt. Ihre Email-Adresse wird zu keinem anderen Zweck benutzt und wird nach der Behebung des gemeldeten Problems gelöscht. Während der Arbeit an dem Problem kann es sein dass Sie per Email kontaktiert werden für weitergehende Details oder Abklärung zur Rückmeldung von Ihnen. Nachdem das Problem eingegrenzt worden ist kann es sein dass Sie eine Email erhalten zur Problembehebung.");
        </script></div></body></html>