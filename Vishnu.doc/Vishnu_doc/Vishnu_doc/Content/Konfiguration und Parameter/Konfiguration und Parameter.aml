<?xml version="1.0" encoding="utf-8"?>
<topic id="E6ECB24A-CA5C-4785-9514-992F359D394A" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->

    <introduction address="Intro">
      <!-- Uncomment this to generate an outline of the section and sub-section
           titles.  Specify a numeric value as the inner text to limit it to
           a specific number of sub-topics when creating the outline.  Specify
           zero (0) to limit it to top-level sections only.  -->
      <!-- <autoOutline /> -->

      <para>
        Das Verhalten von <token>V</token> kann über diverse Parameter eingestellt werden.
        Diese Parameter können beim Aufruf von <token>V</token> über die Kommandozeile mitgegeben werden,
        sie können aber auch über die <link xlink:href="9b9475bc-f8a9-4e7a-a84a-373276329b00" />,
        das Environment, oder die Registry eingestellt werden. <token>V</token> leitet dabei auch ihm unbekannte
        "anonyme" Parameter an <languageKeyword>Jobs</languageKeyword> und <languageKeyword>Checker</languageKeyword> weiter,
        sofern sie an den <token>V</token> bekannten Stellen abgelegt wurden.
      </para>
      <para>
        <token>V</token>-<languageKeyword>Jobs</languageKeyword> und deren Elemente wie zum Beispiel <languageKeyword>Checker</languageKeyword>
        können über verschiedene Parameter in der <languageKeyword>JobDescription.xml</languageKeyword> gesteuert werden.
        Eine Liste von Parametereinstellungen für Jobs und deren Elemente finden Sie weiter unten in diesem Kapitel bei <link xlink:href="#JobParameter">Job Parameter</link>.
      </para>
    </introduction>

    <!-- Add one or more top-level section elements.  These are collapsible.
         If using <autoOutline />, add an address attribute to identify it
         and specify a title so that it can be jumped to with a hyperlink. -->
    <section address="VishnuParameter">
      <title>Vishnu Parameter</title>
      <content>
        <para>
          <token>V</token>-Parameter können, wie eingangs schon erwähnt, auf verschiedenen Wegen eingestellt werden.
          In welcher Form das zu erfolgen hat, sehen Sie beispielhaft in der nachfolgenden Auflistung.
        </para>
        <list class="bullet">
          <listItem>
            <para>
              <languageKeyword>Kommandozeile</languageKeyword>
            </para>
            <para>
              Parameterübergaben an <token>V</token> über die Kommandozeile folgen immer dem Schema
              <languageKeyword>Vishnu [anonyme Parameter] [Vishnu-Parameter]</languageKeyword>.
              Die eckigen Klammern werden nicht mit eingegeben. Sie symbolisieren, dass die jeweiligen Parameter optonal sind,
              d.h. nicht vorkommen müssen.
            </para>
            <para>
              Beispiel: <languageKeyword>Vishnu "irgendwas" -job="DemoJobs\CheckAll"</languageKeyword>
            </para>
            <alert class="note">
              <para>
                Es gibt zusätzlich noch einen fortgeschrittenen Weg zur Übergabe von anonymen Parametern.
                Sie können Ihre Parameter über <link xlink:href="f724b721-c805-4dbe-8db4-1529c0c68f3d" /> einsteuern.
                <token>V</token> berücksichtigt bei der Parametersuche vorrangig einen User-eigenen Parameter-Reader,
                dessen Pfad über den Parameter <languageKeyword>UserParameterReaderPath</languageKeyword> konfiguriert wurde.
              </para>
            </alert>
          </listItem>
          <listItem>
            <para>
              <link xlink:href="9b9475bc-f8a9-4e7a-a84a-373276329b00" />
            </para>
            <para>
              <link xlink:href="9b9475bc-f8a9-4e7a-a84a-373276329b00" /> ist die zentrale Konfigurationsdatei für Ihre
              eigenen <token>V</token>-Einstellungen. Hier finden Sie einige voreingestellte Parameter. Sie können diese
              ändern, aber auch eigene hinzufügen.
              Sie finden die <link xlink:href="9b9475bc-f8a9-4e7a-a84a-373276329b00" /> per Grundeinstellung im Pfad
              <languageKeyword>%LOCALAPPDATA%\Vishnu\Vishnu.exe.config.user</languageKeyword>, wobei
              <languageKeyword>LOCALAPPDATA</languageKeyword> eine Einstellung der Windows-Umgebung (Environment) ist
              und üblicherweise auf <languageKeyword>C:\Users\&lt;Benutzer&gt;\AppData\Local</languageKeyword> verweist.
            </para>
            <para>
              Beispiel: <languageKeyword>&lt;add key="Job" value="DemoJobs\CheckAll"&gt;</languageKeyword>
            </para>
            <alert class="note">
              <para>
                Die Reihenfolge der Parameterangaben ist in der <link xlink:href="9b9475bc-f8a9-4e7a-a84a-373276329b00" />
                unerheblich. Sie müssen sich nur innerhalb von &lt;appSettings&gt; und &lt;/appSettings&gt; befinden.
              </para>
            </alert>
          </listItem>
          <listItem>
            <para>
              <languageKeyword>Environment (Windows Umgebung)</languageKeyword>
            </para>
            <para>
              Beispiel: <languageKeyword>SET Job="DemoJobs\CheckAll"</languageKeyword>
            </para>
          </listItem>
          <listItem>
            <para>
              <languageKeyword>Registry</languageKeyword>:
              <token>V</token> selbst nutzt die Registry nicht, unterstützt aber die Ablage von Parametereinstellungen
              im Pfad <languageKeyword>RegistryBasePath</languageKeyword>. <languageKeyword>RegistryBasePath</languageKeyword>
              ist ein konfigurierbarer Parameter und per Default auf den Registry-Key
              <languageKeyword>HKEY_LOCAL_MACHINE\SOFTWARE\Vishnu</languageKeyword> voreingestellt. <token>V</token> sucht unterhalb von
              RegistryBasePath nach String-Werten.
            </para>
            <para>
              Beispiel: Key <languageKeyword>HKEY_LOCAL_MACHINE\SOFTWARE\Vishnu\Job</languageKeyword> mit Wert "DemoJobs\CheckAll"
            </para>
          </listItem>
        </list>
        <para>
          In der folgenden Liste haben wir für Sie eine Auswahl wesentlicher <token>V</token>-Parameter zusammengestellt.
        </para>
        <alert class="note">
          <para>
            Eine vollständige Liste aller <token>V</token>-Parameter finden Sie unter
            <codeEntityReference qualifyHint="true">T:Vishnu.Interchange.AppSettings</codeEntityReference>.
          </para>
        </alert>
        <list class="bullet">
          <listItem>
            <para>
              <languageKeyword>AppConfigUser</languageKeyword>
            </para>
            <para>
              Über den Parameter <languageKeyword>AppConfigUser</languageKeyword> wird der Pfad zur Datei
              <link xlink:href="9b9475bc-f8a9-4e7a-a84a-373276329b00" /> festgelegt.
              Diese Einstellung sollte normalerweise nicht geändert werden müssen.
            </para>
            <alert class="caution">
              <para>
                Falls Sie doch einmal die Notwendigkeit für eine Änderung von <languageKeyword>AppConfigUser</languageKeyword>
                sehen, denken Sie daran, dass dieser Parameter nicht in der
                <link xlink:href="9b9475bc-f8a9-4e7a-a84a-373276329b00" /> selbst definiert werden kann.
              </para>
            </alert>
          </listItem>
          <listItem>
            <para>
              <languageKeyword>Job</languageKeyword>
            </para>
            <para>
              Über diesen Parameter kann der Pfad zum Job oder zu einem Zip-Archiv, welches das Job-Verzeichnis enthält (dann ohne ".zip"-Extension),
              festgelegt werden. Der Pfad kann absolut oder relativ zum übergeordneten Job bzw. zum <token>V</token>-Installationsverzeichnis
              angegeben werden.
              Gültige Pfadangaben sind z.B. <languageKeyword>DemoJobs\CheckAll</languageKeyword> oder auch
              <languageKeyword>c:\Users\%UserName%\AppData\Local\Apps\Vishnu\CheckAll</languageKeyword>.
            </para>
          </listItem>
          <listItem>
            <para>
              <languageKeyword>DemoModus</languageKeyword>
            </para>
            <para>
              <token>V</token> wird bei Erstinstallation im Demo-Modus mit einem Demo-Job gestartet.
              Dies ist in der <link xlink:href="9b9475bc-f8a9-4e7a-a84a-373276329b00" /> so voreingestellt.
              Um die Anzeige "-DEMO-" im Vishnu-Fenster loszuwerden, können Sie <languageKeyword>DemoModus</languageKeyword>
              auf "false" setzen oder den Parameter ganz herausnehmen.
            </para>
          </listItem>
          <listItem>
            <para>
              <languageKeyword>Autostart</languageKeyword>
            </para>
            <para>
              Wird <languageKeyword>Autostart</languageKeyword> auf "true" eingestellt, beginnt <token>V</token> nach dem Programmstart
              direkt mit der Verarbeitung der <languageKeyword>Jobs</languageKeyword>.
              Dies ist auch die Voreinstellung.
            </para>
          </listItem>
          <listItem>
            <para>
              <languageKeyword>SingleInstance</languageKeyword>
            </para>
            <para>
              Dieser Parameter steht in der Grundeinstellung auf "true". Das bedeutet, dass <token>V</token> nur
              einmal gleichzeitig auf einem Rechner gestartet werden kann. Ein weiterer Startversuch holt dann nur
              noch das schon laufende <token>V</token>-Programm (Instanz) in den Vordergrund.
            </para>
          </listItem>
          <listItem>
            <para>
              <languageKeyword>WorkingDirectory</languageKeyword>
            </para>
            <para>
              <languageKeyword>KillWorkingDirectoryAtShutdown</languageKeyword>
            </para>
            <para>
              Das <languageKeyword>WorkingDirectory</languageKeyword> ist das <token>V</token>-Arbeitsverzeichnis.
              Hier legt <token>V</token> Logfiles und Momentaufnahmen seines Zustandes
              (<languageKeyword>Snapshots</languageKeyword>) ab, wenn für diese keine anderen Ablageverzeichnisse definiert wurden.
              Die Default-Einstellung ist <languageKeyword>%TempDirectory%\Vishnu.%MainJobName%</languageKeyword>.
            </para>
            <para>
              Per Default lässt <token>V</token> das <languageKeyword>WorkingDirectory</languageKeyword> am Ende der
              Verarbeitung stehen. Wenn Sie wollen, dass <token>V</token> am Ende der Verarbeitung wieder aufräumt, d.h. das
              Arbeitsverzeichnis wieder löscht, können Sie den Parameter <languageKeyword>KillWorkingDirectoryAtShutdown</languageKeyword>
              auf "true" stellen.
            </para>
            <alert class="note">
              <para>
                Selbstverständlich löscht <token>V</token> nur Verzeichnisse, die von <token>V</token> vorher auch angelegt wurden.
              </para>
            </alert>
          </listItem>
          <listItem>
            <para>
              <languageKeyword>DebugFile</languageKeyword>
            </para>
            <para>
              Das <languageKeyword>DebugFile</languageKeyword> ist die <token>V</token>-Log-Datei.
              Hier hinein schreibt <token>V</token> alle Verarbeitungsfehler und ggf. auch alle seine Konfigurationsparameter
              mit Quellen und plus eine Liste aller geladenen <languageKeyword>Assemblies</languageKeyword>.
            </para>
            <para>
              Auch alle Ausgaben der eventuell von Ihnen in der <languageKeyword>JobDescription.xml</languageKeyword>
              definierten <languageKeyword>Logger</languageKeyword> landen im <languageKeyword>DebugFile</languageKeyword>.
            </para>
            <para>
               Die <token>V</token>-Log-Datei ist per Default <languageKeyword>%TempDirectory%\Vishnu.%MainJobName%\Vishnu.log</languageKeyword>.
            </para>
            <alert class="note">
              <para>
                Nähere Informationen zu <languageKeyword>Loggern</languageKeyword> finden Sie unter
                <link xlink:href="bc0ffa08-c936-4fad-8fdb-dbd2279fc360#Logger" />.
              </para>
            </alert>
          </listItem>
          <listItem>
            <para>
              <languageKeyword>DumpAppSettings</languageKeyword>
            </para>
            <para>
              <languageKeyword>DumpLoadedAssemblies</languageKeyword>
            </para>
            <para>
              Diese beiden Parameter können, wie schon oben angesprochen, zur Fehlersuche genutzt werden.
              <languageKeyword>True</languageKeyword> bedeutet jeweils in die Log-Datei schreiben,
              bei <languageKeyword>false</languageKeyword> wird nichts geloggt.
              Der Default ist für beide Parameter <languageKeyword>false</languageKeyword>.
            </para>
          </listItem>
          <listItem>
            <para>
              <languageKeyword>RegistryBasePath</languageKeyword>
            </para>
            <para>
              <token>V</token> sucht in der Windows-Registry unterhalb von <languageKeyword>RegistryBasePath</languageKeyword>
              nach Parametern (Key) und ihren Werten (Value).
              Default-Einstellung ist <languageKeyword>HKEY_LOCAL_MACHINE\SOFTWARE\Vishnu</languageKeyword>.
            </para>
          </listItem>
          <listItem>
            <para>
              <languageKeyword>UserAssemblyDirectory</languageKeyword>
            </para>
            <para>
              <languageKeyword>UserParameterReaderPath</languageKeyword>
            </para>
            <para>
              Über den Parameter <languageKeyword>UserAssemblyDirectory</languageKeyword> kann ein Verzeichnis gesetzt
              werden, in dem <token>V</token> zusätzlich zu den jeweweiligen <languageKeyword>Job</languageKeyword>-Verzeichnissen nach Ihren
              <link xlink:href="a3f9771a-ac24-46c0-97df-d2bde6a990e8">eingenen Checker-DLLs</link>,
              <link xlink:href="74204d60-cbb3-4f38-8266-aa7af541143f">eigenen UserControls</link> oder auch
              <link xlink:href="f724b721-c805-4dbe-8db4-1529c0c68f3d">Ihrem eigenen Parameter-Reader</link> sucht.
              Default-Einstellung ist <languageKeyword>UserAssemblies</languageKeyword>.
              Ein eventueller eigener Parameter-Reader muss allerdings zusätzlich über den Parameter
              <languageKeyword>UserParameterReaderPath</languageKeyword> entsprechend eingestellt worden sein,
              zum Beispiel auf "<languageKeyword>%UserAssemblyDirectory%\DemoParameterProvider.dll</languageKeyword>".
            </para>
          </listItem>
          <listItem>
            <para>
              <languageKeyword>SnapshotDirectory</languageKeyword>
            </para>
            <para>
              Über den Parameter <languageKeyword>SnapshotDirectory</languageKeyword> kann ein Verzeichnis gesetzt
              werden, in dem <token>V</token> nach abgespeicherten Momentaufnahmen von <token>V</token>-<languageKeyword>Jobs</languageKeyword> sucht.
              Das <languageKeyword>SnapshotDirectory</languageKeyword> ist immer relativ zum aktuellen <languageKeyword>Job</languageKeyword>-Verzeichnis
              und per Default auf <languageKeyword>"..\Snapshots"</languageKeyword> eingestellt.
            </para>
            <alert class="note">
              <para>
                Wofür <languageKeyword>Snapshots</languageKeyword> genau gut sind und wie sie konfiguriert werden, wird in einem eigenen Kapitel
                <link xlink:href="628bbc96-dcd7-4563-a515-5a2edf9ebc10"></link> beschrieben.
              </para>
            </alert>
          </listItem>
        </list>
        <alert class="note">
          <para>
            Die Parameterübergabe erfolgt für alle Parametereinstellungen gleich.
            Eine entsprechende Beschreibung finden Sie am <link xlink:href="#VishnuParameter">Anfang</link> dieses Abschnitts.
          </para>
        </alert>
      </content>
      <!-- If a section contains a sections element, its content creates
           sub-sections.  These are not collapsible.
      <sections>
          <section address="SubSection1">
              <title>Sub-section 1</title>
              <content>
                  <para>Sub-section content.</para>
              </content>
          </section>
          <section address="SubSection2">
              <title>Sub-section 2</title>
              <content>
                  <para>Sub-section content.</para>
              </content>
          </section>
      </sections> -->
    </section>

    <section address="JobParameter">
      <title>Job Parameter</title>
      <content>
        <!-- Uncomment this to create a sub-section outline
        <autoOutline /> -->
        <para>
          Das oberste Element einer <token>V</token>-Verarbeitung ist immer der <languageKeyword>Job</languageKeyword>.
          Wie der Job auszusehen hat und was er tun soll, wird in einer Datei <languageKeyword>JobDescription.xml</languageKeyword>
          festgelegt.
        </para>
        <para>
          Jobs können beliebig geschachtelt werden. Wir werden dann zukünftig von (Haupt-)<languageKeyword>Job</languageKeyword>
          und <languageKeyword>SubJobs</languageKeyword> sprechen, obwohl <token>V</token> alle Jobs gleich behandelt, zumal
          ein <languageKeyword>SubJob</languageKeyword> ja wiederum "Haupt"-<languageKeyword>Job</languageKeyword> für
          weitere <languageKeyword>SubJobs</languageKeyword> sein kann.
        </para>
        <para>
          Ein Beispiel für eine funktionierende <languageKeyword>JobDescription.xml</languageKeyword> finden Sie unter
          <link xlink:href="c8911ff4-4ce7-406b-8467-e8ddff1ec56c" />.
        </para>
        <alert class="note">
          <para>
            In der <languageKeyword>JobDescription.xml</languageKeyword>
            können auch für <token>V</token> unbekannte ("anonyme") Anwender-Parameter für die Übergabe an Ihre <languageKeyword>Checker</languageKeyword>
            oder <languageKeyword>Worker</languageKeyword> wieder aufgelöst werden. Wozu das gut ist und wie das genau funktioniert,
            können Sie im Kapitel <link xlink:href="15204f64-ecf7-44b6-822d-74e36b99927d" /> nachlesen.
          </para>
        </alert>
        <para>
          Die nachfolgende Liste enthält alle wesentlichen Parameter, die innerhalb einer <languageKeyword>JobDescription.xml</languageKeyword>
          gesetzt werden können. Dies betrifft nicht nur <languageKeyword>Jobs</languageKeyword> sondern auch alle
          <languageKeyword>Job</languageKeyword>-Elemente wie <languageKeyword>Checker</languageKeyword>, <languageKeyword>Trigger</languageKeyword>,
          <languageKeyword>Worker</languageKeyword>, etc.
        </para>
        <table>
          <tableHeader>
            <row>
              <entry>
                <para>Job-Parameter</para>
              </entry>
              <entry>
                <para>Strukturansicht</para>
              </entry>
            </row>
          </tableHeader>
          <row>
            <entry>
              <list class="bullet">
                <listItem>
                  <para>
                    <languageKeyword>LogicalName</languageKeyword>
                  </para>
                  <para>
                    Alle <languageKeyword>Jobs</languageKeyword>, <languageKeyword>Checker</languageKeyword>, <languageKeyword>SubJobs</languageKeyword>,
                    <languageKeyword>Snapshots</languageKeyword> und <link xlink:href="ac884694-516c-4c98-a2af-d79cc504d0f6" /> haben einen
                    <languageKeyword>LogicalName</languageKeyword>, über den sie von <token>V</token> verarbeitet werden können.
                    Außerdem wird dieser <languageKeyword>LogicalName</languageKeyword> bei <languageKeyword>Jobs</languageKeyword>,
                    <languageKeyword>Snapshots</languageKeyword> und <languageKeyword>Checkern</languageKeyword> von <token>V</token>
                    auf dem Bildschirm angezeigt.
                  </para>
                  <para>
                    Beispiel: &lt;LogicalName&gt;Check All&lt;/LogicalName&gt;
                  </para>
                  <alert class="caution">
                    <para>
                      Dieser <languageKeyword>LogicalName</languageKeyword> muss gleich dem Namen sein, unter dem der Knoten
                      in der <languageKeyword>LogicalExpression</languageKeyword> (siehe unten) angesprochen wird, sonst kann
                      <token>V</token> die Zuordnung zur Laufzeit nicht auflösen.
                      Denken Sie daran, wenn Sie einen <languageKeyword>LogicalName</languageKeyword> mal ändern wollen.
                    </para>
                  </alert>
                  <alert class="note">
                    <para>
                      Wenn ein <languageKeyword>Job</languageKeyword> einen anderen als <languageKeyword>SubJob</languageKeyword> lädt,
                      erhält der <languageKeyword>SubJob</languageKeyword> den <languageKeyword>LogicalName</languageKeyword> mit dem
                      er im Haupt-Job benannt wird. <token>V</token> sorgt ggf. intern für die Anpassung von Referenzen
                      im <languageKeyword>SubJob</languageKeyword>.
                    </para>
                  </alert>
                </listItem>
                <listItem>
                  <para>
                    <languageKeyword>LogicalExpression</languageKeyword>
                  </para>
                  <para>
                    Alle <languageKeyword>Jobs</languageKeyword> und <languageKeyword>SubJobs</languageKeyword> werden über eine
                    <languageKeyword>LogicalExpression</languageKeyword> beschrieben. Über die <languageKeyword>LogicalExpression</languageKeyword>
                    legen Sie fest, wie die Beziehungen der Knoten des <languageKeyword>Jobs</languageKeyword> zueinander sind und welche
                    Struktur der <languageKeyword>Job</languageKeyword> letzten Endes auf dem Bildschirm hat.<lineBreak />
                  </para>
                  <alert class="note">
                    <para>
                      <languageKeyword>LogicalExpressions</languageKeyword> können auf zwei leicht unterschiedliche Arten formuliert werden,
                      siehe folgendes Beispiel:
                    </para>
                    <list class="ordered">
                      <listItem>
                        <para>
                          &lt;LogicalExpression&gt;(Google AND Heise) AND (Local OR Local_Backup)&lt;/LogicalExpression&gt;
                        </para>
                      </listItem>
                      <listItem>
                        <para>
                          &lt;LogicalExpression&gt;&lt;![CDATA[(Google AND Heise) AND (Local OR Local_Backup)]]&gt;&lt;/LogicalExpression&gt;
                        </para>
                      </listItem>
                    </list>
                    <para>
                      Die zweite Form, in der der logische Ausdruck noch zusätzlich in "&lt;![CDATA[" und "]]&gt;" eingeschlossen ist,
                      hat den Vorteil, dass im logischen Ausdruck auch Sonderzeichen vorkommen dürfen. Das ermöglicht,
                      <languageKeyword>Operatoren</languageKeyword> in ihrer Kurzform verwenden zu können.
                      Details dazu werden im Kapitel <link xlink:href="0e4f7c52-ffb4-4ea3-9ab6-40f24b47373d" /> erklärt.
                    </para>
                  </alert>
                </listItem>
                <listItem>
                  <para>
                    <languageKeyword>PhysicalPath</languageKeyword>
                  </para>
                  <para>
                    Jeder <languageKeyword>Job</languageKeyword> wird über seinen <languageKeyword>PhysicalPath</languageKeyword> gefunden.
                    Der <languageKeyword>PhysicalPath</languageKeyword> gehört nicht zur Job-Definition selbst, sondern muss außerhalb der
                    <languageKeyword>JobDescription.xml</languageKeyword> im Moment des Ladens festgelegt sein. Dies wird bei einem Haupt-Job
                    über den Vishnu-Parameter <languageKeyword>Job</languageKeyword> gesteuert, für <languageKeyword>SubJobs</languageKeyword>
                    muss der <languageKeyword>PhysicalPath</languageKeyword> in der <languageKeyword>JobDescription.xml</languageKeyword> des
                    ladenden, übergeordneten Jobs gesetzt werden.
                  </para>
                  <para>
                    <languageKeyword>Checker</languageKeyword>,<languageKeyword> Trigger</languageKeyword>,<languageKeyword> Logger</languageKeyword>,
                    <languageKeyword> Worker</languageKeyword> und <languageKeyword>ValueModifier</languageKeyword> werden ebenfalls über
                    den <languageKeyword>PhysicalPath</languageKeyword> geladen, sofern sie nicht einen anderen Knoten oder
                    <languageKeyword>TreeEvents</languageKeyword> referenzieren (siehe hierzu
                    auch <link xlink:href="ac884694-516c-4c98-a2af-d79cc504d0f6" /> und <link xlink:href="28fdc0c4-7fdc-4d16-be94-94cee2a9ca85" />).
                  </para>
                  <para>
                    Beispiel: &lt;PhysicalPath&gt;..\SubJob&lt;/PhysicalPath&gt;
                    <lineBreak />
                  </para>
				  <para></para>
                </listItem>
                <listItem>
                  <para>
                    <languageKeyword>Parameters</languageKeyword>
                  </para>
                  <para>
                    Der Abschnitt <database>Parameters</database> dient dazu, Übergabeparameter für Ihre eigenen
                    <languageKeyword>Checker, Trigger, Worker oder Logger</languageKeyword> in der 
                    <languageKeyword>JobDescription.xml</languageKeyword> zu hinterlegen.
                    <token>V</token> reicht diese von Ihnen formulierten Parameter dann später beim Aufruf Ihrer
                    eigenen <languageKeyword>Checker, Trigger, Worker oder Logger</languageKeyword> an diese weiter.
                  </para>
                  <para>
                    Die Form und Syntax der übergebenen Parameter ist nicht festgelegt. Sie können hierüber völlig frei bestimmen.
                    Entscheidend ist nur, dass Ihr eigenes Element (DLL) das Format versteht, welches Sie in der
                    <languageKeyword>JobDescription.xml</languageKeyword> hinterlegt haben.
                  </para>
                  <alert class="note">
                    <para>
                      Wie auch bei <languageKeyword>LogicalExpression</languageKeyword> können Parameter im erweiterten Format
                      übergeben werden, wie zum Beispiel Folgende bei einem Worker:
                      &lt;Parameters&gt;&lt;![CDATA[Fehler|%Timestamp%: %MachineName% MyChecker %Event% von %Source% in %Sender%]]&gt;&lt;/Parameters&gt;
                    </para>
                  </alert>
                </listItem>
                <listItem>
                  <para>
                    <languageKeyword>Reference</languageKeyword>
                  </para>
                  <para>
                    Über <database>Reference</database> wird in besonderen Fällen auf andere <token>V</token>-Elemente
                    verwiesen.
                  </para>
                  <para>
                    Der sicherlich häufigste Anwendungsfall findet sich bei <languageKeyword>ValueModifiern</languageKeyword>.
                    Hier wird mithilfe von &lt;Reference&gt;Checkername&lt;/Reference&gt; der Checker angegeben, dessen
                    <languageKeyword>Result</languageKeyword> über den <languageKeyword>ValueModifier</languageKeyword>
                    verändert werden soll. Beispiele hierzu finden Sie unter <link xlink:href="bc0ffa08-c936-4fad-8fdb-dbd2279fc360#ValueModifier" />
                    und <link xlink:href="b2bd8510-a131-4466-9fac-66f2033d92a0" />.
                  </para>
                  <para>
                    Eine weitere Anwendung findet sich bei <languageKeyword>Trigger-</languageKeyword> und
                    <languageKeyword>Logger-</languageKeyword>Zuweisungen, welche vorher definierte Trigger und Logger
                    referenzieren, siehe dazu auch <link xlink:href="ac884694-516c-4c98-a2af-d79cc504d0f6" />.
                  </para>
    			  <para></para>
				</listItem>
                <listItem>
                  <para>
                    <languageKeyword>StartCollapsed</languageKeyword>
                  </para>
                  <para>
                    Alle <languageKeyword>Jobs</languageKeyword> werden qua Grundeinstellung eingeklappt dargestellt, d.h.
                    Unterelemente wie z.B. <languageKeyword>Checker</languageKeyword> oder weitere <languageKeyword>Jobs</languageKeyword>
                    sind erstmal nicht sichtbar. Um dieses Verhalten zu ändern, können Sie <languageKeyword>StartCollapsed</languageKeyword>
                    auf <database>true</database> setzen.
                  </para>
                  <alert class="note">
                    <para>
                      Noch weitergehende Möglichkeiten haben Sie durch das Abspeichern einer aktuellen Anordnung eines
                      <token>V</token>-Trees zur Laufzeit, siehe <link xlink:href="6fe3bf85-d02b-41ff-84a7-dcc2a4819978" />.
                      Die Darstellung ist übrigens auf jedem Arbeitsplatz individuell speicherbar.
                    </para>
                  </alert>
                </listItem>
                <listItem>
                  <para>
                    <languageKeyword>ThreadLocked</languageKeyword>
                  </para>
                  <para>
                    <languageKeyword>LockName</languageKeyword>
                  </para>
                  <para>
                    <token>V</token> arbeitet hoch parallel, d.h. dass alle Elemente wie zum Beispiel
                    <languageKeyword>Checker</languageKeyword>, <languageKeyword>Trigger</languageKeyword>, etc.
                    gleichzeitig arbeiten können. <token>V</token> ist dafür von vornherein ausgelegt (threadsafe).
                    Es kann aber sein, dass ein von Ihnen erstellter <languageKeyword>Checker</languageKeyword>-Typ
                    Probleme bekommt, wenn mehrere gleichartige Checker in einem Tree konfiguriert sind und
                    gleichzeitig laufen.
                  </para>
                  <alert class="caution">
                    <para>
                      Die Fehler, die dann unter Umständen auftreten, können sehr unangenehm und kaum zu ermitteln
                      sein.<lineBreak />
                      Setzen Sie in einer solchen Situation auf <languageKeyword>Job</languageKeyword>-Ebene
                      oder auf <languageKeyword>Checker</languageKeyword>-Ebene den Schalter
                      <database>ThreadLocked</database> auf <database>true</database>. <token>V</token> stellt dann
                      sicher, dass derart gekennzeichnete <languageKeyword>Checker</languageKeyword> nacheinander und
                      nicht gleichzeitig ausgeführt werden.
                      <lineBreak />
                      Um verschiedene <languageKeyword>Checker</languageKeyword>-Typen dabei noch differenziert behandeln
                      zu können, nutzen Sie das optionale Zusatzattribut <database>Lockname</database>.<lineBreak />
                      Hier ein Beispiel: <database>&lt;ThreadLocked LockName="ConcurrentSQL"&gt;true&lt;/ThreadLocked&gt;</database>
                    </para>
                  </alert>
                </listItem>
                <listItem>
                  <para>
                    <languageKeyword>UserControlPath</languageKeyword>
                  </para>
                  <para>
                    <languageKeyword>JobListUserControlPath</languageKeyword>
                  </para>
                  <para>
                    <languageKeyword>NodeListUserControlPath</languageKeyword>
                  </para>
                  <para>
                    <languageKeyword>SingleNodeUserControlPath</languageKeyword>
                  </para>
                  <para>
                    <languageKeyword>ConstantNodeUserControlPath</languageKeyword>
                  </para>
                  <para>
                    <languageKeyword>JobConnectorUserControlPath</languageKeyword>
                  </para>
                  <para>
                    <languageKeyword>SnapshotUserControlPath</languageKeyword>
                  </para>
                  <para>
                    Die hier zusammengefassten Einstellungen dienen alle zur Festlegung alternativer Darstellungen
                    (<languageKeyword>Views</languageKeyword>) von <token>V</token>-Elementen.
                    Mit ihrer Hilfe können Sie in der <languageKeyword>JobDescription.xml</languageKeyword>
                    optional relative Pfade zu eigenen <languageKeyword>Views</languageKeyword> (DLLs) vorgeben.
                  </para>
                  <para>
                    Der Parameter <database>UserControlPath</database> bezieht sich dabei nur auf das Element,
                    bei dem er in der <languageKeyword>JobDescription.xml</languageKeyword> gesetzt wird.
                    Die anderen Parameter können auf <languageKeyword>Job</languageKeyword>-Ebene gesetzt werden
                    und gelten dann für alle untergeordneten Elemente des im Namen des Parameters enthaltenen Typs
                    (JobList, NodeList, SingleNode, ConstantNode, JobConnector, Snapshot).<lineBreak />
                    Der Parameter <database>SingleNodeUserControlPath</database> bestmmt dabei auch das Aussehen
                    von <languageKeyword>ValueModifiern</languageKeyword> und <languageKeyword>NodeConnectoren</languageKeyword>.
                  </para>
                  <alert class="note">
                    <para>
                      Siehe auch <link xlink:href="62ca75a8-ba50-4115-93df-b1e76bf6e5f7" /> und
                      <link xlink:href="74204d60-cbb3-4f38-8266-aa7af541143f" />.
                    </para>
                  </alert>
                </listItem>
              </list>
            </entry>
            <entry>
              <para>
                <markup>
                  Job<br/>
                  &#160;&#160;&#160;&#160;LogicalName<br/>
                  &#160;&#160;&#160;&#160;LogicalExpression<br/>
                  &#160;&#160;&#160;&#160;PhysicalPath<br/>
                  &#160;&#160;&#160;&#160;StartCollapsed<br/>
                  &#160;&#160;&#160;&#160;ThreadLocked<br/>
                  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;LockName<br/>
                  &#160;&#160;&#160;&#160;JobTrigger<br/>
                  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Reference<br/>
                  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;PhysicalPath<br/>
                  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Parameters<br/>
                  &#160;&#160;&#160;&#160;JobSnapshotTrigger<br/>
                  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Parameters<br/>
                  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Reference<br/>
                  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;PhysicalPath<br/>
                  &#160;&#160;&#160;&#160;JobLogger<br/>
                  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Reference<br/>
                  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;PhysicalPath<br/>
                  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Parameters<br/>
                  &#160;&#160;&#160;&#160;UserControlPath<br/>
                  &#160;&#160;&#160;&#160;JobListUserControlPath<br/>
                  &#160;&#160;&#160;&#160;SnapshotUserControlPath<br/>
                  &#160;&#160;&#160;&#160;NodeListUserControlPath<br/>
                  &#160;&#160;&#160;&#160;JobConnectorUserControlPath<br/>
                  &#160;&#160;&#160;&#160;SingleNodeUserControlPath<br/>
                  &#160;&#160;&#160;&#160;ConstantNodeUserControlPath<br/>
                  &#160;&#160;&#160;&#160;Checkers<br/>
                  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Checker<br/>
                  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;LogicalName<br/>
                  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;PhysicalPath<br/>
                  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Parameters<br/>
                  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;IsMirror<br/>
                  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Trigger<br/>
                  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Reference<br/>
                  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;PhysicalPath<br/>
                  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Parameters<br/>
                  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Logger<br/>
                  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Reference<br/>
                  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;PhysicalPath<br/>
                  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Parameters<br/>
                  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;UserControlPath<br/>
                  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;SingleNodeUserControlPath<br/>
                  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ThreadLocked<br/>
                  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;LockName<br/>
                  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;IsGlobal<br/>
                  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;CanRunDllPath<br/>
                  &#160;&#160;&#160;&#160;ValueModifiers<br/>
                  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ValueModifier<br/>
                  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;LogicalName<br/>
                  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Reference<br/>
                  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;PhysicalPath<br/>
                  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Format<br/>
                  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Type<br/>
                  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;IsGlobal<br/>
                  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;UserControlPath<br/>
                  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;SingleNodeUserControlPath<br/>
                  &#160;&#160;&#160;&#160;Triggers<br/>
                  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Trigger<br/>
                  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;LogicalName<br/>
                  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Reference<br/>
                  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;PhysicalPath<br/>
                  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Parameters<br/>
                  &#160;&#160;&#160;&#160;Loggers<br/>
                  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Logger<br/>
                  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;LogicalName<br/>
                  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;PhysicalPath<br/>
                  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Parameters<br/>
                  &#160;&#160;&#160;&#160;Workers<br/>
                  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Worker<br/>
                  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;LogicalExpression<br/>
                  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;SubWorkers&#160;&#160;&#160;&#160;<br/>
                  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;SubWorker<br/>
                  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;PhysicalPath<br/>
                  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Parameters<br/>
                  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Trigger<br/>
                  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Reference<br/>
                  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;PhysicalPath<br/>
                  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Parameters<br/>
                  &#160;&#160;&#160;&#160;SubJobs<br/>
                  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;SubJob<br/>
                  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;LogicalName<br/>
                  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;PhysicalPath<br/>
                  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;StartCollapsed<br/>
                  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(Rekursion Job)&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<br/>
                  &#160;&#160;&#160;&#160;Snapshots<br/>
                  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Snapshot<br/>
                  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;LogicalName<br/>
                  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;PhysicalPath<br/>
                  &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;StartCollapsed<br/>
                </markup>
              </para>
            </entry>
          </row>
        </table>
      </content>
      <!-- If a section contains a sections element, its content creates
           sub-sections.  These are not collapsible.
      <sections>
          <section address="SubSection1">
              <title>Sub-section 1</title>
              <content>
                  <para>Sub-section content.</para>
              </content>
          </section>
          <section address="SubSection2">
              <title>Sub-section 2</title>
              <content>
                  <para>Sub-section content.</para>
              </content>
          </section>
      </sections> -->
    </section>

    <section address="sieheAuch">
      <title>siehe auch</title>
      <content>
        <!-- Uncomment this to create a sub-section outline
        <autoOutline /> -->
        <para>

        </para>
        <list class="bullet">

          <listItem>
            <para>
              <link xlink:href="bc0ffa08-c936-4fad-8fdb-dbd2279fc360" />
            </para>
          </listItem>

          <listItem>
            <para>
              <link xlink:href="c8911ff4-4ce7-406b-8467-e8ddff1ec56c" />
            </para>
          </listItem>

          <listItem>
            <para>
              <link xlink:href="1ccf9fe4-94f8-49ff-9234-506c5ad9daa7" />
            </para>
          </listItem>

          <listItem>
            <para>
              <codeEntityReference qualifyHint="true">R:Project_Vishnu_doc.de</codeEntityReference>
            </para>
          </listItem>

        </list>
      </content>
      <!-- If a section contains a sections element, its content creates
           sub-sections.  These are not collapsible.
      <sections>
          <section address="SubSection1">
              <title>Sub-section 1</title>
              <content>
                  <para>Sub-section content.</para>
              </content>
          </section>
          <section address="SubSection2">
              <title>Sub-section 2</title>
              <content>
                  <para>Sub-section content.</para>
              </content>
          </section>
      </sections> -->
    </section>

    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID"/>
      <link xlink:href="Other Topic's ID">Link inner text</link>

      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>

      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8270" />
      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on GitHub</linkText>
          <linkAlternateText>Go to GitHub</linkAlternateText>
          <linkUri>https://GitHub.com/EWSoftware/SHFB</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerConceptualDocument>
</topic>
